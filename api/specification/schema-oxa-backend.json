{
  "openapi": "3.1.0",
  "info": {
    "title": "OXA API Documentation",
    "description": "OXA REST endpoints specification",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "",
      "description": ""
    }
  ],
  "paths": {
    "/telemetry/events": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get events telemetry (timeseries)",
        "description": "Get events telemetry timeseries, grouped by the given fields",
        "operationId": "_get_events_telemetry_timeseries_v1_telemetry_events_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistogramResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/events/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get events telemetry",
        "description": "Get events telemetry, grouped by the given fields",
        "operationId": "_get_events_telemetry_v1_telemetry_events_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCountersResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/connectors/report": {
      "get": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get connectors telemetry report",
        "description": "Downloads a report of all or selected connectors and connector formats activity for the\n    given organization_uuid(s) and the given period\n    If the period is smaller than 30 days the report's time resolution is daily\n    Otherwise time resolution is per calendar month",
        "operationId": "_get_connectors_report_v1_telemetry_connectors_report_get",
        "parameters": [
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          },
          {
            "name": "connector_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of connector UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of connector UUID(s)"
          },
          {
            "name": "connector_format_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of dialect UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of dialect UUID(s)"
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "csv",
                "json",
                "xls"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/observables": {
      "post": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Get an observable's telemetry",
        "description": "Get telemetry for a single observable, by supplying the full observable's bundle,\n    or for a list of observables",
        "operationId": "_get_observables_telemetry_v1_telemetry_observables_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservablesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ObservablesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ObservableResponse"
                    }
                  ],
                  "title": "Response  Get Observables Telemetry V1 Telemetry Observables Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Get an observable's telemetry (by ID)",
        "description": "Get telemetry for a single observable ID",
        "operationId": "_get_observable_telemetry_v1_telemetry_observables_get",
        "parameters": [
          {
            "name": "observable_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservableResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/observables/report": {
      "post": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Get observables telemetry report",
        "description": "Downloads a report of selected observables activity for the given organization_uuid(s) and the given period\n    If the period is smaller than 30 days the report's default time resolution is daily\n    Otherwise time resolution is per calendar month",
        "operationId": "_get_observables_report_v1_telemetry_observables_report_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservablesReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/rules": {
      "get": {
        "tags": [
          "Reporting",
          "Rules",
          "Telemetry"
        ],
        "summary": "Get a detection rule's telemetry",
        "description": "Get telemetry for the given detection rule",
        "operationId": "_get_detection_rule_telemetry_v1_telemetry_rules_get",
        "parameters": [
          {
            "name": "rule_uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/cti-objects": {
      "get": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Get a CTI object's telemetry",
        "description": "Get a single CTI object's telemetry, nested by date and hour of day",
        "operationId": "_get_cti_object_telemetry_v1_telemetry_cti_objects_get",
        "parameters": [
          {
            "name": "object_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "object_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CTIObjectResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Search CTI objects telemetry",
        "description": "Get telemetry for multiple CTI objects, nested by date and hour of day",
        "operationId": "_get_cti_objects_telemetry_v1_telemetry_cti_objects_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CTIObjectsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CTIObjectsResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/cti-objects/top": {
      "get": {
        "tags": [
          "Reporting",
          "Intelligence",
          "Telemetry"
        ],
        "summary": "Get most sighted CTI objects",
        "description": "Get the CTI objects with most sightings for the given object type",
        "operationId": "_get_top_cti_object_telemetry_v1_telemetry_cti_objects_top_get",
        "parameters": [
          {
            "name": "object_type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "indicator",
                "attack-pattern",
                "campaign",
                "infrastructure",
                "intrusion-set",
                "malware",
                "threat-actor",
                "tool",
                "vulnerability"
              ],
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMaximum": 101,
              "exclusiveMinimum": 0,
              "default": 10
            }
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopCTIObjectResponse"
                  },
                  "title": "Response  Get Top Cti Object Telemetry V1 Telemetry Cti Objects Top Get"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/assets": {
      "post": {
        "tags": [
          "Reporting",
          "Assets",
          "Telemetry"
        ],
        "summary": "Get an asset's telemetry",
        "description": "Get a single asset's telemetry, nested by date and hour of day",
        "operationId": "_get_asset_telemetry_v1_telemetry_assets_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reporting",
          "Assets",
          "Telemetry"
        ],
        "summary": "Get assets telemetry",
        "description": "Get the number of events seen during the specified interval for the given assets,\n    nested by date and hour of day",
        "operationId": "_get_assets_telemetry_v1_telemetry_assets_get",
        "parameters": [
          {
            "name": "asset_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of asset UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of asset UUID(s)"
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/assets/heatmap": {
      "get": {
        "tags": [
          "Reporting",
          "Assets",
          "Telemetry"
        ],
        "summary": "Get an asset's heatmap",
        "description": "Get an hourly heatmap of number of events seen during the specified interval for the given asset",
        "operationId": "_get_asset_heatmap_v1_telemetry_assets_heatmap_get",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by comma-separated list of organization UUID(s)",
              "type": "string"
            },
            "description": "Filter by comma-separated list of organization UUID(s)"
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHeatmapResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/assets/{asset_uuid}/hosts": {
      "get": {
        "tags": [
          "Reporting",
          "Assets",
          "Telemetry"
        ],
        "summary": "Get target hosts for a given asset",
        "description": "Get the number of target hosts a given asset successfully authenticated to",
        "operationId": "_get_asset_hosts_v1_telemetry_assets__asset_uuid__hosts_get",
        "parameters": [
          {
            "name": "asset_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response  Get Asset Hosts V1 Telemetry Assets  Asset Uuid  Hosts Get"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/assets/{asset_uuid}/accounts": {
      "get": {
        "tags": [
          "Reporting",
          "Assets",
          "Telemetry"
        ],
        "summary": "Get target accounts for given asset",
        "description": "If asset_uuid is a host, get the number of distinct target accounts that were\n    successfully authenticated as on this host\n    If asset_uuid is an account, get the number of distinct target accounts that were\n    successfully authenticated as from this account",
        "operationId": "_get_asset_accounts_v1_telemetry_assets__asset_uuid__accounts_get",
        "parameters": [
          {
            "name": "asset_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response  Get Asset Accounts V1 Telemetry Assets  Asset Uuid  Accounts Get"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/events-by-status/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get events telemetry by parsing outcome",
        "description": "Get events telemetry by parsing statuses, grouped by the given fields",
        "operationId": "_get_events_telemetry_by_parsing_status_v1_telemetry_events_by_status_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsByStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventByParsingStatusCountersResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/events-by-status": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get events telemetry by parsing status (timeseries)",
        "description": "Get events telemetry timeseries by parsing status",
        "operationId": "_get_events_by_parsing_status_histogram_v1_telemetry_events_by_status_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventsByStatusHistogramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsByStatusHistogramResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/parsing-issues/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get invalid and in warning events telemetry",
        "description": "Get events telemetry for non-valid events",
        "operationId": "_get_events_aggregation_by_parsing_status_v1_telemetry_parsing_issues_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventAggRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventAggCountersResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/connectors/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get connectors statistics (lag and size)",
        "description": "Get min, max and average values for lag, processing lag, message size and event size",
        "operationId": "_get_connector_stats_v1_telemetry_connectors_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorStatsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorLagCounterResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/connectors": {
      "post": {
        "tags": [
          "Reporting",
          "Events",
          "Telemetry"
        ],
        "summary": "Get connectors statistics as timeseries",
        "description": "Get timeseries of lag, processing lag, message size and event size",
        "operationId": "_get_connector_lag_histogram_v1_telemetry_connectors_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectorStatisticsHistogramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorStatisticsHistogramResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/playbooks/action-runs": {
      "post": {
        "tags": [
          "Reporting",
          "Playbooks",
          "Telemetry"
        ],
        "summary": "Get playbook action runs histogram",
        "description": "Get histogram of playbook action runs",
        "operationId": "_get_playbook_actions_runs_histogram_v1_telemetry_playbooks_action_runs_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybookHistogramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookHistogramResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/playbooks/action-runs/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Playbooks",
          "Telemetry"
        ],
        "summary": "Get playbook action counter",
        "description": "Get playbook action counter",
        "operationId": "_get_playbook_counters_v1_telemetry_playbooks_action_runs_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybookCounterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookCountersResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/alert-filter/counters": {
      "post": {
        "tags": [
          "Reporting",
          "Alert filters",
          "Telemetry"
        ],
        "summary": "Get alert filters counter",
        "description": "Get alert filters counter",
        "operationId": "_get_alert_filters_counters_v1_telemetry_alert_filter_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertFiltersCountersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertFiltersCountersResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/tokens": {
      "post": {
        "tags": [
          "Reporting",
          "AI assistant",
          "Telemetry"
        ],
        "summary": "Get AI tokens usage histogram",
        "description": "Get histogram of total tokens, prompt tokens and completion tokens used by AI tool",
        "operationId": "_get_ai_tokens_usage_histogram_v1_telemetry_tokens_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AITokensHistogramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AITokensHistogramResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/tokens/counters": {
      "post": {
        "tags": [
          "Reporting",
          "AI assistant",
          "Telemetry"
        ],
        "summary": "Get AI tokens usage counter",
        "description": "Get counter of total tokens, prompt tokens and completion tokens used",
        "operationId": "_get_AI_tokens_usage_counters_v1_telemetry_tokens_counters_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AITokensCounterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search successfully performed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AITokensCounterResponse"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/queries": {
      "get": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "List Queries",
        "operationId": "list_queries_v1_notebooks_queries_get",
        "parameters": [
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "gte": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "lte": 1000,
              "default": 100
            }
          },
          {
            "name": "match[name]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemList_QuerySchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Save Query",
        "operationId": "save_query_v1_notebooks_queries_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueryParameters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/queries/{query_uuid}": {
      "get": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Get Query",
        "operationId": "get_query_v1_notebooks_queries__query_uuid__get",
        "parameters": [
          {
            "name": "query_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Update Query",
        "operationId": "update_query_v1_notebooks_queries__query_uuid__patch",
        "parameters": [
          {
            "name": "query_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueryParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Delete Query",
        "operationId": "delete_query_v1_notebooks_queries__query_uuid__delete",
        "parameters": [
          {
            "name": "query_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/queries/runs": {
      "post": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Execute Query",
        "operationId": "execute_query_v1_notebooks_queries_runs_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueryRunParameters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRunCreated"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/queries/runs/{query_run_uuid}": {
      "get": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Get Query Run",
        "operationId": "get_query_run_v1_notebooks_queries_runs__query_run_uuid__get",
        "parameters": [
          {
            "name": "query_run_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "gte": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "lte": 1000,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRunWithResultsSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Delete Query Run",
        "description": "Delete a specific query run.\n\nThe deletion is performed asynchronously.",
        "operationId": "delete_query_run_v1_notebooks_queries_runs__query_run_uuid__delete",
        "parameters": [
          {
            "name": "query_run_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Patch Query Run",
        "description": "Update the parent slug of a query run.",
        "operationId": "patch_query_run_v1_notebooks_queries_runs__query_run_uuid__patch",
        "parameters": [
          {
            "name": "query_run_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchQueryRunParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRunSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/queries/runs/{query_run_uuid}/download": {
      "get": {
        "tags": [
          "Investigation",
          "Notebooks",
          "Queries"
        ],
        "summary": "Download Query Run Results",
        "operationId": "download_query_run_results_v1_notebooks_queries_runs__query_run_uuid__download_get",
        "parameters": [
          {
            "name": "query_run_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "download_format",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AllowedDownloadFormats"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/{notebook_uuid}/token": {
      "post": {
        "tags": [
          "Investigation",
          "Notebooks"
        ],
        "summary": "Get Notebook Token",
        "operationId": "get_notebook_token_v1_notebooks__notebook_uuid__token_post",
        "parameters": [
          {
            "name": "notebook_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotebookTokenSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FastAPI_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conf/alerts/categories": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "List alerts categories",
        "description": "An alert category contains multiple alerts types sharing common properties that define the category\n\nExample:\n    - Abusive-usage\n    - Malicious-code\n    - Information-gathering\n\nThe categories and types are based on eCSIRT taxonomy.",
        "operationId": "get_alert_categories_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      }
    },
    "/conf/alerts/types": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTypeListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "List alerts types",
        "description": "of given categories",
        "operationId": "get_alert_types_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[category_uuid]",
            "type": "string",
            "description": "Match alerts categories by their uuids (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[category_name]",
            "type": "string",
            "description": "Match alerts categories by their names (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type_name]",
            "type": "string",
            "description": "Match alerts types by their names (separated by commas).",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert type"
        ]
      }
    },
    "/conf/archives/views": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List views",
        "description": "A view is a configuration to retrieve snapshots of events stored by Analytic solution\nThis paginated endpoint list all views. A set of filters can be\nspecified to focus on certain views.\n\nThe following permissions are required:\n - “View archives” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_views_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match views by their uuid",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match views by their name",
            "required": false
          },
          {
            "in": "query",
            "name": "match[archive_uuid]",
            "type": "string",
            "description": "Match views by the identifier of their archive",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": [
              "Sort returned templates (accepted values: ",
              "'created_at', 'updated_at', 'name', 'uuid', 'archive_uuid')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "views"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new view",
        "description": "The provided details are used to specify the view to create.\n\nThe following permissions are required:\n - “Manage views from archive” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_views_resource",
        "parameters": [],
        "tags": [
          "views"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/countermeasures": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List set of countermeasures",
        "description": "The following permissions are required:\n - “Read countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_create_counter_measures_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match countermeasure by their entity uuids (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[rule_definition_uuid]",
            "type": "string",
            "description": "Match countermeasure by their rule definition uuids (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[alert_type]",
            "type": "string",
            "description": "Match countermeasure by their alert types (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match countermeasure by their names (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "range[relevance]",
            "type": "string",
            "description": "Filter countermeasures by their relevance.",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Countermeasures"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasuresSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Create a new set of countermeasures",
        "description": "The following permissions are required:\n - “Create an edit countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_create_counter_measures_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Alerts",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/countermeasures/alert_type/{alert_type_uuid}": {
      "parameters": [
        {
          "name": "alert_type_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountermeasuresSchema"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get set of global countermeasures for a specific alert_type",
        "description": "The following permissions are required:\n - “Read countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_type_counter_measures_resource",
        "tags": [
          "Detection",
          "Alert Type",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "alert_type_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/countermeasures/entity/{entity_uuid}/alert_type/{alert_type_uuid}": {
      "parameters": [
        {
          "name": "entity_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "alert_type_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountermeasuresSchema"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get set of countermeasures for a specific alert_type within an entity",
        "description": "The following permissions are required:\n - “Read countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_entity_counter_measures_resource",
        "tags": [
          "Detection",
          "Alert Type",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "entity_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alert_type_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/countermeasures/rule/{rule_definition_uuid}": {
      "parameters": [
        {
          "name": "rule_definition_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountermeasuresSchema"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get set of countermeasures for a specific rule",
        "description": "The following permissions are required:\n - “Read countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rule_counter_measures_resource",
        "tags": [
          "Detection",
          "Countermeasures",
          "Rules"
        ],
        "parameters": [
          {
            "name": "rule_definition_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/countermeasures/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasuresSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get set of countermeasures",
        "description": "The following permissions are required:\n - “Read countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_counter_measures_resource",
        "tags": [
          "Alerts",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete countermeasures",
        "description": "The following permissions are required:\n - “Delete countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_counter_measures_resource",
        "tags": [
          "Alerts",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasuresSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Update countermeasures",
        "description": "The following permissions are required:\n - “Create an edit countermeasure templates” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_counter_measures_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Alerts",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/entities": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntitySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List entities",
        "description": "This endpoint can be used to retrieve all the configured entities.\n\nThe following permissions are required:\n - “View entities” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_entities_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match entities by their unique identifiers (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match entities by their names (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_id]",
            "type": "string",
            "description": "Match entities by their entity_ids (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "range[number_of_connectors]",
            "type": "string",
            "description": "Match entities by their number of connectors",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": "Sort returned entities (accepted values: 'created_at', 'updated_at', 'name', 'number_of_connectors').",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "Configuration",
          "Entities"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "409": {
            "description": "Invalid parameter"
          }
        },
        "summary": "Create new entity",
        "description": "The following permissions are required:\n - “Manage entities” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_entities_resource",
        "parameters": [],
        "tags": [
          "Configuration",
          "Entities"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/entities/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown entity"
          }
        },
        "summary": "Get single entity",
        "description": "The following permissions are required:\n - “View entities” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_entity_resource",
        "tags": [
          "Configuration",
          "Entities"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Entity deleted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown customer or entity"
          }
        },
        "summary": "Delete entity",
        "description": "The following permissions are required:\n - “Delete entities” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_entity_resource",
        "tags": [
          "Configuration",
          "Entities"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitySchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown customer or entity"
          },
          "409": {
            "description": "Invalid parameter"
          }
        },
        "summary": "Update entity",
        "description": "The following permissions are required:\n - “Manage entities” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_entity_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Configuration",
          "Entities"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/events/search/jobs": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List event search jobs",
        "description": "This endpoint can be use to retrieve all the event search jobs created\nby the organization of the user.\n\nOne can filter jobs given\n* their author (`match[created_by]`),\n* their status (`match[status]`),\n* their term (`match[term]`)\n\nJobs can be sorted given\n* the date of creation (`sort=created_at`),\n* the end of execution (`sort=ended_at`),\n* the start of execution (`sort=started_at`),\n* the ttl of their results (`sort=results_ttl`),\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[status]",
            "type": "string",
            "description": "Match event search jobs by their status.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[created_by]",
            "type": "string",
            "description": "Match event search jobs by their author.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[term]",
            "type": "string",
            "description": "Match event search jobs by their term (support joker char denoted by '*').",
            "required": false
          },
          {
            "in": "query",
            "name": "match[view_uuid]",
            "type": "string",
            "description": "The identifier of the view used to search events",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": [
              "Sort returned jobs (accepted values: ",
              "'created_at', 'ended_at', 'started_at', 'results_ttl')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "events"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobInfoSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create an event search job",
        "description": "Earliest time and latest time denote the UTC time boundaries of the search.\nLatest time must be after the earliest time.\n\nThey accept both an absolute time or a relative time.\nThe absolute time must follow the ISO 8601 format such as:\n* `2011-11-04`\n* `2011-11-04T00:05:23`\n* `2011-11-04 00:05:23.283`\n\nPlease note that microsecond precision will be ignored (digits beyond the third decimal place).\n\nThe relative time format denotes a delta with the task execution time.\nIt follows the format `(\\+|-)(\\d+)(S|M|H|D|W)` with case ignored\nand accepts seconds (s), minutes (m), hours (h), days (d) and weeks (w).\nBelow are valid relative times:\n* `+3d`: three days in the future\n* `-2w`: two weeks before now\n* `-7d`: seven days before now\n* `now`: current time\n\nWhen a new search job is executed, the job is retained in the system for\na period of time, called the `results_ttl`. The job automaticaly expires\nwhen the `results_ttl` limit is reached. After a job expires,\nall its artifacts are deleted.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_event_search_resource",
        "parameters": [],
        "tags": [
          "events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobInfoSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get an event search job",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_job_info_resource",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobInfoSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Update an event search job",
        "description": "One can use this method to update the `results_ttl` of the job.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_event_search_job_info_resource",
        "parameters": [
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "events"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}/cancel": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobInfoSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Cancel execution",
        "description": "One can use this endpoint to prevent the execution of a pending event search job\nor to stop an in-progress search job.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_cancel_event_search_job_resource",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}/events": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the events found by an event search job in descending order",
        "description": "The `earliest_time` and `latest_time` parameters can be used\nto focus on the events of a specific timeframe. If a timeframe\nis specified, the returned total value is the number of events\nin the timeframe.\n\nIf the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_job_events_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "description": "limit a number of items (allowed range is 1-1000), default is 100.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "latest_time",
            "type": "number",
            "description": "The earliest (inclusive) time bounds for the requested event in UTC time (in seconds)",
            "required": false
          },
          {
            "in": "query",
            "name": "earliest_time",
            "type": "number",
            "description": "The latest (exclusive) time bounds for the requested event in UTC time (in seconds)",
            "required": false
          },
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "events"
        ]
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}/export": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Export events",
        "description": "of the search job under various formats.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_export_event_search_job_resource",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "type": "string",
            "enum": [
              "csv",
              "json"
            ],
            "description": "The format of the export",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "type": "array",
            "default": null,
            "description": "An optional list of fields name to include in the export",
            "items": {
              "type": "string"
            },
            "x-nullable": true,
            "required": false,
            "collectionFormat": "multi"
          },
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "events"
        ]
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}/fields": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchJobFieldsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the fields of the events found by an event search job",
        "description": "If the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_job_fields_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "description": "limit a number of items (allowed range is 1-1000), default is 100.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "events"
        ]
      }
    },
    "/conf/events/search/jobs/{event_search_job_uuid}/histograms": {
      "parameters": [
        {
          "name": "event_search_job_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistogramsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the histograms of the events found by an event search job",
        "description": "If the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_job_histograms_resource",
        "tags": [
          "events"
        ],
        "parameters": [
          {
            "name": "event_search_job_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/events/search/similar": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSearchSimilarListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Finds top-10 similar event search term",
        "description": "This endpoint returns at most 10 similar event search terms given\na provided query.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_event_search_similar",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "term",
            "type": "string",
            "description": "Event search term",
            "required": false
          }
        ],
        "tags": [
          "events"
        ]
      }
    },
    "/conf/generation-modes": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationModeListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List generation modes",
        "description": "The following permissions are required:\n - “View generation mode” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_generation_modes_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Generation modes"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationModeSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new generation mode",
        "description": "The following permissions are required:\n - “SIC_WRITE_GENERATION_MODES” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_generation_modes_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Generation modes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/generation-modes/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationModeSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown generation mode"
          }
        },
        "summary": "Get a single generation mode",
        "description": "The following permissions are required:\n - “View generation mode” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_generation_mode_resource",
        "tags": [
          "Detection",
          "Generation modes"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown generation mode"
          }
        },
        "summary": "Delete a generation mode",
        "description": "The following permissions are required:\n - “SIC_WRITE_GENERATION_MODES” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_generation_mode_resource",
        "tags": [
          "Detection",
          "Generation modes"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationModeSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown generation mode"
          }
        },
        "summary": "Update a generation mode",
        "description": "The following permissions are required:\n - “SIC_WRITE_GENERATION_MODES” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_generation_mode_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Generation modes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/connectors": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List connectors",
        "description": "connector is a configuration to handle the reception of events into the Backend application.\nThis paginated endpoint list all connectors. A set of filters can be\nspecified to focus on certain connectors.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connectors_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[format_uuid]",
            "type": "string",
            "description": "Match connectors by their format uuid",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match connectors by their entity uuid",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_name]",
            "type": "string",
            "description": "Match connectors by their entity name",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_key]",
            "type": "string",
            "description": "Match connectors by their connector key",
            "required": false
          },
          {
            "in": "query",
            "name": "match[status]",
            "type": "string",
            "enum": [
              "UNKNOWN",
              "STOPPED",
              "STARTING",
              "STOPPING",
              "RUNNING",
              "ERROR",
              "CRITICAL_ERROR"
            ],
            "description": "Match connectors by their status",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match connectors by their name",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match connectors by their uuid",
            "required": false
          },
          {
            "in": "query",
            "name": "exclude[uuid]",
            "type": "string",
            "description": "Exclude connectors by their uuid.",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "default": null,
            "description": "Filter connectors by their creation date.",
            "x-nullable": true,
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": [
              "Sort returned templates (accepted values: ",
              "'created_at', 'updated_at', 'name', 'entity_name', 'connector_key', 'status')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "Configuration",
          "Connectors"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new connector",
        "description": "The provided details are used to specify the connector to create.\nIf no name is specified, the connector will be named according to its uuid\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connectors_resource",
        "parameters": [],
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "$ref": "#/paths/~1conf~1connectors"
    },
    "/conf/connectors/configured-formats": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfiguredConnectorFormatSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List Configured formats",
        "description": "One can filter formats given\n* the organization uuid of the connector (`match[organization_uuid]`)\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_formats_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          }
        ],
        "tags": [
          "Configuration",
          "Formats"
        ]
      }
    },
    "/conf/connectors/datasources": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ATTACKDatasourcesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List supported datasources",
        "description": "Datasource identify a source of data. It's defined by the MITRE ATT&CK framework.\nThis paginated endpoint list all datasources. A set of filters can be\nspecified to focus on certain datasources.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_data_source_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match datasources by their name",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match datasources by their uuid",
            "required": false
          }
        ],
        "tags": [
          "Configuration",
          "Connectors",
          "Datasources"
        ]
      }
    },
    "/conf/connectors/optimization_rules": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_optimization_rules_schema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List Optimization rules",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_optimization_rules_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_uuid]",
            "type": "string",
            "description": "Match rules by their connector uuid",
            "required": false
          }
        ],
        "tags": [
          "Configuration",
          "Connectors"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_optimization_rule_public_schema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new optimization rule",
        "description": "The provided details are used to specify the rule to create\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_optimization_rules_resource",
        "parameters": [],
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/connectors/optimization_rules/actions": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_optimization_actions_schema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List Actions supported for Optimization rules",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_optimization_rule_actions_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": []
      }
    },
    "/conf/connectors/optimization_rules/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_optimization_rule_public_schema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Optimization Rule"
          }
        },
        "summary": "Get an Optimization rule",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_optimization_rule_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Optimization Rule"
          }
        },
        "summary": "Delete an optimization rule",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_optimization_rule_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/connectors/optimization_rules/{uuid}/disable": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Optimization Rule"
          }
        },
        "summary": "Disable an optimization rule",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_disable_optimization_rule_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/connectors/optimization_rules/{uuid}/enable": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Optimization Rule"
          }
        },
        "summary": "Enable an optimization rule",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage all organizations as an global administrator” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_enable_optimization_rule_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/connectors/{connector_uuid}/settings": {
      "parameters": [
        {
          "name": "connector_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_setting_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "connector_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_connector_setting_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "connector_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connector_setting_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "connector_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/connectors/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "edit an connector's name, entity uuid or format uuid",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_connector_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown connector"
          }
        },
        "summary": "Delete an connector",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_connector_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "update a connector",
        "description": "The provided details are used to specify the connector to create.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connector_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown connector"
          }
        },
        "summary": "Get an connector",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_resource",
        "tags": [
          "Configuration",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/connectors/{uuid}/settings/office365/oauth/validate_token": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorSettingOffice365ConsentRedirectUri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "OAuth endpoint for Microsoft Office 365",
        "description": "This endpoint is in charge\nof validating code and updating Office365ConnectorSetting.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_office365_connector_setting_oidc_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/compilation-reports/": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/compilation_reports_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List compilation reports",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_compilation_reports_resources",
        "tags": [
          "Detection",
          "Compilation reports"
        ],
        "parameters": []
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Delete all compilation reports",
        "description": "The following permissions are required:\n - “Delete all compilation reports” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_compilation_reports_resources",
        "tags": [
          "Detection",
          "Compilation reports"
        ],
        "parameters": []
      }
    },
    "/conf/rules-catalog/compilation-reports/cti/{rule_definition_uuid}/daily": {
      "parameters": [
        {
          "name": "rule_definition_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/daily_c_t_i_schema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get an overview of CTI compilation reports for a given time range",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_daily_cti_compilation_reports",
        "tags": [
          "Detection",
          "Compilation reports"
        ],
        "parameters": [
          {
            "name": "rule_definition_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/conf/rules-catalog/rules": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRulesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List rules",
        "description": "This endpoint can be use to retrieve all rules.\n\nThe following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rules_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "exclude[uuid]",
            "type": "string",
            "description": "Exclude rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "maxLength": 100,
            "description": "Match rules by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type]",
            "type": "string",
            "description": "Match rules by their type (allowed values are cti, correlation)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their entity (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "enabled",
            "type": "boolean",
            "description": "Match rules according their activation",
            "required": false
          },
          {
            "in": "query",
            "name": "match[effort]",
            "type": "string",
            "description": "Match rules by their effort (separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "range[severity]",
            "type": "string",
            "description": "Match rules by their severity (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_name]",
            "type": "string",
            "description": "Match rules by the name of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match rules by their creation date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Match rules by their modification date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[source]",
            "type": "string",
            "description": "Match rules by their source (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean",
            "description": "Match verified rules (or not)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[related_object_ref]",
            "type": "string",
            "description": "Match rules by the reference of related objects (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_name]",
            "type": "string",
            "description": "Match rules by the name of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[search]",
            "type": "string",
            "description": "Match rules according their name or their description (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_format_uuid]",
            "type": "string",
            "description": "Match rules by compatible connector format uuid (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "has_active_alert_filters",
            "type": "boolean",
            "description": "Match rules based on their instances' alert filters",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "enum": [
              "uuid",
              "name",
              "effort",
              "severity",
              "type",
              "created_at",
              "updated_at"
            ],
            "description": [
              "Sort returned rules (accepted values: ",
              "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRuleSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_rules_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/disabled": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Disable filtered rules",
        "description": "Disable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_disable_rules_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/enabled": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Enable filtered rules",
        "description": "Enable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_enable_rules_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/matrix": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatrixSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List rules with their related object references, datasources, and activation flags",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_related_object_refs_per_rule_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "exclude[uuid]",
            "type": "string",
            "description": "Exclude rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "maxLength": 100,
            "description": "Match rules by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type]",
            "type": "string",
            "description": "Match rules by their type (allowed values are cti, correlation)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their entity (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "enabled",
            "type": "boolean",
            "description": "Match rules according their activation",
            "required": false
          },
          {
            "in": "query",
            "name": "match[effort]",
            "type": "string",
            "description": "Match rules by their effort (separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "range[severity]",
            "type": "string",
            "description": "Match rules by their severity (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_name]",
            "type": "string",
            "description": "Match rules by the name of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match rules by their creation date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Match rules by their modification date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[source]",
            "type": "string",
            "description": "Match rules by their source (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean",
            "description": "Match verified rules (or not)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[related_object_ref]",
            "type": "string",
            "description": "Match rules by the reference of related objects (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_name]",
            "type": "string",
            "description": "Match rules by the name of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[search]",
            "type": "string",
            "description": "Match rules according their name or their description (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_format_uuid]",
            "type": "string",
            "description": "Match rules by compatible connector format uuid (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "has_active_alert_filters",
            "type": "boolean",
            "description": "Match rules based on their instances' alert filters",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "enum": [
              "uuid",
              "name",
              "effort",
              "severity",
              "type",
              "created_at",
              "updated_at"
            ],
            "description": [
              "Sort returned rules (accepted values: ",
              "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ]
      }
    },
    "/conf/rules-catalog/rules/matrix/attack-navigator": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatrixAttackNavigatorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get attack navigator matrix with the MITRE technique ids",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_related_object_mitre_refs_per_rule_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "exclude[uuid]",
            "type": "string",
            "description": "Exclude rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "maxLength": 100,
            "description": "Match rules by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type]",
            "type": "string",
            "description": "Match rules by their type (allowed values are cti, correlation)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their entity (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "enabled",
            "type": "boolean",
            "description": "Match rules according their activation",
            "required": false
          },
          {
            "in": "query",
            "name": "match[effort]",
            "type": "string",
            "description": "Match rules by their effort (separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "range[severity]",
            "type": "string",
            "description": "Match rules by their severity (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_name]",
            "type": "string",
            "description": "Match rules by the name of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match rules by their creation date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Match rules by their modification date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[source]",
            "type": "string",
            "description": "Match rules by their source (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean",
            "description": "Match verified rules (or not)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[related_object_ref]",
            "type": "string",
            "description": "Match rules by the reference of related objects (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_name]",
            "type": "string",
            "description": "Match rules by the name of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[search]",
            "type": "string",
            "description": "Match rules according their name or their description (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_format_uuid]",
            "type": "string",
            "description": "Match rules by compatible connector format uuid (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "has_active_alert_filters",
            "type": "boolean",
            "description": "Match rules based on their instances' alert filters",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ]
      }
    },
    "/conf/rules-catalog/rules/setting": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSettingSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get rules settings",
        "description": "The following permissions are required:\n - “Manage rules settings” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rule_setting_resource",
        "parameters": [
          {
            "in": "query",
            "name": "organization_uuid",
            "type": "string",
            "description": "The identifier of the organization",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleSettingSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Update rules settings",
        "description": "The following permissions are required:\n - “Manage rules settings” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_rule_setting_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRuleSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          }
        },
        "summary": "Get a rule",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rule_resource",
        "tags": [
          "Detection",
          "Rules"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          }
        },
        "summary": "Delete a rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_rule_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRuleSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          }
        },
        "summary": "Update a rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_rule_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/{uuid}/alert-filters": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertFiltersSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          },
          "409": {
            "description": "No instance for this rule, it was never enabled"
          }
        },
        "summary": "List a rule's alert filters",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_filters_resource",
        "parameters": [
          {
            "in": "query",
            "name": "organization_uuid",
            "type": "string",
            "description": "The identifier of the organization",
            "required": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules",
          "Alert-filter"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertFilterSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          },
          "409": {
            "description": "No instance for this rule, it was never enabled"
          }
        },
        "summary": "Add a new alert filter to a rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_alert_filters_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules",
          "Alert-filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/{uuid}/alert-filters/{alertfilter_uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "alertfilter_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule or alert filter"
          }
        },
        "summary": "Delete a rule's alert filter",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_alert_filter_resource",
        "tags": [
          "Detection",
          "Rules",
          "Alert-filter"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertfilter_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertFilterSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule or alert filter"
          }
        },
        "summary": "Update a rule's alert filter",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_alert_filter_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertfilter_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules",
          "Alert-filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/{uuid}/compatible-formats": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleFormatsAssociationSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get a rule's compatible connector formats",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rule_connector_format_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules",
          "Formats"
        ]
      }
    },
    "/conf/rules-catalog/rules/{uuid}/disabled": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRuleSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          }
        },
        "summary": "Disable a rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_disable_rule_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/rules/{uuid}/enabled": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedRuleSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown rule"
          }
        },
        "summary": "Enable a rule",
        "description": "The following permissions are required:\n - “Manage rules and alert filters” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_enable_rule_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/conf/rules-catalog/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleTagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List tags of rules",
        "description": "This endpoint can be use to retrieve all the tags available for rules.\n\nThe following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rule_tags_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match tags by their identifiers (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match tags by their names (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": [
              "Sort returned tags (accepted values: ",
              "'uuid', 'name')."
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: 'asc', 'desc').",
            "required": false
          }
        ],
        "tags": [
          "Detection",
          "Rules"
        ]
      }
    },
    "/conf/statistics/rules-catalog/counters": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesCountersSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get rules statistics",
        "description": "The following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rules_counters_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "exclude[uuid]",
            "type": "string",
            "description": "Exclude rules by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "maxLength": 100,
            "description": "Match rules by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type]",
            "type": "string",
            "description": "Match rules by their type (allowed values are cti, correlation)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their entity (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "enabled",
            "type": "boolean",
            "description": "Match rules according their activation",
            "required": false
          },
          {
            "in": "query",
            "name": "match[effort]",
            "type": "string",
            "description": "Match rules by their effort (separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "range[severity]",
            "type": "string",
            "description": "Match rules by their severity (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_name]",
            "type": "string",
            "description": "Match rules by the name of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[tag_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their tags (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match rules by their creation date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Match rules by their modification date (bounds are separated by commas)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[source]",
            "type": "string",
            "description": "Match rules by their source (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean",
            "description": "Match verified rules (or not)",
            "required": false
          },
          {
            "in": "query",
            "name": "match[related_object_ref]",
            "type": "string",
            "description": "Match rules by the reference of related objects (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_uuid]",
            "type": "string",
            "description": "Match rules by the identifier of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_name]",
            "type": "string",
            "description": "Match rules by the name of their datasources (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[search]",
            "type": "string",
            "description": "Match rules according their name or their description (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[connector_format_uuid]",
            "type": "string",
            "description": "Match rules by compatible connector format uuid (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "has_active_alert_filters",
            "type": "boolean",
            "description": "Match rules based on their instances' alert filters",
            "required": false
          }
        ],
        "tags": [
          "Reporting",
          "Rules"
        ]
      }
    },
    "/conf/statistics/rules-catalog/indicator-counter": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndicatorCounterSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Count indicators covered by detection rules",
        "description": "List statistics about the approximate number of indicators currently in use by detection\n\nThe following permissions are required:\n - “View Rules Catalog” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_rules_indicator_counters_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          }
        ],
        "tags": [
          "Reporting",
          "Rules"
        ]
      }
    },
    "/auth/fresh-login": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_login"
                }
              }
            }
          },
          "400": {
            "description": "Input payload validation failed"
          },
          "401": {
            "description": "Invalid authentication info"
          },
          "403": {
            "description": "User subscription not confirmed"
          }
        },
        "summary": "Request a fresh “access token”",
        "description": "This endpoint can be used if you need to make a _fresh_ token for a user. A fresh token requires the user to\nsend its credentials (email address, password and MFA tokens).\n\nUnlike standard login endpoint, it only returns a new “access token”. No “refresh token” is generated.",
        "operationId": "post_user_fresh_login_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/jwks": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/j_w_k_s"
                }
              }
            }
          }
        },
        "summary": "Return all public keys used by `organizationapi` to sign JWT tokens",
        "description": "All configured keys are exported in this endpoint, at this time, we only support _one_ EdDSA key and one RSA\nkey.\n\nReturns:\n  A JWKS (JSON Web Key Set).",
        "operationId": "get_jwks_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/login": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_login"
                }
              }
            }
          },
          "400": {
            "description": "Input payload validation failed"
          },
          "401": {
            "description": "Invalid authentication info"
          },
          "403": {
            "description": "User subscription not confirmed"
          }
        },
        "summary": "Login user",
        "description": "This endpoint allows to authenticate a user given its email address (identifier) and its password.\n\nThis endpoint pushes two authentication cookies:\n\n- _Access token_, which has a short life cookie that is usable on other Analytic solution endpoints,\n- _Refresh token_, which is a long life cookie that is usable only on Analytic solution’s authentication API to request\n  a renewed access token (via the `/auth/refresh` endpoint).\n\nIf the user that wants to log-in has enabled multi-factor authentication (MFA), then, this endpoint returns a\n401 error (with the `MFA102` error code) requesting the user to complete the MFA challenge.\n\nIn order to complete the MFA challenge, the right `mfa_data` should be submitted.",
        "operationId": "post_user_login_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Token validation failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown user"
          }
        },
        "summary": "Refresh the current “access token” cookie",
        "description": "This endpoint creates a new “access token” that is pushed to the end user via a cookie.\n\nThis endpoint requires to have a valid “refresh token” (submitted JWT token must have been created by the\nauthentication API and shouldn’t be expired).",
        "operationId": "post_user_refresh_token_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/refresh/logout": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Log out an authenticated user",
        "description": "This endpoint revokes the current JWT tokens (either “refresh token” and “access token”).\n\nIf user isn’t authenticated yet, an `AU101` error is raised.",
        "operationId": "post_user_logout_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/refresh/switch-avatar": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Input payload validation failed"
          },
          "401": {
            "description": "Invalid authentication info"
          }
        },
        "summary": "Switch current user to another organization",
        "description": "This endpoint allows a user to switch to another organization he/she belongs to. To proceed, you have to provide\nthe avatar (representation of the current user in the requested organization) identifier.\n\nThis endpoint creates a brand new “access token” and “refresh token” that are pushed as cookies (more\ninformation in the `/auth/login` endpoint).",
        "operationId": "post_avatar_switch_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/auth/validate": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Check a JWT token’s validity",
        "description": "This endpoint checks if the submitted JWT access token was generated by Analytic solution’s authentication API and is\nnot expired or revoked.\n\nJWT token is retrieved either from the cookies in the request or from the `Authorization` HTTP header.\n\nIf valid, this endpoint returns the clear text representation of the token, including the `user_claims` data.",
        "operationId": "get_validate_resource",
        "tags": [
          "User Authentication"
        ],
        "parameters": []
      }
    },
    "/users": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_users_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "List users",
        "description": "This endpoint is only available to applications.",
        "operationId": "get_users_resources",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match users by their identifier (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[email]",
            "type": "string",
            "description": "Match users by their email address (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[firstname]",
            "type": "string",
            "description": "Match users by their first name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[lastname]",
            "type": "string",
            "description": "Match users by their last name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[company_name]",
            "type": "string",
            "description": "Match users by their company name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "type": "string",
            "description": "Search users on several fields such as firstname, lastname, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Filter users by their creation dates (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter users by their update dates (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "enum": [
              "uuid",
              "firstname",
              "lastname",
              "company_name",
              "created_at",
              "updated_at"
            ],
            "description": "Sort returned users",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort",
            "required": false
          }
        ],
        "tags": [
          "users"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/created_user_d_t_o"
                }
              }
            }
          }
        },
        "summary": "Creates an user account",
        "operationId": "post_users_resources",
        "parameters": [],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/forget_password": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Input payload validation failed"
          }
        },
        "summary": "Request password to be reset",
        "description": "User that has lost his password can ask to receive a link to\nreset its password even if the current password is not\nknown. When a user calls this endpoint, it receives a message\non his e-mail address with a link that will point to the\n`reset_password` endpoint.\n\nThis endpoint must be called with a valid e-mail\naddress. Account associated to that e-mail should already\nexist, be confirmed and not deleted. Last reset password\nrequest should have been called more than 5 minutes ago.\n\nIf user has already enabled the multi-factor authentication,\nthen the current token data is required to change its password\n(see the `reset_password` endpoint).",
        "operationId": "post_user_forget_password",
        "parameters": [],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/password": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Input payload validation failed"
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Change the user's password",
        "description": "This endpoint allows a user to change its current\npassword. To proceed, the current password and the new\npassword are asked.\nThe new password must respect a certain complexity in order to be accepted.",
        "operationId": "post_user_change_password",
        "parameters": [],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/reset_password": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Input payload validation failed"
          }
        },
        "summary": "Define a new password after a reset claim",
        "description": "After the user asked for a password reset using the\n`/forget_password` endpoint, it receives a link which contains\na token that can be used to call this endpoint.\n\nIn order to define a new password, user should call this\nendpoint with a valid reset token (received by e-mail) and\nits new password. If user has enabled multi-factor\nauthentication, then the current token data is required to\nchange its password.",
        "operationId": "post_user_reset_password",
        "parameters": [],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_uuid}": {
      "parameters": [
        {
          "name": "user_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Update a user given its UUID",
        "operationId": "put_user_resources",
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_with_organizations_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Get a user given its UUID",
        "operationId": "get_user_resources",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Patch a user's info given its UUID",
        "operationId": "patch_user_resources",
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_uuid}/avatars": {
      "parameters": [
        {
          "name": "user_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_user_avatars_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Get the avatars of the user",
        "operationId": "get_user_avatars_resources",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_uuid}/picture": {
      "parameters": [
        {
          "name": "user_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Update an user’s picture",
        "description": "Endpoint only accessible for avatars.",
        "operationId": "put_user_picture_resources",
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "picture": {
                    "type": "file",
                    "description": "Picture of the user"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Get the picture of the user",
        "description": "It returns the image with mime-type='image/png'\nEndpoint only accessible for avatars.",
        "operationId": "get_user_picture_resources",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Delete the user's picture",
        "description": "Endpoint only accessible for the user's avatars.",
        "operationId": "delete_user_picture_resources",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/users/{user_uuid}/sessions": {
      "parameters": [
        {
          "name": "user_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_user_sessions_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Get the current sessions of the user",
        "operationId": "get_user_sessions_resources",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "users"
        ]
      }
    },
    "/users/{user_uuid}/sessions/{user_session_uuid}": {
      "parameters": [
        {
          "name": "user_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "user_session_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_session_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "Revoke one session from the current sessions of the user",
        "operationId": "delete_user_session_resources",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "user_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_session_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/ingestion/datasources/": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_connector_format_datasources_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List supported datasources",
        "description": "Datasource identify a source of data. It's defined by the MITRE ATT&CK framework.\nThis paginated endpoint list all datasources. A set of filters can be\nspecified to focus on certain datasources.\n\nOne can filter datasources given\n* the identifier of the datasource (`match[uuid]`),\n* the name of the datasource (`match[name]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, “,”) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_formats_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match datasources by their name",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match datasources by their uuid",
            "required": false
          }
        ],
        "tags": [
          "datasources"
        ]
      }
    },
    "/ingestion/formats/": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_connector_formats_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List connector formats",
        "description": "This paginated endpoint can be used to retrieve the supported formats. A set of filters can be\nspecified to focus on certain formats.\n\nOne can filter connector formats given\n* the name of the format (`match[name]`),\n* the uuid of the format (`match[uuid]`),\n* the uuid of the module (`match[module_uuid]`),\n* uuid of the organization  (`match[organization_uuid]`),\n* uuid of the datasource (`match[datasource_uuid]`),\n* name of the datasouce  (`match[datasource_name]`).\n* uuid of the automation module (`match[automation_module_uuid]`), is an alias for the module_uuid.\n* uuid of the automation connector (`match[automation_connector_uuid]`).\n\n\nOne can list only connectors updated after a certain date\nby using the `updated_after` filter\n\nOne can also add a “search” term that will search in multiple\nplaces for that term.\n\nThe `name` filter accepts joker denoted by char '*'.\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, “,”) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_formats_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": null,
            "minimum": 1,
            "maximum": 1000,
            "description": "limit the number of items (allowed range is 1-1000).",
            "x-nullable": true,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match connector formats by their uuid (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "updated_after",
            "type": "string",
            "description": "Filter connector by their update date",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match connector formats by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[module_uuid]",
            "type": "string",
            "description": "Match connector formats given a list of module UUIDs (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_uuid]",
            "type": "string",
            "description": "Match connector formats given a list of datasources UUIDs (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[datasource_name]",
            "type": "string",
            "description": "Match connector formats given a list of datasources names (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[automation_connector_uuid]",
            "type": "string",
            "description": "Match connector formats given a list of Orchestration connector UUIDs (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[automation_module_uuid]",
            "type": "string",
            "description": "Match connector formats given a list of Orchestration module UUIDs (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "type": "string",
            "description": "Search for connector formats by string",
            "required": false
          }
        ],
        "tags": [
          "formats"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create an connector format",
        "description": "This endpoint allows to create a new connector format. This connector format will be private to the organization of the\ncreator.\n\nIf the request succeeds, the endpoint will return the previous information with the identifier of the format.\nOtherwise, an error with a code will be returned.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_formats_resource",
        "parameters": [],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/fields": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_connector_format_fields_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the available fields leveraged by the formats",
        "description": "One can filter fields given\n\n- the name of the field (`match[name]`)\n- the type of the field (`match[type]`)\n- the identifier of the module (`match[module_uuid]`)\n\nA filter parameter defines filtering on the specified field. A filter parameter can be specified any number of\ntimes, where each filter instance specifies an additional filter to be applied to the resulting data.\nSaid another way, all filter fields are ANDed together. Each field MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, “,”) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe `name` filter accepts joker denoted by char '*'.\nThe `module_uuid` filter will append custom fields, belonged to the module, to the response.\n\nIf valued to `true`, the parameter `all_fields` will append all custom fields to the response.\n\nBy default, eternal fields are returned. They can be excluded with `include_eternal` valued to `false`.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_formats_taxonomy_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 1000,
            "minimum": 1,
            "description": "limit a number of items, default is 1000.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match fields by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[type]",
            "type": "string",
            "description": "Match fields by their type (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "all_fields",
            "type": "boolean",
            "default": false,
            "description": "Whether we should return all the fields or only the built-in.",
            "required": false
          },
          {
            "in": "query",
            "name": "include_eternal",
            "type": "boolean",
            "default": true,
            "description": "Whether we should include the eternal fields in the results.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[module_uuid]",
            "type": "string",
            "description": "Match fields by their modules. Even with this filter the native fields will be included.",
            "required": false
          }
        ],
        "tags": [
          "formats"
        ]
      }
    },
    "/ingestion/formats/observables_mapping": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_connector_format_fields_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get all available fields that have an observable mapping",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_formats_observables_mapping_resource",
        "tags": [
          "formats"
        ],
        "parameters": []
      }
    },
    "/ingestion/formats/parse": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parsing_result_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Parse a message against a provided format definition",
        "description": "This endpoint allows to verify a parser, with its taxonomy, against a log.\n\nIt requires:\n- the parser to test\n- the log to parse\n\nIf custom fields are defined in the parser, the taxonomy must be supplied.\n\nAs response, the endpoint will return the parsed log as an ECS event.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_parse_resource",
        "parameters": [],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/smart-descriptions": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_smart_descriptions_per_format_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the available smart-descriptions leveraged by the formats",
        "description": "A list of format uuid must be specified (`match[format_uuid]`).\n\nAs response, the endpoint will return the list of smartdescriptions identified with the identifier of the\nformat, as a dict.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_formats_smart_descriptions_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[format_uuid]",
            "type": "string",
            "description": "Match smart-descriptions by their format uuid (separated by commas).",
            "required": false
          }
        ],
        "tags": [
          "formats"
        ]
      }
    },
    "/ingestion/formats/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_results_d_t_o"
                }
              }
            }
          }
        },
        "summary": "Validate message or event against a parser provided or an existing format",
        "operationId": "post_validate_resource",
        "parameters": [],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/{format_uuid}/": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get format definition",
        "description": "This endpoint returns the definition of the connector format.\n\nThis definition contains:\n- the identifier of the format\n- the name of the format\n- the slug of the format\n- the description of the format\n- the parser that describe the steps to extract data\n- the taxonomy of the parser\n- the datasources of the logs\n- the identifier of the module the connector format belongs to\n- the identifier of the organization the connector format belongs to\n\nIf the identifier of the organization of an connector format is null, this format is not related to a organization and\nis considered as public.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_format_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Delete format definition",
        "description": "This endpoint allows to delete an connector format\nOnly connector format related to a organization can be deleted. Public ones are immutables.\n\nBe careful when deleting an connector format, it will impact the connectors using it and invalidate new logs (no more\ndetection on them).\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_format_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Update format definition",
        "description": "This endpoint allows to update the definition of an connector format.\nOnly connector format related to a organization can be updated. Public ones are immutables.\n\nThe following parameters can be update:\n- the name\n- the slug\n- the description\n- the parser\n- the taxonomy\n- the datasources\n\nThe modification of an connector format generate a revision. This revision will store the previous state of\nthe format. The revisions will shape the history of the format and allow to compare its evolution.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_format_resource",
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/{format_uuid}/doc": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_documentation_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get documentation of a format",
        "description": "This endpoint returns the documentation of the connector format. This documentation aims to help the user to\nset up its appliances to forward logs and to understand the purpose of the format.\n\nThe documentation is only accessible if the user can access the connector format.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_format_doc_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Delete the documentation of the connector format",
        "description": "This endpoint allows to delete the documentation associated to an connector format.\nAs the documentation aims to help the user to set up its appliances to forward logs and to understand the\npurpose of the format, Be careful when deleting a documentation.\n\nOnly documentation of an connector format related to a organization can be deleted. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_format_doc_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Sets the documentation of the connector format",
        "description": "This endpoint allows to update the documentation of an connector format.\nAs the documentation aims to help the user to set up its appliances to forward logs and to understand the\npurpose of the format, be careful when updating a documentation.\n\nOnly documentation of an connector format related to a organization can be updated. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_format_doc_resource",
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/{format_uuid}/parse": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/parsing_result_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Parse a message against the format",
        "description": "This endpoint allows to verify the parsing of a log against the connector format.\n\nAs response, the endpoint will return the parsed log as an ECS event.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_format_parse_resource",
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/{format_uuid}/picture": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get format picture",
        "description": "The format picture allows to visually identify the format.\n\nThis endpoint returns the illustration associated to the format or the initial of the name of the connector\nformat if no illustration was associated.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_format_picture_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Delete format picture",
        "description": "This endpoint allows to deassociate the illustration from the connector format.\nIn this case, the picture of the connector format become the initial of the name of the connector format.\n\nOnly picture of an connector format related to a organization can be deleted. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_format_picture_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Update format picture",
        "description": "This endpoint allows to modify the illustration associated to the format.\nThis illustration will be returned when the connector format will be displayed.\n\nOnly picture of an connector format related to a organization can be updated. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_format_picture_resource",
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "picture": {
                    "type": "file",
                    "description": "Picture of the format"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/formats/{format_uuid}/revisions": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_of_connector_format_revisions_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get revisions of an connector format",
        "description": "Revisions are versions of the connector format and are created each time the connector format is updated.\nThey represent the history of the connector format.\n\nThis endpoint returns the revision of the connector format and allows to compare its evolution.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_format_revisions_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ]
      }
    },
    "/ingestion/formats/{format_uuid}/revisions/{revision_uuid}": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "revision_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Delete a format revision",
        "description": "This endpoint allows to remove a specific revision of the connector moment from the history.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_format_revision_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/ingestion/formats/{format_uuid}/smart-descriptions": {
      "parameters": [
        {
          "name": "format_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_smart_descriptions_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get smart descriptions of a format",
        "description": "This endpoint returns the smart descriptions of the connector format.\nSmart-description ease the reading of events for humans and allow to expose relevant information in the event.\n\nThe smartdescription is only accessible if the user can access the connector format.\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)\n - “View events” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_format_smart_descriptions_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Delete the smart descriptions of the connector format",
        "description": "This endpoint allows to remove smart descriptions from an connector format.\nAs smart descriptions aims to help the user to understand events, be careful when deleting them.\n\nOnly smart descriptions of an connector format related to a organization can be deleted. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_format_smart_descriptions_resource",
        "tags": [
          "formats"
        ],
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_format_smart_descriptions_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown format"
          }
        },
        "summary": "Sets the smart descriptions of the connector format",
        "description": "This endpoint allows to update the smart descriptions of an connector format.\nAs smart descriptions aims to help the user to understand events, be careful when updating them.\n\nOnly smart descriptions of an connector format related to a organization can be updated. Public ones are immutables.\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)\n - “Manage connector formats” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_format_smart_descriptions_resource",
        "parameters": [
          {
            "name": "format_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "formats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alerts",
        "description": "An alert denotes the sighting of one or more indicator given a set of events.\nThis paginated endpoint list all the alerts. A set of filters can be\nspecified to focus on certain alerts.\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alerts_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their organization uuids."
          },
          {
            "in": "query",
            "name": "match[entity_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their entity names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their entity uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[status_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their status uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[status_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their status name (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[type_category]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their type categories (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[type_value]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their type values (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[source]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their sources (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[target]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[node]",
            "required": false,
            "type": "string",
            "description": "Match alerts either by their sources or their targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[stix_object]",
            "required": false,
            "type": "string",
            "description": "Match alerts that contains requested STIX objects IDs"
          },
          {
            "in": "query",
            "name": "match[rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their rule uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[rule_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their rule names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[detection_type]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their detection type (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[short_id]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their short_id (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their uuid (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[title]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their title (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[urgency_display]",
            "required": false,
            "type": "string",
            "description": "Match alerts for specific urgency display (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[case_short_id]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their case short_id (separated by commas)."
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their creation dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their update dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "range[urgency]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their urgencies."
          },
          {
            "in": "query",
            "name": "range[similar]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their number of similar occurrences."
          },
          {
            "in": "query",
            "name": "visible",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "Filter alerts according their visibility"
          },
          {
            "in": "query",
            "name": "is_assigned_to_case",
            "required": false,
            "type": "boolean",
            "description": "Filter alerts assigned to a case"
          },
          {
            "in": "query",
            "name": "similar_to",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts similar to the provided alert short ID"
          },
          {
            "in": "query",
            "name": "nomatch[asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[entity_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific entities (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific rules (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[rule_name]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific rules (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[detection_type]",
            "required": false,
            "type": "string",
            "description": "Exclude detection type (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[source]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific sources (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[target]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[status_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts with specific statuses (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[stix_object]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific threats (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[type_value]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific type values (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[urgency_display]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific urgency display (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "stix",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If set, the STIX bundle object is also returned."
          },
          {
            "in": "query",
            "name": "cases",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If set, some information about related cases is also returned."
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "field to sort returned alerts",
            "enum": [
              "created_at",
              "source",
              "target",
              "urgency",
              "entity",
              "type",
              "status",
              "rule_name",
              "updated_at",
              "similar"
            ]
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          },
          {
            "in": "query",
            "name": "with_count",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "Whether or not the total should be returned in the response"
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      }
    },
    "/alerts/bulk/add-to-case": {
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskIdSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Add alerts to a case",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_case_bulk_ressource",
        "parameters": [],
        "tags": [
          "Detection",
          "Alerts",
          "Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "match[organization_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their organization uuids."
                  },
                  "match[entity_name]": {
                    "type": "string",
                    "description": "Match alerts by their entity names (separated by commas)."
                  },
                  "match[entity_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their entity uuids (separated by commas)."
                  },
                  "match[status_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their status uuids (separated by commas)."
                  },
                  "match[status_name]": {
                    "type": "string",
                    "description": "Match alerts by their status name (separated by commas)."
                  },
                  "match[type_category]": {
                    "type": "string",
                    "description": "Match alerts by their type categories (separated by commas)."
                  },
                  "match[type_value]": {
                    "type": "string",
                    "description": "Match alerts by their type values (separated by commas)."
                  },
                  "match[source]": {
                    "type": "string",
                    "description": "Match alerts by their sources (separated by commas)."
                  },
                  "match[target]": {
                    "type": "string",
                    "description": "Match alerts by their targets (separated by commas)."
                  },
                  "match[node]": {
                    "type": "string",
                    "description": "Match alerts either by their sources or their targets (separated by commas)."
                  },
                  "match[stix_object]": {
                    "type": "string",
                    "description": "Match alerts that contains requested STIX objects IDs"
                  },
                  "match[rule_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their rule uuids (separated by commas)."
                  },
                  "match[rule_name]": {
                    "type": "string",
                    "description": "Match alerts by their rule names (separated by commas)."
                  },
                  "match[detection_type]": {
                    "type": "string",
                    "description": "Match alerts by their detection type (separated by commas)."
                  },
                  "match[short_id]": {
                    "type": "string",
                    "description": "Match alerts by their short_id (separated by commas)."
                  },
                  "match[uuid]": {
                    "type": "string",
                    "description": "Match alerts by their uuid (separated by commas)."
                  },
                  "match[title]": {
                    "type": "string",
                    "description": "Match alerts by their title (separated by commas)."
                  },
                  "match[asset_uuid]": {
                    "type": "string",
                    "description": "Match alerts for specific assets (separated by commas)."
                  },
                  "match[urgency_display]": {
                    "type": "string",
                    "description": "Match alerts for specific urgency display (separated by commas)."
                  },
                  "match[case_short_id]": {
                    "type": "string",
                    "description": "Match alerts by their case short_id (separated by commas)."
                  },
                  "date[created_at]": {
                    "type": "string",
                    "description": "Filter alerts by their creation dates (see rfc3339)."
                  },
                  "date[updated_at]": {
                    "type": "string",
                    "description": "Filter alerts by their update dates (see rfc3339)."
                  },
                  "range[urgency]": {
                    "type": "string",
                    "description": "Filter alerts by their urgencies."
                  },
                  "range[similar]": {
                    "type": "string",
                    "description": "Filter alerts by their number of similar occurrences."
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Filter alerts according their visibility"
                  },
                  "is_assigned_to_case": {
                    "type": "boolean",
                    "description": "Filter alerts assigned to a case"
                  },
                  "similar_to": {
                    "type": "string",
                    "description": "Filter alerts similar to the provided alert short ID"
                  },
                  "nomatch[asset_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific assets (separated by commas)."
                  },
                  "nomatch[entity_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific entities (separated by commas)."
                  },
                  "nomatch[rule_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific rules (separated by commas)."
                  },
                  "nomatch[rule_name]": {
                    "type": "string",
                    "description": "Exclude alerts for specific rules (separated by commas)."
                  },
                  "nomatch[detection_type]": {
                    "type": "string",
                    "description": "Exclude detection type (separated by commas)."
                  },
                  "nomatch[source]": {
                    "type": "string",
                    "description": "Exclude alerts for specific sources (separated by commas)."
                  },
                  "nomatch[target]": {
                    "type": "string",
                    "description": "Exclude alerts for specific targets (separated by commas)."
                  },
                  "nomatch[status_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts with specific statuses (separated by commas)."
                  },
                  "nomatch[stix_object]": {
                    "type": "string",
                    "description": "Exclude alerts for specific threats (separated by commas)."
                  },
                  "nomatch[type_value]": {
                    "type": "string",
                    "description": "Exclude alerts for specific type values (separated by commas)."
                  },
                  "nomatch[urgency_display]": {
                    "type": "string",
                    "description": "Exclude alerts for specific urgency display (separated by commas)."
                  },
                  "case_uuid": {
                    "type": "string",
                    "description": "uuid of the case to which the alerts are added"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/bulk/workflow": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Triggers a status update on a list of alerts",
        "description": "This endpoint performs an action on selected alerts and changes theirs statuses according to the performed\naction and the workflow.\n\nThe list of selected alerts, on which the action will be performed,\nis specified with the filter (url parameter)\n`match[uuid]`, that accept a list of identifiers (or short_id) of alerts separated by commas, while the\nidentifier of the action is set in the body of the request as a json dictionary.\n\nThe identifier of the action is brought from the workflow (GET request on this endpoint).\n\nThe following permissions are required:\n - “Update alert status” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_workflow_bulk_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "match[uuid]": {
                    "type": "string",
                    "description": "Match alerts by their identifier (uuid or short_id; separated by commas)."
                  },
                  "action_uuid": {
                    "type": "string",
                    "description": "UUID of the action to trigger, or the status to set"
                  },
                  "comment": {
                    "type": "string",
                    "description": "a comment to describe why the alert status has changed"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusWorkflowSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List the actions available to update alert statuses",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_workflow_bulk_resource",
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ],
        "parameters": []
      }
    },
    "/alerts/bulk/workflow/async": {
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskIdSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Trigger an action on the alert workflow asynchronously on a list of alerts",
        "description": "The following permissions are required:\n - “Update alert status” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_workflow_async_bulk_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "match[organization_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their organization uuids."
                  },
                  "match[entity_name]": {
                    "type": "string",
                    "description": "Match alerts by their entity names (separated by commas)."
                  },
                  "match[entity_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their entity uuids (separated by commas)."
                  },
                  "match[status_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their status uuids (separated by commas)."
                  },
                  "match[status_name]": {
                    "type": "string",
                    "description": "Match alerts by their status name (separated by commas)."
                  },
                  "match[type_category]": {
                    "type": "string",
                    "description": "Match alerts by their type categories (separated by commas)."
                  },
                  "match[type_value]": {
                    "type": "string",
                    "description": "Match alerts by their type values (separated by commas)."
                  },
                  "match[source]": {
                    "type": "string",
                    "description": "Match alerts by their sources (separated by commas)."
                  },
                  "match[target]": {
                    "type": "string",
                    "description": "Match alerts by their targets (separated by commas)."
                  },
                  "match[node]": {
                    "type": "string",
                    "description": "Match alerts either by their sources or their targets (separated by commas)."
                  },
                  "match[stix_object]": {
                    "type": "string",
                    "description": "Match alerts that contains requested STIX objects IDs"
                  },
                  "match[rule_uuid]": {
                    "type": "string",
                    "description": "Match alerts by their rule uuids (separated by commas)."
                  },
                  "match[rule_name]": {
                    "type": "string",
                    "description": "Match alerts by their rule names (separated by commas)."
                  },
                  "match[detection_type]": {
                    "type": "string",
                    "description": "Match alerts by their detection type (separated by commas)."
                  },
                  "match[short_id]": {
                    "type": "string",
                    "description": "Match alerts by their short_id (separated by commas)."
                  },
                  "match[uuid]": {
                    "type": "string",
                    "description": "Match alerts by their uuid (separated by commas)."
                  },
                  "match[title]": {
                    "type": "string",
                    "description": "Match alerts by their title (separated by commas)."
                  },
                  "match[asset_uuid]": {
                    "type": "string",
                    "description": "Match alerts for specific assets (separated by commas)."
                  },
                  "match[urgency_display]": {
                    "type": "string",
                    "description": "Match alerts for specific urgency display (separated by commas)."
                  },
                  "match[case_short_id]": {
                    "type": "string",
                    "description": "Match alerts by their case short_id (separated by commas)."
                  },
                  "date[created_at]": {
                    "type": "string",
                    "description": "Filter alerts by their creation dates (see rfc3339)."
                  },
                  "date[updated_at]": {
                    "type": "string",
                    "description": "Filter alerts by their update dates (see rfc3339)."
                  },
                  "range[urgency]": {
                    "type": "string",
                    "description": "Filter alerts by their urgencies."
                  },
                  "range[similar]": {
                    "type": "string",
                    "description": "Filter alerts by their number of similar occurrences."
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Filter alerts according their visibility"
                  },
                  "is_assigned_to_case": {
                    "type": "boolean",
                    "description": "Filter alerts assigned to a case"
                  },
                  "similar_to": {
                    "type": "string",
                    "description": "Filter alerts similar to the provided alert short ID"
                  },
                  "nomatch[asset_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific assets (separated by commas)."
                  },
                  "nomatch[entity_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific entities (separated by commas)."
                  },
                  "nomatch[rule_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts for specific rules (separated by commas)."
                  },
                  "nomatch[rule_name]": {
                    "type": "string",
                    "description": "Exclude alerts for specific rules (separated by commas)."
                  },
                  "nomatch[detection_type]": {
                    "type": "string",
                    "description": "Exclude detection type (separated by commas)."
                  },
                  "nomatch[source]": {
                    "type": "string",
                    "description": "Exclude alerts for specific sources (separated by commas)."
                  },
                  "nomatch[target]": {
                    "type": "string",
                    "description": "Exclude alerts for specific targets (separated by commas)."
                  },
                  "nomatch[status_uuid]": {
                    "type": "string",
                    "description": "Exclude alerts with specific statuses (separated by commas)."
                  },
                  "nomatch[stix_object]": {
                    "type": "string",
                    "description": "Exclude alerts for specific threats (separated by commas)."
                  },
                  "nomatch[type_value]": {
                    "type": "string",
                    "description": "Exclude alerts for specific type values (separated by commas)."
                  },
                  "nomatch[urgency_display]": {
                    "type": "string",
                    "description": "Exclude alerts for specific urgency display (separated by commas)."
                  },
                  "action_uuid": {
                    "type": "string",
                    "description": "UUID of the action to trigger, or the status to set"
                  },
                  "comment": {
                    "type": "string",
                    "description": "a comment to describe why the alert status has changed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCountermeasureSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Update a countermeasure",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_countermeasure_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/activate": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCountermeasureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Activate a countermeasure",
        "description": "An optional comment can be provided to\nbe attached to the countermeasure.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_activate_countermeasure_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Countermeasures",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/comments": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown counter measure"
          }
        },
        "summary": "List the comments of a countermeasure",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_countermeasure_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Comments",
          "Countermeasures"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown counter measure"
          }
        },
        "summary": "Create a comment on a countermeasure",
        "description": "The following permissions are required:\n - “Comment alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_countermeasure_comments_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Comments",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Content of the comment"
                  },
                  "author": {
                    "type": "string",
                    "description": "Author of the comment",
                    "maxLength": 32
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/deny": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCountermeasureSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Deny a countermeasure",
        "description": "An optional comment can be provided to\nbe attached to the countermeasure.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_deny_countermeasure_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/{action_step_name_or_uuid}/": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "action_step_name_or_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureActionStepSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Create or update an action step in the countermeasure",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_countermeasure_action_step_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureActionStepSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get an action step in the countermeasure",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_countermeasure_action_step_resource",
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Remove an action step from the countermeasure",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_countermeasure_action_step_resource",
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureActionStepSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Create or update an action step in the countermeasure",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_countermeasure_action_step_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/{action_step_name_or_uuid}/activate": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "action_step_name_or_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureActionStepSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Activate an action step of a countermeasure",
        "description": "An optional comment can be provided to\nbe attached to the action step.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_activate_action_step_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/{action_step_name_or_uuid}/comments": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "action_step_name_or_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown counter measure or action step"
          }
        },
        "summary": "List the comments of an action step",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_actionstep_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures",
          "Comments"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown counter measure"
          }
        },
        "summary": "Post a comment on an action step",
        "description": "The following permissions are required:\n - “Comment alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_actionstep_comments_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Content of the comment"
                  },
                  "author": {
                    "type": "string",
                    "description": "Author of the comment",
                    "maxLength": 32
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/countermeasures/{countermeasure_uuid}/{action_step_name_or_uuid}/deny": {
      "parameters": [
        {
          "name": "countermeasure_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "action_step_name_or_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountermeasureActionStepSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Deny an action step of a countermeasure",
        "description": "An optional comment can be provided to\nbe attached to the action step.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_deny_action_step_resource",
        "parameters": [
          {
            "name": "countermeasure_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "action_step_name_or_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/alerts/entities": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertEntitiesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alert entities",
        "description": "This paginated endpoint lists all the entities found in the produced alerts (last 90 days).\nAn entity is denoted by its name and its uuid.\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_entities_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "UUID of the organization"
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match entites by their names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "required": false,
            "type": "string",
            "description": "Match entites by theirs uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "field to sort by",
            "enum": [
              "name",
              "uuid"
            ]
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      }
    },
    "/alerts/rules": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRulesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alert rules",
        "description": "This paginated endpoint lists all the different rule found in the produced alerts.\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_rules_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "UUID of the organization"
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match rules by their names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "required": false,
            "type": "string",
            "description": "Match rules by theirs uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[entity_name]",
            "required": false,
            "type": "string",
            "description": "Match rules by their entity names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "required": false,
            "type": "string",
            "description": "Match rules by their entity uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": "Sort attribute (accepted values: 'name')."
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Rules"
        ]
      }
    },
    "/alerts/sources": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertSourcesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alert sources (last 90 days)",
        "description": "This paginated endpoint lists all the different sources found in the produced alerts.\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_sources_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "UUID of the organization"
          },
          {
            "in": "query",
            "name": "match[value]",
            "required": false,
            "type": "string",
            "description": "Match rules by their names (separated by commas)."
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Sources and Targets"
        ]
      }
    },
    "/alerts/statistics": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get Alert Statistics",
        "description": "Get Alert Total Count, Count by Status, and Today's Count\n\nThe following permissions are required:\n - “View alert statistics” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alerts_statistics_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their organization uuids."
          },
          {
            "in": "query",
            "name": "match[entity_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their entity names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[entity_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their entity uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[status_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their status uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[status_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their status name (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[type_category]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their type categories (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[type_value]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their type values (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[source]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their sources (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[target]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[node]",
            "required": false,
            "type": "string",
            "description": "Match alerts either by their sources or their targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[stix_object]",
            "required": false,
            "type": "string",
            "description": "Match alerts that contains requested STIX objects IDs"
          },
          {
            "in": "query",
            "name": "match[rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their rule uuids (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[rule_name]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their rule names (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[detection_type]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their detection type (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[short_id]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their short_id (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their uuid (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[title]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their title (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[urgency_display]",
            "required": false,
            "type": "string",
            "description": "Match alerts for specific urgency display (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[case_short_id]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their case short_id (separated by commas)."
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their creation dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their update dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "range[urgency]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their urgencies."
          },
          {
            "in": "query",
            "name": "range[similar]",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts by their number of similar occurrences."
          },
          {
            "in": "query",
            "name": "visible",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "Filter alerts according their visibility"
          },
          {
            "in": "query",
            "name": "is_assigned_to_case",
            "required": false,
            "type": "boolean",
            "description": "Filter alerts assigned to a case"
          },
          {
            "in": "query",
            "name": "similar_to",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Filter alerts similar to the provided alert short ID"
          },
          {
            "in": "query",
            "name": "nomatch[asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[entity_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific entities (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific rules (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[rule_name]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific rules (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[detection_type]",
            "required": false,
            "type": "string",
            "description": "Exclude detection type (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[source]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific sources (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[target]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific targets (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[status_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts with specific statuses (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[stix_object]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific threats (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[type_value]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific type values (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[urgency_display]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific urgency display (separated by commas)."
          }
        ],
        "tags": [
          "Reporting",
          "Statistics",
          "Alerts"
        ]
      }
    },
    "/alerts/statuses": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alert statuses",
        "description": "This paginated endpoint iterates on all the available statuses of an alert.\nA status has a unique `uuid`, a `name` and a `description`.\n\nBelow is an example of an alert status:\n\n    {\n      'uuid': '00000000-1111-2222-3333-444444444444',\n      'name': 'Pending',\n      'description': 'The alert is waiting for an action'\n    }\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_statuses_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ]
      }
    },
    "/alerts/targets": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTargetsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List alert targets (last 90 days)",
        "description": "This paginated endpoint lists all the different targets found in the produced alerts.\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_targets_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "UUID of the organization"
          },
          {
            "in": "query",
            "name": "match[value]",
            "required": false,
            "type": "string",
            "description": "Match rules by their names (separated by commas)."
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Sources and Targets"
        ]
      }
    },
    "/alerts/threats/global-top/{threat_type}": {
      "parameters": [
        {
          "name": "threat_type",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Return the top alerts for the given type",
        "description": "The top is global and not specific to a organization\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)\n - “View global platform telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_top_threat_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 5,
            "minimum": 1,
            "maximum": 10,
            "description": "Limit the number of results"
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": true,
            "type": "string",
            "description": "Filter on creation date"
          },
          {
            "name": "threat_type",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Threats"
        ]
      }
    },
    "/alerts/threats/impact": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)\n - “View global platform telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_threat_impact_resource",
        "parameters": [],
        "tags": [
          "Detection",
          "Alerts",
          "Threats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "match[organization_uuid]": {
                    "type": "string",
                    "description": "Organizations to match (separated by commas)."
                  },
                  "threat_ids": {
                    "type": "array",
                    "description": "List of threat IDs"
                  },
                  "date[created_at]": {
                    "type": "string",
                    "description": "Filter on creation date"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTypesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List observed alert types (last 90 days)",
        "description": "This paginated endpoint iterates on observed alert types and their categories.\nAn alert type has a value and a category. It should be noted, that different alert types\ncan share the same category while it exists only one alert type with the same value and category.\n\nBelow is an example of an alert type:\n\n    { 'category': 'abusive-usage', 'value': 'bandwidth-upload' }\n\nThe following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_types_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "description": "limit the number of items (allowed range is 1-100), default is 100."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[category]",
            "required": false,
            "type": "string",
            "description": "Category of alert types to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Category of organization to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[value]",
            "required": false,
            "type": "string",
            "description": "Value of alert types to match (separated by commas)."
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Type"
        ]
      }
    },
    "/alerts/{alert_uuid}/comments/{comment_uuid}": {
      "parameters": [
        {
          "name": "alert_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Update a comment on an alert",
        "description": "The following permissions are required:\n - “Comment alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_comment_resource",
        "parameters": [
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Content of the comment"
                  },
                  "author": {
                    "type": "string",
                    "description": "Author of the comment",
                    "maxLength": 32
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Get a comment on an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_comment_resource",
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ],
        "parameters": [
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Delete a comment on an alert",
        "description": "The following permissions are required:\n - “Comment alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_alert_comment_resource",
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ],
        "parameters": [
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/alerts/{alert_uuid}/history/{history_uuid}": {
      "parameters": [
        {
          "name": "alert_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "history_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertHistoryEntrySchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Get an history entry of an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_history_resource",
        "tags": [
          "Detection",
          "Alerts"
        ],
        "parameters": [
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "history_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/alerts/{alert_uuid}/history/{history_uuid}/comments": {
      "parameters": [
        {
          "name": "alert_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "history_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "List the history of comments of an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_history_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "history_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ]
      }
    },
    "/alerts/{alert_uuid}/objects/{object_id}": {
      "parameters": [
        {
          "name": "alert_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert or object"
          }
        },
        "summary": "Get an alert object by its UUID",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_object_resource",
        "tags": [
          "Detection",
          "Alerts",
          "Objects"
        ],
        "parameters": [
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/alerts/{alert_uuid}/timeline": {
      "parameters": [
        {
          "name": "alert_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Get the timeline of an alert by its UUID",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_timeline_resource",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string",
            "default": "24h",
            "description": "Type of timeline (supported values: '24h', '14d')"
          },
          {
            "in": "query",
            "name": "frame-length",
            "required": false,
            "type": "integer",
            "description": "Size in observed-data of the requested frame"
          },
          {
            "name": "alert_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      }
    },
    "/alerts/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertDetailSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Patch an alert",
        "description": "Allows to change the type and category of the alert as well as its details and urgency.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alert_type_category": {
                    "type": "string",
                    "description": "Category of the alert type",
                    "minLength": 3,
                    "maxLength": 1000
                  },
                  "alert_type_value": {
                    "type": "string",
                    "description": "Name of the alert type, required if `alert_type_category` is present",
                    "minLength": 3,
                    "maxLength": 1000
                  },
                  "details": {
                    "type": "string",
                    "description": "Description of the alert"
                  },
                  "urgency": {
                    "type": "integer",
                    "description": "The urgency of the alert"
                  },
                  "kill_chain_short_id": {
                    "type": "string",
                    "description": "The ID of the kill chain step this alert denotes"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the alert",
                    "maxLength": 10000
                  },
                  "status_uuid": {
                    "type": "string",
                    "description": "UUID of the new alert status",
                    "enum": [
                      "00000000-1111-2222-3333-444444444444",
                      "00000000-1111-2222-3333-444444444444",
                      "00000000-1111-2222-3333-444444444444",
                      "00000000-1111-2222-3333-444444444444",
                      "00000000-1111-2222-3333-444444444444"
                    ]
                  },
                  "comment": {
                    "type": "string",
                    "description": "A comment to describe why the alert was updated"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertDetailSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Get an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_resource",
        "parameters": [
          {
            "in": "query",
            "name": "stix",
            "required": false,
            "type": "boolean",
            "description": "If set, the STIX bundle object is also returned."
          },
          {
            "in": "query",
            "name": "comments",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "If set, comments are also returned with the alert."
          },
          {
            "in": "query",
            "name": "history",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "If set, history are also returned with the alert."
          },
          {
            "in": "query",
            "name": "countermeasures",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "If set, countermeasures are also returned with the alert."
          },
          {
            "in": "query",
            "name": "cases",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If set, some information about related cases is also returned."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted Alert"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Alert"
          }
        },
        "summary": "Delete an alert",
        "description": "Will delete everything related to this alert except eternal events.\n\nThe following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_alert_resource",
        "tags": [
          "Detection",
          "Alerts"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/alerts/{uuid}/comments": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "List the comments of an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Post a comment on an alert",
        "description": "The following permissions are required:\n - “Comment alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_alert_comments_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Content of the comment"
                  },
                  "author": {
                    "type": "string",
                    "description": "Author of the comment",
                    "maxLength": 32
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{uuid}/countermeasures": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCountermeasuresSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "List the countermeasures of the alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_countermeasures_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[status]",
            "required": false,
            "type": "string",
            "description": "Match countermeasures according their status (separated by commas)."
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": [
              "Sort returned tags (accepted values: 'uuid', 'name', 'relevance', 'dynamic_relevance', 'created_at')."
            ]
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Countermeasures"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCountermeasureSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Create a new countermeasure for the alert",
        "description": "The following permissions are required:\n - “Manage alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_alert_countermeasures_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the countermeasure"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the countermeasure"
                  },
                  "start_on": {
                    "type": "string",
                    "description": "The name of the actionstep to execute first"
                  },
                  "relevance": {
                    "type": "integer"
                  },
                  "duration": {
                    "type": "string"
                  },
                  "actionsteps": {
                    "type": "array"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the countermeasure (e.g. `openc2`, `text`, `intelligence_center`).",
                    "enum": [
                      "openc2",
                      "intelligence_center",
                      "text"
                    ]
                  },
                  "assignee": {
                    "type": "string",
                    "description": "The identifier of the profile to assign to the countermeasure"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{uuid}/history": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertHistorySchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "Get the history of an alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_history_list_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "UUID of the organization."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts"
        ]
      }
    },
    "/alerts/{uuid}/objects": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "List the objects of the alert",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_objects_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 1000,
            "description": "limit a number of items (allowed range is 1-1000), default is 100."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match objects by their types (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[kind]",
            "required": false,
            "type": "string",
            "description": "Match objects by their kinds (separated by commas)."
          },
          {
            "in": "query",
            "name": "exclude[type]",
            "required": false,
            "type": "string",
            "description": "Exclude objects by their type."
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter objects by their creation dates (see rfc3339)."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Objects"
        ]
      }
    },
    "/alerts/{uuid}/workflow": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusWorkflowSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          },
          "409": {
            "description": "Invalid action given current status"
          }
        },
        "summary": "Trigger an action on the alert workflow",
        "description": "This endpoint performs an action on the alert and changes the status of the alert according to the performed\naction and the workflow.\n\nThe identifier of the action, sent in the body of the request as a json dictionary, is brought from the\nworkflow (GET request on this endpoint)\n\nThe following permissions are required:\n - “Update alert status” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_alert_workflow_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action_uuid": {
                    "type": "string",
                    "description": "UUID of the action to trigger, or the status to set"
                  },
                  "comment": {
                    "type": "string",
                    "description": "a comment to describe why the alert status has changed"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertStatusWorkflowSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown alert"
          }
        },
        "summary": "List the actions available to update an alert status",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_alert_workflow_resource",
        "tags": [
          "Detection",
          "Alerts",
          "Alert Status"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          }
        },
        "summary": "List cases",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_cases_resource",
        "parameters": [
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their creation date (see rfc3339)."
          },
          {
            "in": "query",
            "name": "date[last_seen_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their last seen date."
          },
          {
            "in": "query",
            "name": "match[tags]",
            "required": false,
            "type": "string",
            "description": "Match cases by their tags"
          },
          {
            "in": "query",
            "name": "match[assignees]",
            "required": false,
            "type": "string",
            "description": "Match cases by their assigned subscribers"
          },
          {
            "in": "query",
            "name": "match[created_by]",
            "required": false,
            "type": "string",
            "description": "Match cases by their creators"
          },
          {
            "in": "query",
            "name": "match[title]",
            "required": false,
            "type": "string",
            "description": "Match cases by their name"
          },
          {
            "in": "query",
            "name": "match[alert_uuid]",
            "required": false,
            "type": "string",
            "description": "Match cases by their associated alerts"
          },
          {
            "in": "query",
            "name": "match[priority]",
            "required": false,
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "description": "Match cases by their priority (low|medium|high)"
          },
          {
            "in": "query",
            "name": "match[custom_priority]",
            "required": false,
            "type": "string",
            "description": "Match cases by custom priority uuid"
          },
          {
            "in": "query",
            "name": "match[custom_status]",
            "required": false,
            "type": "string",
            "description": "Match cases by custom status uuid"
          },
          {
            "in": "query",
            "name": "match[verdict]",
            "required": false,
            "type": "string",
            "description": "Match cases by verdict uuid"
          },
          {
            "in": "query",
            "name": "match[short_id]",
            "required": false,
            "type": "string",
            "description": "Match cases by their short ID"
          },
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Match cases by their organization uuids."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "Match cases by their organization uuids."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "enum": [
              "automatic",
              "manual"
            ],
            "description": "Match cases by their creation mode (automatic|manual)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[status_uuid]",
            "required": false,
            "type": "string",
            "description": "Match cases by their status uuids"
          },
          {
            "in": "query",
            "name": "match[status_name]",
            "required": false,
            "type": "string",
            "description": "Match cases by their status name"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": "Sort returned cases (accepted values: 'created_at', 'title')."
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          },
          {
            "in": "query",
            "name": "with_custom_statuses",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          }
        },
        "summary": "Create a new case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_cases_resource",
        "parameters": [],
        "tags": [
          "Investigation",
          "Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the case"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the case"
                  },
                  "status_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Status of the case"
                  },
                  "organization_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Identifier of the organization"
                  },
                  "priority": {
                    "description": "Priority of the case",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "description": "List of tags to associate to the case"
                  },
                  "subscribers": {
                    "type": "array",
                    "description": "List of subscribers to the case"
                  },
                  "verdict_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Verdict of the case"
                  },
                  "custom_status_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Custom status of the case"
                  },
                  "custom_priority_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Custom priority of the case"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/statistics": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesStatisticsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          }
        },
        "summary": "Get cases' statistics",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_statistics_resource",
        "parameters": [
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their creation date (see rfc3339)."
          },
          {
            "in": "query",
            "name": "date[last_seen_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their last seen date."
          },
          {
            "in": "query",
            "name": "match[tags]",
            "required": false,
            "type": "string",
            "description": "Match cases by their tags"
          },
          {
            "in": "query",
            "name": "match[assignees]",
            "required": false,
            "type": "string",
            "description": "Match cases by their assigned subscribers"
          },
          {
            "in": "query",
            "name": "match[created_by]",
            "required": false,
            "type": "string",
            "description": "Match cases by their creators"
          },
          {
            "in": "query",
            "name": "match[title]",
            "required": false,
            "type": "string",
            "description": "Match cases by their name"
          },
          {
            "in": "query",
            "name": "match[alert_uuid]",
            "required": false,
            "type": "string",
            "description": "Match cases by their associated alerts"
          },
          {
            "in": "query",
            "name": "match[priority]",
            "required": false,
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "description": "Match cases by their priority (low|medium|high)"
          },
          {
            "in": "query",
            "name": "match[custom_priority]",
            "required": false,
            "type": "string",
            "description": "Match cases by custom priority uuid"
          },
          {
            "in": "query",
            "name": "match[custom_status]",
            "required": false,
            "type": "string",
            "description": "Match cases by custom status uuid"
          },
          {
            "in": "query",
            "name": "match[verdict]",
            "required": false,
            "type": "string",
            "description": "Match cases by verdict uuid"
          },
          {
            "in": "query",
            "name": "match[short_id]",
            "required": false,
            "type": "string",
            "description": "Match cases by their short ID"
          },
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Match cases by their organization uuids."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "description": "Match cases by their organization uuids."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "enum": [
              "automatic",
              "manual"
            ],
            "description": "Match cases by their creation mode (automatic|manual)"
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ]
      }
    },
    "/cases/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseTagsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          }
        },
        "summary": "List all tags",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_tags_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "Identifier of the organization"
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ]
      }
    },
    "/cases/{case_uuid}": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "Update a case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_case_resource",
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the case"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the case"
                  },
                  "status_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Identifier of the status of the case"
                  },
                  "status_name": {
                    "type": "string",
                    "description": "Name of the status of the case"
                  },
                  "priority": {
                    "description": "Priority of the case",
                    "enum": [
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "description": "List of tags to associate to the case"
                  },
                  "subscribers": {
                    "type": "array",
                    "description": "List of subscribers to the case"
                  },
                  "verdict_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Verdict of the case"
                  },
                  "custom_status_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Custom status of the case"
                  },
                  "custom_priority_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Priority of the case"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "Get a case by its UUID",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_resource",
        "parameters": [
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "Identifier of the organization"
          },
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Deleted Case"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Case"
          }
        },
        "summary": "Delete a case",
        "description": "Will delete everything related to this case.\n\nThe following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_case_resource",
        "tags": [
          "Investigation",
          "Cases"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/alerts": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedAlertsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case or alert"
          }
        },
        "summary": "Associate new alerts on a case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_case_alerts_resource",
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Alerts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alerts": {
                    "type": "array",
                    "description": "The list of identifiers of alerts to add"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsCaseSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          }
        },
        "summary": "List alerts associated to the targeted case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_alerts_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[alert_stix_object]",
            "required": false,
            "type": "string",
            "description": "Match alerts that contain requested STIX objects IDs"
          },
          {
            "in": "query",
            "name": "match[alert_rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts by their rules' UUIDs (separated by commas)."
          },
          {
            "in": "query",
            "name": "match[alert_asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Match alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "date[first_seen_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their first seen date."
          },
          {
            "in": "query",
            "name": "nomatch[alert_asset_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific assets (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[alert_rule_uuid]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific rules (separated by commas)."
          },
          {
            "in": "query",
            "name": "nomatch[alert_stix_object]",
            "required": false,
            "type": "string",
            "description": "Exclude alerts for specific threats (separated by commas)."
          },
          {
            "in": "query",
            "name": "similarity_strategy",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If set, similarity strategy is also returned with the alerts."
          },
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Alerts"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedAlertsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case or alert"
          }
        },
        "summary": "Replace the associated alerts to a case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_case_alerts_resource",
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Alerts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alerts": {
                    "type": "array",
                    "description": "The list of identifiers of alerts to add"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{case_uuid}/assets": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseAssetsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List assets uuids associated with a given case's alerts",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_assets_resource",
        "tags": [
          "Investigation",
          "Cases",
          "Assets"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/comments": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List all comments of a case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their creation date (see rfc3339)."
          },
          {
            "in": "query",
            "name": "match[created_by]",
            "required": false,
            "type": "string",
            "description": "Match cases by their creators"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": "Sort returned comments (accepted values: 'created_at', 'created_by', 'updated_at')."
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          },
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Comments"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "Create a new comment on a case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_case_comments_resource",
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "content of the comment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{case_uuid}/comments/{comment_uuid}": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "comment_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case or comment"
          }
        },
        "summary": "Update a case's comment by its UUID",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_case_comment_resource",
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "content of the comment"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCommentSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case or comment"
          }
        },
        "summary": "Get a case's comment by its UUID",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_comment_resource",
        "tags": [
          "Investigation",
          "Cases",
          "Comments"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case or comment"
          }
        },
        "summary": "Delete a comment from a case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_case_comment_resource",
        "tags": [
          "Investigation",
          "Cases",
          "Comments"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/entities": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseEntitiesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List entities associated with a given case's alerts",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_entities_resource",
        "tags": [
          "Detection",
          "Alert Entities"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/events/{event_id}": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "event_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Event removed from case"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown case"
          }
        },
        "summary": "Remove an event from a case",
        "description": "The `event_id` should be taken from the `event.id` field.\n\nThe following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_case_event_resource",
        "tags": [
          "Investigation",
          "Cases"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/history": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseHistoryListSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "Get the history of a case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_history_resource",
        "parameters": [
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter cases by their creation date (see rfc3339)."
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          },
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Assets"
        ]
      }
    },
    "/cases/{case_uuid}/kill-chains": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseKillChainSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List kill chain short id associated with a case's alerts",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_kill_chains_resource",
        "tags": [
          "Detection",
          "Cyber Kill Chain"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/rules": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseRulesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List rules associated with alerts within a case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_rules_resource",
        "tags": [
          "Detection",
          "Rules"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{case_uuid}/threats": {
      "parameters": [
        {
          "name": "case_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseThreatsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Permissions required"
          },
          "404": {
            "description": "Unknwon case"
          }
        },
        "summary": "List threats associated with alerts within a case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_threats_resource",
        "tags": [
          "Investigation",
          "Cases",
          "Threats"
        ],
        "parameters": [
          {
            "name": "case_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cases/{uuid}/countermeasures": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCountermeasuresSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown case"
          }
        },
        "summary": "List the countermeasures of the case",
        "description": "The following permissions are required:\n - “View cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_case_countermeasures_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Countermeasures"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseCountermeasureSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown case"
          }
        },
        "summary": "Create a new countermeasure for the case",
        "description": "The following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_case_countermeasures_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases",
          "Countermeasures"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the countermeasure"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the countermeasure"
                  },
                  "start_on": {
                    "type": "string",
                    "description": "The name of the actionstep to execute first"
                  },
                  "relevance": {
                    "type": "integer"
                  },
                  "duration": {
                    "type": "string"
                  },
                  "actionsteps": {
                    "type": "array"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the countermeasure (e.g. `openc2`, `text`, `intelligence_center`).",
                    "enum": [
                      "openc2",
                      "intelligence_center",
                      "text"
                    ]
                  },
                  "assignee": {
                    "type": "string",
                    "description": "The identifier of the profile to assign to the countermeasure"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{uuid}/events": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "204": {
            "description": "Events Added"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown case or events"
          }
        },
        "summary": "Add events to a case",
        "description": "Events are refered to by their `__event_id`.\n\nThe following permissions are required:\n - “Manage cases” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_case_events_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Investigation",
          "Cases"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_ids": {
                    "type": "array",
                    "description": "List of event identifiers to add to the case"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List comments",
        "description": "The following permissions are required:\n - “View alerts” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_comments_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[author]",
            "required": false,
            "type": "string",
            "description": "Match comments by their author"
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match comments by their type (accepted values: 'countermeasure_comment', 'alert_comment', 'history_comment', 'case_comment')"
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "required": false,
            "type": "string",
            "description": "Filter comments by their creation dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "required": false,
            "type": "string",
            "description": "Filter comments by their modification dates (see rfc3339)."
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Field to sort returned comments",
            "enum": [
              "created_at",
              "updated_at",
              "type",
              "author"
            ]
          },
          {
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string",
            "description": "Direction of the sort (accepted values: 'asc', 'desc')."
          }
        ],
        "tags": [
          "Investigation",
          "Comments"
        ]
      }
    },
    "/orchestration/actions": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List available actions",
        "description": "List all actions available to build automation playbooks.\n\nThe following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_actions_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Action's name.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[docker]",
            "type": "string",
            "description": "Match actions by their docker image name.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match actions by their uuid.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "module_name"
            ],
            "description": "Sort returned actions (accepted values: 'name', module_name')",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: ('asc', 'desc'))",
            "required": false
          },
          {
            "in": "query",
            "name": "extended",
            "type": "boolean",
            "default": false,
            "description": "Returns the extended version of the actions",
            "required": false
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/orchestration/actions/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Action"
          }
        },
        "summary": "Get an action",
        "description": "Retrieves an action from Analytic solution automations catalog.\n\nThe following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_action_resource",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/actions/{uuid}/run": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRunUUIDSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Action not found"
          },
          "409": {
            "description": "Invalid Action Docker image"
          }
        },
        "summary": "Run a standalone action",
        "description": "The following permissions are required:\n - “Execute a playbook action” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_action_run_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Actions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      }
    },
    "/orchestration/connector-configurations": {
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create connector configuration",
        "description": "The connector will be started automatically once created\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connector_configurations_resource",
        "parameters": [],
        "tags": [
          "Automations",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorConfigurationListSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List connector configurations",
        "description": "The following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_configurations_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Filter connector configuration by their uuid",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match node configurations by their last updater (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter node configurations by their update date (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "display_status",
            "enum": [
              "display_status",
              "updated_at",
              "created_at",
              "connector_id",
              "name"
            ],
            "description": "Sort connector configurations by one of their attributes",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort.",
            "required": false
          }
        ],
        "tags": [
          "Automations",
          "Connectors"
        ]
      }
    },
    "/orchestration/connector-configurations/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Connector configuration not found"
          }
        },
        "summary": "Delete connector configuration",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_connector_configuration_resource",
        "tags": [
          "Automations",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorConfigurationSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Connector configuration not found"
          }
        },
        "summary": "Edit connector configuration",
        "description": "The following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_connector_configuration_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Automations",
          "Connectors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get connector configuration",
        "description": "Retrieves a connector configuration given its UUID\n\nThe following permissions are required:\n - “View connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_configuration_resource",
        "tags": [
          "Automations",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/connector-configurations/{uuid}/start": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "ConnectorConfiguration not found"
          }
        },
        "summary": "Start connector",
        "description": "Start a specific connector given its connector configuration UUID\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connector_configuration_start",
        "tags": [
          "Automations",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/connector-configurations/{uuid}/stop": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "ConnectorConfiguration not found"
          }
        },
        "summary": "Stop connector",
        "description": "Stop a specific connector given its connector configuration UUID\n\nThe following permissions are required:\n - “Manage connectors” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_connector_configuration_stop",
        "tags": [
          "Automations",
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/connectors": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List connectors",
        "description": "The following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connectors_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match node or module name.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[docker]",
            "type": "string",
            "description": "Match Nodes by their docker image name.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "module_name"
            ],
            "description": "Sort returned Nodes (accepted values: 'name', module_name')",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: ('asc', 'desc'))",
            "required": false
          }
        ],
        "tags": [
          "Connectors"
        ]
      }
    },
    "/orchestration/connectors/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Connector"
          }
        },
        "summary": "Get a connector",
        "description": "The following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_connector_resource",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/module-configurations": {
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a module configuration",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_module_configurations_resource",
        "parameters": [],
        "tags": [
          "Automations",
          "Modules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleConfigurationListWithModuleSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List module configurations",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_module_configurations_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match module configurations by their last updater (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter module configurations by their update date (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "filter by module configuration names.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[module_uuid]",
            "type": "string",
            "description": "filter by module uuid.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "updated_at",
            "enum": [
              "updated_at",
              "created_at",
              "name"
            ],
            "description": "Sort module configurations by one of their attributes",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort.",
            "required": false
          },
          {
            "in": "query",
            "name": "with_module",
            "type": "boolean",
            "default": false,
            "description": "Also return the module of the configuration",
            "required": false
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "type": "string",
            "description": "UUID of the organization",
            "required": false
          }
        ],
        "tags": [
          "Automations",
          "Modules"
        ]
      }
    },
    "/orchestration/module-configurations/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Module Configuration"
          }
        },
        "summary": "Delete a module configuration",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_module_configuration_resource",
        "tags": [
          "Automations",
          "Modules"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleConfigurationSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Module configuration not found"
          }
        },
        "summary": "Update a module configuration",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_module_configuration_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Automations",
          "Modules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Module Configuration"
          }
        },
        "summary": "Get a module configuration",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_module_configuration_resource",
        "tags": [
          "Automations",
          "Modules"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/module-configurations/{uuid}/usage": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleConfigurationUsageSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Module Configuration"
          }
        },
        "summary": "Module usage statistics",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_module_configuration_usage_resource",
        "tags": [
          "Reporting",
          "Automation statistics"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/modules": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules_d_t_o"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List modules",
        "description": "List all modules available to build automation playbooks.\n\nThe following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_modules_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Module's name.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[uuid]",
            "type": "string",
            "description": "Match modules by their uuid.",
            "required": false
          },
          {
            "in": "query",
            "name": "kind",
            "default": "both",
            "description": "Filter for kind of modules",
            "type": "string",
            "enum": [
              "both",
              "custom",
              "official"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "match[category]",
            "type": "string",
            "description": "Only return modules that match a given category",
            "required": false
          },
          {
            "in": "query",
            "name": "match[content_type]",
            "type": "string",
            "description": "Only return modules that match a given content type",
            "required": false
          },
          {
            "in": "query",
            "name": "match[release_status]",
            "type": "string",
            "description": "Only return modules that match a given release status",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "default": "name",
            "description": "Order modules.",
            "type": "string",
            "enum": [
              "name",
              "module_name",
              "created_at",
              "popularity_score"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "default": "asc",
            "description": "Direction of the sort (accepted values: ('asc', 'desc'))",
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "required": false
          }
        ],
        "tags": [
          "Modules"
        ]
      }
    },
    "/orchestration/modules/categories": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/module_categories_d_t_o"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List module categories",
        "description": "The following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_module_categories_resource",
        "tags": [
          "Modules"
        ],
        "parameters": []
      }
    },
    "/orchestration/modules/{module_uuid}": {
      "parameters": [
        {
          "name": "module_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Module"
          }
        },
        "summary": "Delete a module",
        "description": "Only custom integration modules can be deleted\n\nThe following permissions are required:\n - “Create a custom integration” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_module_resource",
        "tags": [
          "Modules"
        ],
        "parameters": [
          {
            "name": "module_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Module"
          }
        },
        "summary": "Get a module",
        "description": "The following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_module_resource",
        "parameters": [
          {
            "in": "query",
            "name": "detailed",
            "type": "boolean",
            "default": false,
            "description": "Return the fully detailed module",
            "required": false
          },
          {
            "name": "module_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Modules"
        ]
      }
    },
    "/orchestration/node-runs/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRunSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Node Run"
          }
        },
        "summary": "Get a node run's details",
        "description": "The following permissions are required:\n - “View playbook runs” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_node_run_resource",
        "tags": [
          "Node Runs"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/playbook-runs": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookRunsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List playbook runs",
        "description": "The following permissions are required:\n - “View playbook runs” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_runs_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[event]",
            "type": "string",
            "description": "Match playbook runs by their event name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[status]",
            "type": "string",
            "description": "Match playbook runs by their status name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[playbook_uuid]",
            "type": "string",
            "description": "Match playbook runs by playbook (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[started_at]",
            "type": "string",
            "description": "Match playbook runs by their starting date (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "started_at",
            "enum": [
              "started_at",
              "event",
              "status"
            ],
            "description": "Sort returned playbook runs (accepted values: 'started_at, 'event', 'status'",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: ('asc', 'desc'))",
            "required": false
          }
        ],
        "tags": [
          "Automations",
          "Runs"
        ]
      }
    },
    "/orchestration/playbook-runs/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookRunSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook run not found"
          }
        },
        "summary": "Get a playbook run",
        "description": "The following permissions are required:\n - “View playbook runs” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_run_resource",
        "tags": [
          "Automations",
          "Runs"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/playbook-runs/{uuid}/details": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookRunDetailsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook run not found"
          }
        },
        "summary": "Get a playbook run's details",
        "description": "Get full details about a playbook run by its UUID.\n\nThe following permissions are required:\n - “View playbook runs” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_run_details_resource",
        "tags": [
          "Automations",
          "Runs"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/playbook-runs/{uuid}/re-run": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Re-run a playbook",
        "description": "The following permissions are required:\n - “Re-run playbook and playbook runs.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_re_run_playbook",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Automations",
          "Runs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "only_failed_actions": {
                    "type": "boolean",
                    "description": "Whether only the failed actions should be re-run instead of the whole playbook"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orchestration/playbooks": {
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookInfoSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a playbook",
        "description": "The provided playbook definition must follow the Orchestration\nPlaybook Language.\n\nThe following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_playbooks_resource",
        "parameters": [],
        "tags": [
          "Playbooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookListSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List available playbooks",
        "description": "This endpoint does not include the playbooks’ content in the\nresults.\n\nThe following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbooks_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[status]",
            "type": "string",
            "description": "Match playbooks by their status (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match playbooks by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[trigger_uuid]",
            "type": "string",
            "description": "Match playbooks by their trigger UUID.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[module_uuid]",
            "type": "string",
            "description": "Match playbooks by their module UUID.",
            "required": false
          },
          {
            "in": "query",
            "name": "meta_playbook",
            "type": "boolean",
            "default": true,
            "description": "Exclude meta-playbooks from the response and display child playbooks instead",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter playbooks by their update date (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "updated_at",
            "enum": [
              "updated_at",
              "name",
              "status"
            ],
            "description": "Sort playbooks by one of their attributes",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort.",
            "required": false
          }
        ],
        "tags": [
          "Playbooks"
        ]
      }
    },
    "/orchestration/playbooks/statistics": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookStatisticsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve playbook statistics",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_statistics_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[status]",
            "type": "string",
            "description": "Match playbooks by their status (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match playbooks by their name (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "match[trigger_uuid]",
            "type": "string",
            "description": "Match playbooks by their trigger UUID.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[module_uuid]",
            "type": "string",
            "description": "Match playbooks by their module UUID.",
            "required": false
          },
          {
            "in": "query",
            "name": "meta_playbook",
            "type": "boolean",
            "default": true,
            "description": "Exclude meta-playbooks from the response and display child playbooks instead",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter playbooks by their update date (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "updated_at",
            "enum": [
              "updated_at",
              "name",
              "status"
            ],
            "description": "Sort playbooks by one of their attributes",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort.",
            "required": false
          }
        ],
        "tags": [
          "Playbooks"
        ]
      }
    },
    "/orchestration/playbooks/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook not found"
          },
          "409": {
            "description": "Playbook is activated"
          }
        },
        "summary": "Delete a playbook",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_playbook_resource",
        "tags": [
          "Playbooks"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook not found"
          },
          "409": {
            "description": "Invalid Action Docker image"
          }
        },
        "summary": "Update a playbook",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_playbook_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Playbook"
          }
        },
        "summary": "Get a playbook",
        "description": "Get a specific playbook given its UUID.\n\nThe following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_resource",
        "parameters": [
          {
            "in": "query",
            "name": "version",
            "type": "integer",
            "description": "Specific Playbook version to retrieve",
            "required": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Playbooks"
        ]
      }
    },
    "/orchestration/playbooks/{uuid}/activate": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Playbook"
          }
        },
        "summary": "Activate a playbook",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_playbook_activate_resource",
        "tags": [
          "Playbooks"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/playbooks/{uuid}/deactivate": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Playbook"
          }
        },
        "summary": "Deactivate a playbook",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_playbook_deactivate_resource",
        "tags": [
          "Playbooks"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/playbooks/{uuid}/logs": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook Not Found"
          }
        },
        "summary": "Get a playbook's logs",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_logs_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "match[log_level]",
            "type": "string",
            "description": "Match logs by their log level",
            "required": false
          },
          {
            "in": "query",
            "name": "match[message]",
            "type": "string",
            "description": "Match logs the content of the message",
            "required": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Playbooks"
        ]
      }
    },
    "/orchestration/playbooks/{uuid}/re-run-failed": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Playbook Not Found"
          }
        },
        "summary": "Re-run failed playbook runs",
        "description": "The following permissions are required:\n - “Re-run playbook and playbook runs.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_re_run_failed_playbook_runs_resource",
        "tags": [
          "Automations",
          "Runs"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/ssh-keys": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s_s_h_public_key"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Generate a new SSH key pair",
        "description": "The following permissions are required:\n - “Create a custom integration” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_actions_resource",
        "tags": [
          "SSH Keys"
        ],
        "parameters": []
      }
    },
    "/orchestration/statistics/playbook-runs/per-playbook/counters": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaybookRunsCountersPerPlaybookSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Playbook runs statistics",
        "description": "List statistics of playbook runs per playbook uuid.\n\nThe following permissions are required:\n - “View playbook runs statistics” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_playbook_runs_counters_per_playbook_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[playbook_uuid]",
            "type": "string",
            "minLength": 1,
            "description": "Match statistics by the playbook's uuid (separated by commas).",
            "required": true
          },
          {
            "in": "query",
            "name": "date[started_at]",
            "type": "string",
            "description": "Match playbook runs by their started and finished dates (separated by commas).",
            "required": false
          }
        ],
        "tags": [
          "Reporting",
          "Automation statistics"
        ]
      }
    },
    "/orchestration/trigger-configurations": {
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a trigger configuration",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_trigger_configurations_resource",
        "parameters": [],
        "tags": [
          "Automations",
          "Triggers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerConfigurationListSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List trigger configurations",
        "description": "The following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_trigger_configurations_resource",
        "parameters": [
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "type": "string",
            "description": "Organizations to match (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "date[created_at]",
            "type": "string",
            "description": "Match node configurations by their last updater (separated by commas).",
            "required": false
          },
          {
            "in": "query",
            "name": "date[updated_at]",
            "type": "string",
            "description": "Filter node configurations by their update date (see rfc3339).",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort.",
            "required": false
          },
          {
            "in": "query",
            "name": "organization_uuid",
            "type": "string",
            "description": "UUID of the organization",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "updated_at",
            "enum": [
              "updated_at",
              "created_at",
              "trigger_id",
              "name"
            ],
            "description": "Sort trigger configurations by one of their attributes",
            "required": false
          }
        ],
        "tags": [
          "Automations",
          "Triggers"
        ]
      }
    },
    "/orchestration/trigger-configurations/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerConfigurationSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Trigger configuration not found"
          }
        },
        "summary": "Delete a trigger configuration",
        "description": "The following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_trigger_configuration_resource",
        "tags": [
          "Automations",
          "Triggers"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerConfigurationSchema"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Trigger configuration not found"
          }
        },
        "summary": "Edit trigger configuration event",
        "description": "Edit an event for a specific trigger configuration\n\nThe following permissions are required:\n - “Manage playbook” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_trigger_configuration_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Automations",
          "Triggers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {}
                }
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerConfigurationSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Playbook"
          }
        },
        "summary": "Get trigger configuration",
        "description": "Get a specific trigger configuration given its UUID\n\nThe following permissions are required:\n - “View playbooks” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_trigger_configuration_resource",
        "tags": [
          "Automations",
          "Triggers"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/orchestration/trigger-configurations/{uuid}/logs": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveLogsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve a trigger's logs",
        "description": "The following permissions are required:\n - “View playbook runs” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_trigger_logs",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "match[log_level]",
            "type": "string",
            "description": "Match logs by their log level",
            "required": false
          },
          {
            "in": "query",
            "name": "match[message]",
            "type": "string",
            "description": "Match logs the content of the message",
            "required": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Automations",
          "Triggers"
        ]
      }
    },
    "/orchestration/triggers": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List triggers",
        "description": "The following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_triggers_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20.",
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[name]",
            "type": "string",
            "description": "Match node or module name.",
            "required": false
          },
          {
            "in": "query",
            "name": "match[docker]",
            "type": "string",
            "description": "Match Nodes by their docker image name.",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "module_name"
            ],
            "description": "Sort returned Nodes (accepted values: 'name', module_name')",
            "required": false
          },
          {
            "in": "query",
            "name": "direction",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Direction of the sort (accepted values: ('asc', 'desc'))",
            "required": false
          }
        ],
        "tags": [
          "Triggers"
        ]
      }
    },
    "/orchestration/triggers/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Trigger"
          }
        },
        "summary": "Get a trigger",
        "description": "Get a specific Trigger given its UUID\n\nThe following permissions are required:\n - “View integrations” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_trigger_resource",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/asset-management/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Search assets",
        "description": "Search assets, returning a paginated, sorted, filtered list",
        "operationId": "search_assets_v2_asset_management_assets_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "exclusiveMinimum": 0,
              "description": "Limit a number of items (allowed range is 1-100), default is 20.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "A number of items to skip, default is 0.",
              "default": 0,
              "title": "Offset"
            },
            "description": "A number of items to skip, default is 0."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search assets by name",
              "title": "Search"
            },
            "description": "Search assets by name"
          },
          {
            "name": "also_search_in_detection_properties",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Search by attached detection property too",
              "default": false,
              "title": "Also Search In Detection Properties"
            },
            "description": "Search by attached detection property too"
          },
          {
            "name": "also_search_in_tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Search by asset tags too",
              "default": false,
              "title": "Also Search In Tags"
            },
            "description": "Search by asset tags too"
          },
          {
            "name": "uuids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset UUIDs",
              "title": "Uuids"
            },
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of organization UUIDs",
              "title": "organization Uuids"
            },
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset types",
              "title": "Type"
            },
            "description": "Filter by comma-separated list of asset types"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset categories",
              "title": "Category"
            },
            "description": "Filter by comma-separated list of asset categories"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset sources",
              "title": "Source"
            },
            "description": "Filter by comma-separated list of asset sources"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of tags",
              "title": "Tags"
            },
            "description": "Filter by comma-separated list of tags"
          },
          {
            "name": "reviewed",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter reviewed assets only",
              "title": "Reviewed"
            },
            "description": "Filter reviewed assets only"
          },
          {
            "name": "criticality",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter assets with higher criticality",
              "title": "Criticality"
            },
            "description": "Filter assets with higher criticality"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "name",
                    "type",
                    "created_at",
                    "criticality"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort criterion",
              "title": "Sort"
            },
            "description": "Sort criterion"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "desc",
                    "asc"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order",
              "title": "Direction"
            },
            "description": "Sort order"
          },
          {
            "name": "with_telemetry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enrich returned assets with their telemetry statistics",
              "default": false,
              "title": "With Telemetry"
            },
            "description": "Enrich returned assets with their telemetry statistics"
          },
          {
            "name": "incorporate_atoms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enrich returned assets with their detection properties",
              "default": false,
              "title": "Incorporate Atoms"
            },
            "description": "Enrich returned assets with their detection properties"
          },
          {
            "name": "include_revoked",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include revoked assets in the search results",
              "default": false,
              "title": "Include Revoked"
            },
            "description": "Include revoked assets in the search results"
          },
          {
            "name": "rule_uuid",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset discovery rules UUIDs",
              "title": "Rule Uuid"
            },
            "description": "Filter by comma-separated list of asset discovery rules UUIDs"
          },
          {
            "name": "rule_version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset discovery rules versions",
              "title": "Rule Version"
            },
            "description": "Filter by comma-separated list of asset discovery rules versions"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "const": "v1",
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Format return assets using legacy Assets API v1.0 format",
              "title": "Format"
            },
            "description": "Format return assets using legacy Assets API v1.0 format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AssetShortDTO_"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create an asset",
        "description": "Creates a new asset",
        "operationId": "create_asset_v2_asset_management_assets_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get an asset",
        "description": "Get an asset by its UUID",
        "operationId": "get_asset_v2_asset_management_assets__uuid__get",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "with_telemetry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "With Telemetry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Edit an asset",
        "description": "Edit the given asset's attributes",
        "operationId": "update_asset_v2_asset_management_assets__uuid__put",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/history": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get an asset's timeline",
        "description": "Get an asset's timeline by its UUID",
        "operationId": "get_asset_timeline_v2_asset_management_assets__uuid__history_get",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Search"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Earliest"
            }
          },
          {
            "name": "latest",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Latest"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "default": "desc",
              "title": "Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_dict_date__list_AssetHistoryDTO___"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/revoke": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Revoke an asset",
        "description": "Revokes the given asset",
        "operationId": "revoke_asset_v2_asset_management_assets__uuid__revoke_put",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset successfully revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/restore": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Restore an asset",
        "description": "Restore the given revoked asset",
        "operationId": "restore_asset_v2_asset_management_assets__uuid__restore_put",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset successfully restored",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/merge": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Merge assets",
        "description": "Merge a list of source assets into a destination asset,\n    by attaching all source detection/contextual properties to the destination asset\n    before revoking the source assets",
        "operationId": "merge_assets_v2_asset_management_assets_merge_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_merge_assets_v2_asset_management_assets_merge_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully merged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDTO"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/attach": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Attach a detection property",
        "description": "Attach a single detection property to an asset",
        "operationId": "attach_detection_property_v2_asset_management_assets__uuid__attach_post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_attach_detection_property_v2_asset_management_assets__uuid__attach_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Attach Detection Property V2 Asset Management Assets  Uuid  Attach Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/detach": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Detach a detection property",
        "description": "Detach a single detection property from an asset",
        "operationId": "detach_detection_property_v2_asset_management_assets__uuid__detach_post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_detach_detection_property_v2_asset_management_assets__uuid__detach_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Detach Detection Property V2 Asset Management Assets  Uuid  Detach Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/tags": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "List asset tags",
        "description": "List filtered tags used by assets",
        "operationId": "get_tags_v2_asset_management_tags_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "exclusiveMinimum": 0,
              "description": "Limit a number of items (allowed range is 1-100), default is 20.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "A number of items to skip, default is 0.",
              "default": 0,
              "title": "Offset"
            },
            "description": "A number of items to skip, default is 0."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tag name, accepts wildcard (*)",
              "title": "Name"
            },
            "description": "Filter by tag name, accepts wildcard (*)"
          },
          {
            "name": "asset_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of asset UUIDs",
              "title": "Asset Uuids"
            },
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of organization UUIDs",
              "title": "organization Uuids"
            },
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "desc",
                    "asc"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort direction, sort is done by tag name",
              "title": "Direction"
            },
            "description": "Sort direction, sort is done by tag name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_str_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/tag/{tag}": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add an asset tag",
        "description": "Add an arbitrary tag to an asset",
        "operationId": "add_asset_tag_v2_asset_management_assets__uuid__tag__tag__post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tag to add",
              "title": "Tag"
            },
            "description": "Tag to add"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Add Asset Tag V2 Asset Management Assets  Uuid  Tag  Tag  Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove an asset tag",
        "description": "Remove a tag from an asset",
        "operationId": "remove_asset_tag_v2_asset_management_assets__uuid__tag__tag__delete",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Tag to remove",
              "title": "Tag"
            },
            "description": "Tag to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Remove Asset Tag V2 Asset Management Assets  Uuid  Tag  Tag  Delete"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/tags/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add tags in bulk",
        "description": "Add multiple tags to multiple assets",
        "operationId": "bulk_add_asset_tags_v2_asset_management_assets_tags_bulk_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAddTagsParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tags successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Bulk Add Asset Tags V2 Asset Management Assets Tags Bulk Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/criticality/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Change assets criticality in bulk",
        "description": "Change multiple assets' criticality",
        "operationId": "bulk_change_criticality_asset_tags_v2_asset_management_assets_criticality_bulk_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCriticalityParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Criticality successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Bulk Change Criticality Asset Tags V2 Asset Management Assets Criticality Bulk Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/revoke/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Revoke assets in bulk",
        "description": "Revoke multiple assets",
        "operationId": "bulk_revoke_assets_v2_asset_management_assets_revoke_bulk_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRevokeAssetsParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully revoked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Bulk Revoke Assets V2 Asset Management Assets Revoke Bulk Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/review/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Review assets in bulk",
        "description": "Review multiple assets",
        "operationId": "bulk_review_assets_v2_asset_management_assets_review_bulk_post",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkReviewAssetsParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets successfully reviewed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Bulk Review Assets V2 Asset Management Assets Review Bulk Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/prop/{prop}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get an asset's contextual property",
        "description": "Get an asset's given contextual property",
        "operationId": "get_asset_contextual_property_v2_asset_management_assets__uuid__prop__prop__get",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contextual property name",
              "title": "Prop"
            },
            "description": "Contextual property name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Asset Contextual Property V2 Asset Management Assets  Uuid  Prop  Prop  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Set an asset's contextual property",
        "description": "Set an asset's given contextual property",
        "operationId": "set_asset_contextual_property_v2_asset_management_assets__uuid__prop__prop__post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contextual property name",
              "title": "Prop"
            },
            "description": "Contextual property name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "title": "Value"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prop successfully set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Set Asset Contextual Property V2 Asset Management Assets  Uuid  Prop  Prop  Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove an asset's contextual property",
        "description": "Remove a contextual property from an asset",
        "operationId": "remove_asset_contextual_property_v2_asset_management_assets__uuid__prop__prop__delete",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "prop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Contextual property name",
              "title": "Prop"
            },
            "description": "Contextual property name"
          }
        ],
        "responses": {
          "200": {
            "description": "Prop successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Remove Asset Contextual Property V2 Asset Management Assets  Uuid  Prop  Prop  Delete"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/recommendation": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add an asset recommendation",
        "description": "Add a recommendation to an asset",
        "operationId": "add_asset_recommendation_v2_asset_management_assets__uuid__recommendation_post",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AssetAddPropRecommendationDTO"
                  },
                  {
                    "$ref": "#/components/schemas/AssetAddAtomRecommendationDTO"
                  }
                ],
                "title": "Recommendation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recommendation successfully added or updated",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AssetAtomRecommendationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/AssetPropRecommendationDTO"
                    }
                  ],
                  "title": "Response Add Asset Recommendation V2 Asset Management Assets  Uuid  Recommendation Post"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/recommendation/{recommendation_uuid}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Edit an asset recommendation",
        "description": "Update an asset recommendation",
        "operationId": "update_asset_recommendation_v2_asset_management_assets__uuid__recommendation__recommendation_uuid__put",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "recommendation_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Recommendation UUID",
              "title": "Recommendation Uuid"
            },
            "description": "Recommendation UUID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_asset_recommendation_v2_asset_management_assets__uuid__recommendation__recommendation_uuid__put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recommendation successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AssetPropRecommendationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/AssetAtomRecommendationDTO"
                    }
                  ],
                  "title": "Response Update Asset Recommendation V2 Asset Management Assets  Uuid  Recommendation  Recommendation Uuid  Put"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove an asset recommendation",
        "description": "Remove an asset recommendation",
        "operationId": "remove_asset_recommendation_v2_asset_management_assets__uuid__recommendation__recommendation_uuid__delete",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "recommendation_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Recommendation UUID",
              "title": "Recommendation Uuid"
            },
            "description": "Recommendation UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset recommendation successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Remove Asset Recommendation V2 Asset Management Assets  Uuid  Recommendation  Recommendation Uuid  Delete"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/assets/{uuid}/recommendations": {
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Bulk-remove asset recommendations",
        "description": "Remove multiple recommendations from an asset",
        "operationId": "remove_asset_recommendations_v2_asset_management_assets__uuid__recommendations_delete",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Asset's UUID",
              "title": "Uuid"
            },
            "description": "Asset's UUID"
          },
          {
            "name": "recommendation_uuids",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "description": "list of recommendations UUID to remove",
              "title": "Recommendation Uuids"
            },
            "description": "list of recommendations UUID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset recommendation successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Remove Asset Recommendations V2 Asset Management Assets  Uuid  Recommendations Delete"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/asset-management/atoms": {
      "get": {
        "tags": [
          "Assets",
          "Atoms"
        ],
        "summary": "Search atoms",
        "description": "Search atoms, returning a paginated, sorted, filtered list",
        "operationId": "search_atoms_v2_asset_management_atoms_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "exclusiveMinimum": 0,
              "description": "Limit a number of items (allowed range is 1-100), default is 20.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "A number of items to skip, default is 0.",
              "default": 0,
              "title": "Offset"
            },
            "description": "A number of items to skip, default is 0."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search atoms by value",
              "title": "Search"
            },
            "description": "Search atoms by value"
          },
          {
            "name": "organization_uuids",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of organization UUIDs",
              "title": "organization Uuids"
            },
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by comma-separated list of atom types",
              "title": "Type"
            },
            "description": "Filter by comma-separated list of atom types"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "name",
                    "type",
                    "created_at"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort criterion",
              "title": "Sort"
            },
            "description": "Sort criterion"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    "desc",
                    "asc"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort order",
              "title": "Direction"
            },
            "description": "Sort order"
          },
          {
            "name": "with_telemetry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include atoms telemetry statistics in the response",
              "default": false,
              "title": "With Telemetry"
            },
            "description": "Include atoms telemetry statistics in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_AtomShortDTO_"
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized"
          },
          "403": {
            "description": "Permissions required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BACKEND_Asset management API_HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/cti/bundles/{hash}": {
      "parameters": [
        {
          "name": "hash",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Download STIX bundle",
        "description": "Download the STIX bundle with the given hash.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_get_bundle_resource",
        "tags": [
          "Bundles"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/collections/observables": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionListOfObservablesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "summary": "Consume a feed of observables",
        "description": "Each response gives a `next_cursor` attribute that can be used in the `cursor` parameter for the next request",
        "operationId": "get_observables_collection_resource",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "modified_after",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 10000,
            "description": "Number of objects to return, maximum is 10000 for the text format and 2000 for others"
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match observables by their type."
          },
          {
            "in": "query",
            "name": "with_tags",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "Collections"
        ]
      }
    },
    "/cti/collections/relationships": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionListOfRelationshipsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "summary": "Consume a feed of object relationships",
        "description": "Yields a feed of relationships involving the objects matching the provided IDs.\nEach response gives a `next_cursor` attribute that can be used in the `cursor` parameter for the next request",
        "operationId": "get_relationships_collection_resource",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "modified_after",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 10000,
            "description": "Number of objects to return, maximum is 10000 for the text format and 2000 for others"
          },
          {
            "in": "query",
            "name": "match[id]",
            "required": true,
            "type": "string",
            "description": "Ids of the objects to get the relationships from."
          }
        ],
        "tags": [
          "Collections"
        ]
      }
    },
    "/cti/collections/{feed_id}/objects": {
      "parameters": [
        {
          "name": "feed_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Consume a feed of objects",
        "description": "Each response gives a `next_cursor` attribute that can be used in the `cursor` parameter for the next request",
        "operationId": "get_objects_collection_resource",
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "modified_after",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 10000,
            "description": "Number of objects to return, maximum is 10000 for the text format and 2000 for others"
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match objects by their type."
          },
          {
            "in": "query",
            "name": "match[observable_type]",
            "required": false,
            "type": "string",
            "description": "Match indicators by the observables the pattern contains."
          },
          {
            "in": "query",
            "name": "convert_network_traffic",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "name": "skip_expired",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "Whether we should skip expired indicators"
          },
          {
            "in": "query",
            "name": "include_revoked",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "Whether revoked objects should be included"
          },
          {
            "in": "query",
            "name": "return_all_fields",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "Whether all the fields of an object should be returned"
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string",
            "enum": [
              "json",
              "csv",
              "text"
            ],
            "description": "Format of the response"
          },
          {
            "in": "query",
            "name": "latest",
            "required": false,
            "type": "boolean",
            "description": "Retrieve the latest objects"
          },
          {
            "name": "feed_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Collections"
        ]
      }
    },
    "/cti/exports/": {
      "post": {
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedExportJobSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Creates an export job",
        "description": "It will generate a file with all the related objects in the specified format.\nIt is possible to optionally restrict the related objects\nto only the ones linked by some specific types of relationships\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_export_resource",
        "parameters": [],
        "tags": [
          "Exports"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "relationship_types": {
                    "type": "array"
                  },
                  "categories": {
                    "type": "array"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "jsonl",
                      "csv",
                      "mitre-attack",
                      "text"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/exports/{job_id}": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedExportJobSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve an export job",
        "description": "It allows to get the details of a job and its status.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_export_job_details_resource",
        "tags": [
          "Exports"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/exports/{job_id}/file": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedExportJobSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve an export job file",
        "description": "The job must be with the status \"FINISHED\" in order to be able to retrieve the file\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_export_job_file_resource",
        "tags": [
          "Exports"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/feeds": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfFeedsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List the existing feeds",
        "description": "The following permissions are required:\n - “View feeds” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_feeds_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "type": "string",
            "description": "Term the feed title should contain"
          },
          {
            "in": "query",
            "name": "match[id]",
            "required": false,
            "type": "string",
            "description": "Filter feeds by their id"
          }
        ],
        "tags": [
          "Outgoing Feeds"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeedSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Create a new feed",
        "description": "The following permissions are required:\n - “Manage feeds” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_feeds_resource",
        "parameters": [],
        "tags": [
          "Outgoing Feeds"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/feeds/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeedSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Retrieve a feed",
        "description": "The following permissions are required:\n - “View feeds” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_warning_rule_resource",
        "tags": [
          "Outgoing Feeds"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Remove a feed",
        "description": "The following permissions are required:\n - “Manage feeds” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_warning_rule_resource",
        "tags": [
          "Outgoing Feeds"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedFeedSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Update a feed",
        "description": "The following permissions are required:\n - “Manage feeds” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_warning_rule_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Outgoing Feeds"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/images/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Retrieve an image",
        "description": "Retrieves an image given its path",
        "operationId": "get_get_image_resource",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/indicators": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Search indicators",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_find_indicator_resource",
        "parameters": [
          {
            "in": "query",
            "name": "value",
            "required": true,
            "type": "string",
            "description": "Value of the indicator"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string",
            "enum": [
              "text",
              "software",
              "mac-addr",
              "domain-name",
              "ipv4-addr",
              "directory",
              "email-addr",
              "x509-certificate",
              "filename",
              "address",
              "process",
              "autonomous-system",
              "artifact",
              "email-message",
              "user-account",
              "windows-registry-key",
              "phone-number",
              "mutex",
              "file",
              "ipv6-addr",
              "observable-relationship",
              "individual",
              "organization",
              "url"
            ],
            "description": "Type of the indicator"
          }
        ],
        "tags": [
          "Indicators",
          "STIX"
        ]
      }
    },
    "/cti/indicators/context": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get indicators context",
        "description": "Get context around the indicators matching the given value.\nThe context bundles are limited to at most 100 related objects.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_indicator_context_resource",
        "parameters": [
          {
            "in": "query",
            "name": "value",
            "required": true,
            "type": "string",
            "description": "Value of the indicator"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string",
            "enum": [
              "text",
              "software",
              "mac-addr",
              "domain-name",
              "ipv4-addr",
              "directory",
              "email-addr",
              "x509-certificate",
              "filename",
              "address",
              "process",
              "autonomous-system",
              "artifact",
              "email-message",
              "user-account",
              "windows-registry-key",
              "phone-number",
              "mutex",
              "file",
              "ipv6-addr",
              "observable-relationship",
              "individual",
              "organization",
              "url"
            ],
            "description": "Type of the indicator"
          }
        ],
        "tags": [
          "Indicators",
          "STIX"
        ]
      }
    },
    "/cti/indicators/indicates-relationships": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/buNdleschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve \"indicates\" relationships",
        "description": "Retrieve the \"indicates\" relationships and the related objects for the given indicators\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_indicator_relationships_resource",
        "parameters": [],
        "tags": [
          "Indicators",
          "STIX"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCollectionsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List the existing IOC collections",
        "description": "The following permissions are required:\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_ioc_collections_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "type": "string",
            "description": "Term the IOC collection name should contain"
          },
          {
            "in": "query",
            "name": "match[organization_uuid]",
            "required": false,
            "type": "string",
            "description": "Organizations to match (separated by commas)."
          },
          {
            "in": "query",
            "name": "with_indicators_count",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "IOC Collections"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/collecTionschema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Create a new IOC collection",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_ioc_collections_resource",
        "parameters": [],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "organization_uuid": {
                    "type": "string"
                  },
                  "available_for_sub_organizations": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/count-total-iocs": {
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountTotalIocsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Count indicators in a organization",
        "description": "Get the total number of indicators in organization\n\nThe following permissions are required:\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_organization_total_ioc_resource",
        "parameters": [
          {
            "in": "query",
            "name": "organization_uuid",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true
          }
        ],
        "tags": [
          "IOC Collections"
        ]
      }
    },
    "/cti/ioc-collections/telemetry/reports/{report_id}": {
      "parameters": [
        {
          "name": "report_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSightedObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get an existing telemetry report",
        "description": "The following permissions are required:\n - “View IOC collections telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_collection_telemetry_report_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ]
      }
    },
    "/cti/ioc-collections/{collection_id}/cti/indicators/{indicator_id}": {
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "indicator_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/indicAtorschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown collection or indicator"
          }
        },
        "summary": "Revoke an indicator",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_collection_indicator_resource",
        "tags": [
          "IOC Collections"
        ],
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "indicator_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/indicAtorschema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown collection or indicator"
          }
        },
        "summary": "Update an object",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_collection_indicator_resource",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "indicator_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "valid_from": {
                    "type": "string"
                  },
                  "valid_until": {
                    "type": "string"
                  },
                  "kill_chain_phases": {
                    "type": "array"
                  },
                  "x_cti_related_threat_refs": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/{collection_id}/cti/indicators/{indicator_id}/context": {
      "parameters": [
        {
          "name": "collection_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "indicator_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/buNdleschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve an IOC's context",
        "description": "The context bundle is limited to at most 100 related objects.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_collection_indicator_context_resource",
        "tags": [
          "IOC Collections"
        ],
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "indicator_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/ioc-collections/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/collecTionschema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Update an IOC collection",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "patch_ioc_collection_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "available_for_sub_organizations": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Remove the given IOC collection",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_ioc_collection_resource",
        "tags": [
          "IOC Collections"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/collecTionschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an IOC collection",
        "description": "The following permissions are required:\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_ioc_collection_resource",
        "tags": [
          "IOC Collections"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/ioc-collections/{uuid}/cti/indicators": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List indicators in the given IOC collection",
        "description": "The following permissions are required:\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_collection_indicators_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "term",
            "required": false,
            "type": "string",
            "description": "Term the indicator pattern should contain"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create indicators in the given IOC collection",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_collection_indicators_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "indicators": {
                    "type": "array"
                  },
                  "default_fields": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/{uuid}/cti/indicators/files/preview": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Upload and preview and indicator's file",
        "description": "Uploads the given file and returns a preview of it\n\nThe following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_collection_indicators_files_preview_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "file"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/{uuid}/cti/indicators/files/process": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "File not found"
          }
        },
        "summary": "Process previously uploaded file",
        "description": "The following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_collection_indicators_files_process_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "valid_from": {
                    "type": "string"
                  },
                  "valid_until": {
                    "type": "string"
                  },
                  "kill_chain_phases": {
                    "type": "array"
                  },
                  "x_cti_related_threat_refs": {
                    "type": "array"
                  },
                  "file_handle": {
                    "type": "string"
                  },
                  "mapping": {
                    "type": "array"
                  },
                  "ignore_first_line": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/{uuid}/cti/indicators/pdf": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTaskIdSchema"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Extract IOCs from pdf file",
        "description": "The following permissions are required:\n - “View IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_collection_indicators_pdf_resource",
        "parameters": [
          {
            "in": "query",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "in": "query",
            "name": "report_name",
            "required": false,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ]
      }
    },
    "/cti/ioc-collections/{uuid}/cti/indicators/text": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Bulk create indicators",
        "description": "Asynchronously bulk create indicators in the given IOC collection\n\nThe following permissions are required:\n - “Manage IOC collections” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_collection_indicators_text_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "valid_from": {
                    "type": "string"
                  },
                  "valid_until": {
                    "type": "string"
                  },
                  "kill_chain_phases": {
                    "type": "array"
                  },
                  "x_cti_related_threat_refs": {
                    "type": "array"
                  },
                  "indicators": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "one_per_line",
                      "domain-name.value",
                      "ipv4-addr.value",
                      "ipv6-addr.value",
                      "url.value",
                      "email-addr.value",
                      "file.hashes"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/ioc-collections/{uuid}/telemetry/reports": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Collection not found"
          }
        },
        "summary": "Generate telemetry report",
        "description": "Triggers the generation of a new telemetry report for the given IOC collection\n\nThe following permissions are required:\n - “View IOC collections telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_collection_telemetry_reports_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IOC Collections"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization_uuids": {
                    "type": "array",
                    "description": "Organizations to use during report generation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/kill-chains": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfKillChainsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List kill chains",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View Intelligence with limited access.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_kill_chains_resource",
        "tags": [
          "Kill Chains"
        ],
        "parameters": []
      }
    },
    "/kill-chains/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedKillChainItemSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Retrieve a specific kill chain",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View Intelligence with limited access.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_kill_chain_resource",
        "tags": [
          "Kill Chains"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/labels": {
      "get": {
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfLabelsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List all labels",
        "description": "The following permissions are required:\n - “View labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_labels_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/lAbelschema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Create a new label",
        "description": "The following permissions are required:\n - “Add, update or delete intelligence labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_labels_resource",
        "parameters": [],
        "tags": [
          "Labels"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "values": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/labels/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/lAbelschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Label"
          }
        },
        "summary": "Retrieve a label",
        "description": "The following permissions are required:\n - “View labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_label_resource",
        "tags": [
          "Labels"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown label"
          }
        },
        "summary": "Delete a label",
        "description": "The following permissions are required:\n - “Add, update or delete intelligence labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "delete_label_resource",
        "tags": [
          "Labels"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/lAbelschema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown label"
          }
        },
        "summary": "Update a label",
        "description": "The following permissions are required:\n - “Add, update or delete intelligence labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_label_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Labels"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_name": {
                    "type": "string"
                  },
                  "old_label": {
                    "type": "object"
                  },
                  "new_label": {
                    "type": "object"
                  },
                  "is_label_deleted": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/labels/{uuid}/add-label": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/lAbelschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown Label"
          }
        },
        "summary": "Add a new label value to group",
        "description": "The following permissions are required:\n - “Add, update or delete intelligence labels” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "put_add_label_to_group_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Labels"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/misp/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Download a MISP file",
        "description": "Get the given MISP file, following the standard MISP feed layout.\nSee https://www.misp-project.org/documentation/ for more information.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_get_misp_file_resource",
        "tags": [
          "MISP"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/objects": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List objects",
        "description": "List intelligence objects in STIX format\n\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_objects_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 10000,
            "description": "a number of items to skip, default is 0. Maximum is 10 000"
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match objects by their type."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match objects by their name."
          },
          {
            "in": "query",
            "name": "match[id]",
            "required": false,
            "type": "string",
            "description": "Match objects by their id."
          },
          {
            "in": "query",
            "name": "match[external_id]",
            "required": false,
            "type": "string",
            "description": "Match objects by their external id."
          },
          {
            "in": "query",
            "name": "match[tlp]",
            "required": false,
            "type": "string",
            "description": "Match objects by their TLP."
          },
          {
            "in": "query",
            "name": "match[source]",
            "required": false,
            "type": "string",
            "description": "Match objects by their sources."
          },
          {
            "in": "query",
            "name": "deprecated",
            "required": false,
            "type": "boolean",
            "description": "Match objects by their deprecation status."
          },
          {
            "in": "query",
            "name": "match[label]",
            "required": false,
            "type": "string",
            "description": "Match objects by their label."
          }
        ],
        "tags": [
          "Objects",
          "STIX"
        ]
      }
    },
    "/cti/objects/light": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfLightSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List objects (light)",
        "description": "List intelligence objects in STIX format, returning only light information about each\n\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View Intelligence with limited access.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_light_objects_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 10000,
            "description": "a number of items to skip, default is 0. Maximum is 10 000"
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match objects by their type."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match objects by their name."
          },
          {
            "in": "query",
            "name": "match[id]",
            "required": false,
            "type": "string",
            "description": "Match objects by their id."
          },
          {
            "in": "query",
            "name": "match[external_id]",
            "required": false,
            "type": "string",
            "description": "Match objects by their external id."
          },
          {
            "in": "query",
            "name": "match[tlp]",
            "required": false,
            "type": "string",
            "description": "Match objects by their TLP."
          },
          {
            "in": "query",
            "name": "match[source]",
            "required": false,
            "type": "string",
            "description": "Match objects by their sources."
          },
          {
            "in": "query",
            "name": "deprecated",
            "required": false,
            "type": "boolean",
            "description": "Match objects by their deprecation status."
          },
          {
            "in": "query",
            "name": "match[label]",
            "required": false,
            "type": "string",
            "description": "Match objects by their label."
          }
        ],
        "tags": [
          "Objects",
          "STIX"
        ]
      }
    },
    "/cti/objects/search": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Search objects",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_object_search_resource",
        "parameters": [],
        "tags": [
          "Objects",
          "STIX"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "limit a number of items (allowed range is 1-100), default is 20.",
                    "minimum": 1,
                    "maximum": 100
                  },
                  "offset": {
                    "type": "integer",
                    "description": "a number of items to skip, default is 0. Maximum is 10 000",
                    "maximum": 10000
                  },
                  "term": {
                    "type": "string",
                    "description": "Content to search"
                  },
                  "terms": {
                    "type": "array",
                    "description": "Terms to look for. If more than one term is specified the search will be a simple one."
                  },
                  "types": {
                    "type": "array",
                    "description": "Type to search"
                  },
                  "simple": {
                    "type": "boolean",
                    "description": "Whether the search should be simple or complex."
                  },
                  "include_revoked": {
                    "type": "boolean"
                  },
                  "sort": {
                    "type": "string",
                    "enum": [
                      "pertinence",
                      "modified"
                    ]
                  },
                  "is_source": {
                    "type": "boolean"
                  },
                  "sources": {
                    "type": "array"
                  },
                  "created": {
                    "type": "string"
                  },
                  "modified": {
                    "type": "string"
                  },
                  "observable_types": {
                    "type": "array"
                  },
                  "tlps": {
                    "type": "array"
                  },
                  "labels": {
                    "type": "array"
                  },
                  "confidence": {
                    "type": "integer",
                    "maximum": 100
                  },
                  "confidence_operator": {
                    "type": "string",
                    "enum": [
                      "==",
                      ">",
                      "<",
                      ">=",
                      "<="
                    ]
                  },
                  "sectors": {
                    "type": "array"
                  },
                  "locations": {
                    "type": "array"
                  },
                  "feed": {
                    "type": "string"
                  },
                  "names": {
                    "type": "array"
                  },
                  "deprecated": {
                    "type": "boolean"
                  },
                  "with_count": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/objects/sectors": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List sectors",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_sectors_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match sectors by their name."
          }
        ],
        "tags": [
          "Objects"
        ]
      }
    },
    "/cti/objects/{object_id}/context": {
      "parameters": [
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cti/buNdleschema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get an object's context",
        "description": "Retrieves the context around the given object.\nThe context bundle is limited to at most 100 related objects.\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_context_resource",
        "tags": [
          "Objects",
          "STIX"
        ],
        "parameters": [
          {
            "name": "object_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/objects/{object_id}/files/{hash}": {
      "parameters": [
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "hash",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve an object's file",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View Intelligence with limited access.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_get_object_file_resource",
        "tags": [
          "Objects",
          "Files"
        ],
        "parameters": [
          {
            "name": "object_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/objects/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedSTIXObjectSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Bulk get objects",
        "description": "Retrieve one or multiple objects given by their comma-separated UUIDs\n\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View Intelligence with limited access.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_resource",
        "tags": [
          "Objects",
          "STIX"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/objects/{uuid}/notes": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an object's notes and opinions",
        "description": "The following permissions are required:\n - “Read notes in the intelligence database.” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_notes_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Objects",
          "Notes"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedApiNoteSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Create a new note or opinion",
        "description": "The following permissions are required:\n - “Read notes in the intelligence database” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_object_notes_resource",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Objects",
          "Notes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/objects/{uuid}/observables": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List the observables related to the given object",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_list_object_observables",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Object relationships",
          "STIX"
        ]
      }
    },
    "/cti/objects/{uuid}/relationship-types": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfRelationshipTypesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an object's existing relationship types",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_relationship_types_resource",
        "tags": [
          "Object relationships"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/objects/{uuid}/relationships": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfRelationshipsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an object's relationships",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_relationships_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match relationships by their type."
          },
          {
            "in": "query",
            "name": "match[target_types]",
            "required": false,
            "type": "string",
            "description": "Match relationships by their target object type"
          },
          {
            "in": "query",
            "name": "category",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include_revoked",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Objects",
          "STIX"
        ]
      }
    },
    "/cti/objects/{uuid}/relationships/statistics": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Request fulfilled, document follows",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipStatisticsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Retrieve statistics about the relationships of the given object",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_relationships_statistics",
        "parameters": [
          {
            "in": "query",
            "name": "include_revoked",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Object relationships",
          "STIX"
        ]
      }
    },
    "/cti/objects/{uuid}/reports": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Retrieve the reports containing the given object",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_reports_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match objects by their name"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Object relationships"
        ]
      }
    },
    "/cti/objects/{uuid}/sources": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Retrieve the sources of an object",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_object_sources_resource",
        "tags": [
          "Object relationships"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/observable-relationships": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservableRelationshipsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List observables relationships",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observable_relationships_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          }
        ],
        "tags": [
          "Observable relationships"
        ]
      }
    },
    "/cti/observable-relationships/{relationship_uuid}": {
      "parameters": [
        {
          "name": "relationship_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedObservableRelationshipSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get a single observable relationship",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observable_relationship_resource",
        "tags": [
          "Observable relationships"
        ],
        "parameters": [
          {
            "name": "relationship_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/observables": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List observables",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observables_resource",
        "parameters": [
          {
            "in": "query",
            "name": "with_indicated_threats",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 10000,
            "description": "a number of items to skip, default is 0. Maximum is 10 000"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 2000,
            "description": "limit a number of items (allowed range is 1-2000), default is 20."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match observables by their type."
          },
          {
            "in": "query",
            "name": "match[hash]",
            "required": false,
            "type": "string",
            "description": "Match observables by their hash."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match observables by their name."
          },
          {
            "in": "query",
            "name": "match[value]",
            "required": false,
            "type": "string",
            "description": "Match observables by their value."
          },
          {
            "in": "query",
            "name": "match[tag]",
            "required": false,
            "type": "string",
            "description": "Match observables by their tag."
          },
          {
            "in": "query",
            "name": "match[valid_tag]",
            "required": false,
            "type": "string",
            "description": "Match observables by their valid tag."
          },
          {
            "in": "query",
            "name": "match[id]",
            "required": false,
            "type": "string",
            "description": "Match observables by their id."
          },
          {
            "in": "query",
            "name": "match[source]",
            "required": false,
            "type": "string",
            "description": "Match observables by their sources."
          }
        ],
        "tags": [
          "Observables",
          "STIX"
        ]
      }
    },
    "/cti/observables/bulk-search": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfBulkSearchResultsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Bulk search observables",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_observables_bulk_search_resource",
        "parameters": [],
        "tags": [
          "Observables",
          "Search",
          "STIX"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "with_indicated_threats": {
                    "type": "boolean"
                  },
                  "searches": {
                    "type": "array",
                    "description": "List of search terms"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/observables/count": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountObservablesSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Count observables",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_count_observables_resource",
        "parameters": [],
        "tags": [
          "Observables",
          "Search"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "term": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/observables/search": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Search observables",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "post_observables_search_resource",
        "parameters": [],
        "tags": [
          "Observables",
          "Search",
          "STIX"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "with_indicated_threats": {
                    "type": "boolean"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "limit a number of items (allowed range is 1-100), default is 20.",
                    "minimum": 1,
                    "maximum": 100
                  },
                  "offset": {
                    "type": "integer",
                    "description": "a number of items to skip, default is 0. Maximum is 10 000",
                    "maximum": 10000
                  },
                  "term": {
                    "type": "string",
                    "description": "Content to search"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cti/observables/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesTagsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List observable tags",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observables_tags_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match tags by their name."
          }
        ],
        "tags": [
          "Observables",
          "Tags"
        ]
      }
    },
    "/cti/observables/{observable_uuid}/relationships": {
      "parameters": [
        {
          "name": "observable_uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesAndRelationshipsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an observable's relationships",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observables_relationships_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "observable_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Observable relationships",
          "STIX"
        ]
      }
    },
    "/cti/observables/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedObservableSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get an observable",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observable_resource",
        "tags": [
          "Observables",
          "STIX"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/observables/{uuid}/cti/indicators": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservableIndicatorsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Retrieve indicators related to an observable",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observables_indicators",
        "parameters": [
          {
            "in": "query",
            "name": "with_indicated_threats",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Observable relationships",
          "STIX"
        ]
      }
    },
    "/cti/observables/{uuid}/reports": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get the reports the given observable belongs to",
        "description": "The following permissions are required:\n - “View observables” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_observable_reports_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Observables relationships"
        ]
      }
    },
    "/cti/relationships": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXRelationshipsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List STIX relationships",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_relationships_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match relationships by their type."
          }
        ],
        "tags": [
          "Relationships"
        ]
      }
    },
    "/cti/relationships/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedSTIXRelationshipSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Get relationship",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_relationship_resource",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/reports": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List STIX reports",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_reports_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "feed_id",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Type that should be mentioned in the report"
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/cti/reports/{uuid}": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedSTIXObjectSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Unknown object"
          }
        },
        "summary": "Retrieve a report",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_report_resource",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/cti/reports/{uuid}/objects": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the objects contained in the given report",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_report_objects_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 2000,
            "description": "limit a number of items (allowed range is 1-2000), default is 100."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match objects by their type."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/cti/reports/{uuid}/observables": {
      "parameters": [
        {
          "name": "uuid",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfObservablesSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get the observables contained in the given report",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_report_observables_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 2000,
            "description": "limit a number of items (allowed range is 1-2000), default is 100."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[type]",
            "required": false,
            "type": "string",
            "description": "Match observables by their type."
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/cti/sources": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfSTIXObjectsSchema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "List sources",
        "description": "The following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_sources_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "limit a number of items (allowed range is 1-100), default is 20."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "description": "a number of items to skip, default is 0."
          },
          {
            "in": "query",
            "name": "match[name]",
            "required": false,
            "type": "string",
            "description": "Match sources by their type."
          }
        ],
        "tags": [
          "Sources"
        ]
      }
    },
    "/cti/statistics/count/{type}": {
      "parameters": [
        {
          "name": "type",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrappedCountSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get objects count by type",
        "description": "Retrieve the number of objects of the given type in the given period\nThe previous period is also computed for comparison\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_statistics_count_resource",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "feed_id",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Intelligence statistics"
        ]
      }
    },
    "/cti/statistics/top/{type}": {
      "parameters": [
        {
          "name": "type",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get top objects",
        "description": "Retrieve top most used objects for the given type in the given period\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View global platform telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_statistics_top_resource",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "feed_id",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 200,
            "description": "limit a number of items (allowed range is 1-200), default is 10."
          },
          {
            "in": "query",
            "name": "with_previous_period",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Intelligence statistics"
        ]
      }
    },
    "/cti/statistics/weekly-top": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeeklyTopListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "summary": "Get top objects (weekly)",
        "description": "Retrieve top most used objects for the given type in the given period\n\nThe following permissions are required:\n - “View intelligence” (`00000000-1111-2222-3333-444444444444`)\n - “View global platform telemetry” (`00000000-1111-2222-3333-444444444444`)",
        "operationId": "get_statistics_weekly_top_resource",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 5,
            "minimum": 1,
            "maximum": 10,
            "description": "Number of items to return between 1 and 10, default is 5."
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string",
            "enum": [
              "malware",
              "tool",
              "attack-pattern",
              "intrusion-set",
              "threat-actor",
              "adversary"
            ]
          }
        ],
        "tags": [
          "Intelligence statistics"
        ]
      }
    },
    "/cti/vulnerabilities/latest-known-exploited": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LastKnownExploitedVulnerabilities"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed"
          }
        },
        "summary": "List last known exploited vulnerabilities",
        "operationId": "get_feeds_resource",
        "tags": [
          "Vulnerabilities"
        ],
        "parameters": []
      }
    }
  },
  "components": {
    "schemas": {
      "wrapped_full_dashboard": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/full_dashboard"
          }
        },
        "type": "object"
      },
      "full_dashboard": {
        "required": [
          "organization_uuid"
        ],
        "properties": {
          "organization_uuid": {
            "type": "string",
            "description": "The UUID of the organization"
          },
          "created": {
            "type": "string",
            "description": "The creation date of the dashboard"
          },
          "modified": {
            "type": "string",
            "description": "The last modification date of the dashboard"
          }
        },
        "type": "object"
      },
      "list_of_dashboards": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/full_dashboard",
              "type": "object"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of dashboards"
          }
        },
        "type": "object"
      },
      "AlertFiltersBucket": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/AlertFiltersBucket"
            },
            "type": "array"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "filter",
          "groups",
          "total"
        ],
        "title": "AlertFiltersBucket"
      },
      "AlertFiltersCountersFilter": {
        "properties": {
          "alert_filter_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "AlertFiltersCountersFilter"
      },
      "AlertFiltersCountersRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "alert_filter_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/AlertFiltersCountersFilter"
          }
        },
        "type": "object",
        "title": "AlertFiltersCountersRequest"
      },
      "AlertFiltersCountersResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/AlertFiltersBucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total"
        ],
        "title": "AlertFiltersCountersResponse"
      },
      "AssetHeatmapResponse": {
        "properties": {
          "total": {
            "type": "number",
            "default": 0
          },
          "occurrences": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "number"
              },
              "type": "object"
            },
            "propertyNames": {
              "format": "date"
            },
            "type": "object",
            "default": {}
          },
          "available_since": {
            "type": "string",
            "format": "date",
            "default": "2023-07-04"
          }
        },
        "type": "object",
        "title": "AssetHeatmapResponse"
      },
      "AssetRequest": {
        "properties": {
          "asset_uuid": {
            "type": "string"
          },
          "latest": {
            "type": "string",
            "format": "date"
          },
          "earliest": {
            "type": "string",
            "format": "date"
          },
          "organization_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "asset_uuid"
        ],
        "title": "AssetRequest"
      },
      "AssetResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "integer",
            "default": 0
          },
          "occurrences": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "format": "date"
            },
            "type": "object"
          },
          "available_since": {
            "type": "string",
            "format": "date"
          },
          "asset_uuid": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "asset_uuid"
        ],
        "title": "AssetResponse"
      },
      "AssetTelemetry": {
        "properties": {
          "asset_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "occurrences": {
            "type": "number",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "asset_uuid"
        ],
        "title": "AssetTelemetry"
      },
      "AssetsResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "number",
            "default": 0
          },
          "assets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AssetTelemetry"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "type": "object",
            "default": {}
          },
          "available_since": {
            "type": "string",
            "format": "date"
          }
        },
        "type": "object",
        "title": "AssetsResponse"
      },
      "BucketFilter": {
        "properties": {
          "attribute": {
            "type": "string"
          },
          "value": {}
        },
        "type": "object",
        "required": [
          "attribute"
        ],
        "title": "BucketFilter"
      },
      "BucketTelemetry": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/BucketTelemetry"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "filter",
          "groups"
        ],
        "title": "BucketTelemetry"
      },
      "CTIObjectResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "integer",
            "default": 0
          },
          "occurrences": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "format": "date"
            },
            "type": "object"
          },
          "available_since": {
            "type": "string",
            "format": "date"
          },
          "object_id": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "object_id"
        ],
        "title": "CTIObjectResponse"
      },
      "CTIObjectsRequest": {
        "properties": {
          "object_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1
          },
          "latest": {
            "type": "string",
            "format": "date"
          },
          "earliest": {
            "type": "string",
            "format": "date"
          },
          "organization_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "object_ids"
        ],
        "title": "CTIObjectsRequest"
      },
      "CTIObjectsResponse": {
        "properties": {
          "total": {
            "type": "number",
            "default": 0
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CTIObjectResponse",
              "type": "object"
            },
            "type": "array",
            "default": []
          }
        },
        "type": "object",
        "title": "CTIObjectsResponse"
      },
      "EventAggCountersResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "last_event": {
            "type": "object"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/telemetry__api__dtos__invalid_events_aggregate__Bucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total"
        ],
        "title": "EventAggCountersResponse"
      },
      "EventAggFilter": {
        "properties": {
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_dialect_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "parsing_status": {
            "items": {
              "type": "string",
              "enum": [
                "invalid",
                "warning"
              ]
            },
            "type": "array",
            "default": [
              "invalid",
              "warning"
            ]
          },
          "message": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "EventAggFilter"
      },
      "EventAggRequest": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/EventAggFilter"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "organization_uuid",
                "connector_uuid",
                "connector_dialect_uuid",
                "parsing_status",
                "message"
              ]
            },
            "type": "array",
            "default": [
              "parsing_status",
              "message"
            ]
          },
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "title": "EventAggRequest"
      },
      "EventByParsingStatusCountersResponse": {
        "properties": {
          "valid_events_occurrences": {
            "type": "integer"
          },
          "warning_events_occurences": {
            "type": "integer"
          },
          "invalid_events_occurrences": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/telemetry__api__dtos__events_by_status__Bucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "valid_events_occurrences",
          "warning_events_occurences",
          "invalid_events_occurrences",
          "total"
        ],
        "title": "EventByParsingStatusCountersResponse"
      },
      "EventByStatusFilter": {
        "properties": {
          "connector_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_dialect_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "entity_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "EventByStatusFilter"
      },
      "EventCountersResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/BucketTelemetry",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total"
        ],
        "title": "EventCountersResponse"
      },
      "EventFilter": {
        "properties": {
          "connector_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_dialect_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "in_error": {
            "items": {
              "type": "boolean"
            },
            "type": "array"
          },
          "entity_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "created_at": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "EventFilter"
      },
      "EventHistogramResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "integer"
          },
          "buckets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BucketTelemetry"
            },
            "propertyNames": {
              "format": "date-time"
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "total",
          "buckets"
        ],
        "title": "EventHistogramResponse"
      },
      "EventRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "filters": {
            "$ref": "#/components/schemas/EventFilter"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "connector_uuid",
                "connector_dialect_uuid",
                "in_error",
                "entity_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "bin_size": {
            "type": "string",
            "enum": [
              "hour",
              "day",
              "month",
              "week"
            ],
            "default": "day"
          }
        },
        "type": "object",
        "required": [
          "latest",
          "earliest"
        ],
        "title": "EventRequest"
      },
      "EventsByStatusHistogramRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "connector_uuid",
                "connector_dialect_uuid",
                "entity_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/EventByStatusFilter"
          },
          "bin_size": {
            "type": "string",
            "enum": [
              "hour",
              "day"
            ],
            "default": "day"
          }
        },
        "type": "object",
        "title": "EventsByStatusHistogramRequest"
      },
      "EventsByStatusHistogramResponse": {
        "properties": {
          "valid_events_occurrences": {
            "type": "integer"
          },
          "warning_events_occurences": {
            "type": "integer"
          },
          "invalid_events_occurrences": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "buckets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/telemetry__api__dtos__events_by_status__HistogramBucket"
            },
            "propertyNames": {
              "format": "date-time"
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "valid_events_occurrences",
          "warning_events_occurences",
          "invalid_events_occurrences",
          "total",
          "buckets"
        ],
        "title": "EventsByStatusHistogramResponse"
      },
      "EventsByStatusRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "connector_uuid",
                "connector_dialect_uuid",
                "entity_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/EventByStatusFilter"
          }
        },
        "type": "object",
        "title": "EventsByStatusRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "History": {
        "properties": {
          "first_seen": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object",
        "title": "History"
      },
      "ConnectorLagBucket": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_lag": {
            "type": "number"
          },
          "average_lag": {
            "type": "number"
          },
          "min_lag": {
            "type": "number"
          },
          "max_lag": {
            "type": "number"
          },
          "total_processing_lag": {
            "type": "number"
          },
          "average_processing_lag": {
            "type": "number"
          },
          "max_processing_lag": {
            "type": "number"
          },
          "min_processing_lag": {
            "type": "number"
          },
          "total_message_size": {
            "type": "number"
          },
          "average_message_size": {
            "type": "number"
          },
          "max_message_size": {
            "type": "number"
          },
          "min_message_size": {
            "type": "number"
          },
          "total_event_size": {
            "type": "number"
          },
          "average_event_size": {
            "type": "number"
          },
          "max_event_size": {
            "type": "number"
          },
          "min_event_size": {
            "type": "number"
          },
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ConnectorLagBucket"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "total_lag",
          "average_lag",
          "min_lag",
          "max_lag",
          "total_processing_lag",
          "average_processing_lag",
          "max_processing_lag",
          "min_processing_lag",
          "total_message_size",
          "average_message_size",
          "max_message_size",
          "min_message_size",
          "total_event_size",
          "average_event_size",
          "max_event_size",
          "min_event_size",
          "filter",
          "groups"
        ],
        "title": "ConnectorLagBucket"
      },
      "ConnectorLagCounterResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_lag": {
            "type": "number"
          },
          "average_lag": {
            "type": "number"
          },
          "min_lag": {
            "type": "number"
          },
          "max_lag": {
            "type": "number"
          },
          "total_processing_lag": {
            "type": "number"
          },
          "average_processing_lag": {
            "type": "number"
          },
          "max_processing_lag": {
            "type": "number"
          },
          "min_processing_lag": {
            "type": "number"
          },
          "total_message_size": {
            "type": "number"
          },
          "average_message_size": {
            "type": "number"
          },
          "max_message_size": {
            "type": "number"
          },
          "min_message_size": {
            "type": "number"
          },
          "total_event_size": {
            "type": "number"
          },
          "average_event_size": {
            "type": "number"
          },
          "max_event_size": {
            "type": "number"
          },
          "min_event_size": {
            "type": "number"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/ConnectorLagBucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "total_lag",
          "average_lag",
          "min_lag",
          "max_lag",
          "total_processing_lag",
          "average_processing_lag",
          "max_processing_lag",
          "min_processing_lag",
          "total_message_size",
          "average_message_size",
          "max_message_size",
          "min_message_size",
          "total_event_size",
          "average_event_size",
          "max_event_size",
          "min_event_size"
        ],
        "title": "ConnectorLagCounterResponse"
      },
      "ConnectorStatisticFilter": {
        "properties": {
          "connector_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_dialect_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "ConnectorStatisticFilter"
      },
      "ConnectorStatisticsHistogramRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "connector_uuid",
                "connector_dialect_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/ConnectorStatisticFilter"
          },
          "bin_size": {
            "type": "string",
            "enum": [
              "hour",
              "day"
            ],
            "default": "day"
          }
        },
        "type": "object",
        "title": "ConnectorStatisticsHistogramRequest"
      },
      "ConnectorStatisticsHistogramResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "lag": {
            "type": "number"
          },
          "processing_lag": {
            "type": "number"
          },
          "event_size": {
            "type": "integer"
          },
          "message_size": {
            "type": "integer"
          },
          "buckets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/telemetry__api__dtos__connectors__HistogramBucket"
            },
            "propertyNames": {
              "format": "date-time"
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "total",
          "lag",
          "processing_lag",
          "event_size",
          "message_size",
          "buckets"
        ],
        "title": "ConnectorStatisticsHistogramResponse"
      },
      "ConnectorStatsRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "connector_uuid",
                "connector_dialect_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/ConnectorStatisticFilter"
          }
        },
        "type": "object",
        "title": "ConnectorStatsRequest"
      },
      "Observable": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ObservableType"
          },
          "created": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "spec_version": {
            "type": "string",
            "default": "2.1"
          },
          "extensions": {
            "type": "object"
          },
          "x_cti_history": {
            "items": {
              "$ref": "#/components/schemas/History"
            },
            "type": "array"
          },
          "x_cti_sources_refs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x_cti_tags": {
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "type": "array"
          },
          "x_cti_short_display": {
            "type": "string"
          },
          "x_cti_indicated_threats": {
            "items": {
              "$ref": "#/components/schemas/ObservableIndicatedThreat"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "type"
        ],
        "title": "Observable"
      },
      "ObservableIndicatedThreat": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object",
        "title": "ObservableIndicatedThreat"
      },
      "ObservableResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "integer",
            "default": 0
          },
          "occurrences": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "format": "date"
            },
            "type": "object"
          },
          "available_since": {
            "type": "string",
            "format": "date"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "observable_id": {
            "type": "string"
          }
        },
        "type": "object",
        "title": "ObservableResponse"
      },
      "ObservableType": {
        "type": "string",
        "enum": [
          "software",
          "observable-relationship",
          "filename",
          "email-message",
          "autonomous-system",
          "organization",
          "file",
          "windows-registry-key",
          "user-account",
          "artifact",
          "process",
          "domain-name",
          "text",
          "mac-addr",
          "address",
          "mutex",
          "individual",
          "x509-certificate",
          "phone-number",
          "email-addr",
          "url",
          "ipv4-addr",
          "ipv6-addr",
          "directory"
        ],
        "title": "ObservableType"
      },
      "ObservablesReportRequest": {
        "properties": {
          "organization_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "observables": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Observable"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "minItems": 1
          },
          "latest": {
            "type": "string",
            "format": "date"
          },
          "earliest": {
            "type": "string",
            "format": "date"
          },
          "format": {
            "type": "string",
            "enum": [
              "csv",
              "json",
              "xls"
            ],
            "default": "json"
          },
          "resolution": {
            "type": "string",
            "enum": [
              "day",
              "month"
            ]
          }
        },
        "type": "object",
        "required": [
          "observables"
        ],
        "title": "ObservablesReportRequest"
      },
      "ObservablesRequest": {
        "properties": {
          "observable": {
            "$ref": "#/components/schemas/Observable"
          },
          "observables": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Observable"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "minItems": 1
          },
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "organization_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "latest",
          "earliest"
        ],
        "title": "ObservablesRequest"
      },
      "ObservablesResponse": {
        "properties": {
          "total": {
            "type": "number",
            "default": 0
          },
          "observables": {
            "items": {
              "$ref": "#/components/schemas/ObservableResponse"
            },
            "type": "array",
            "default": []
          }
        },
        "type": "object",
        "title": "ObservablesResponse"
      },
      "PlaybookBucket": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/PlaybookBucket"
            },
            "type": "array"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "filter",
          "groups",
          "total"
        ],
        "title": "PlaybookBucket"
      },
      "PlaybookCounterRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "playbook_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/PlaybookRunFilter"
          }
        },
        "type": "object",
        "title": "PlaybookCounterRequest"
      },
      "PlaybookCountersResponse": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/PlaybookBucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total"
        ],
        "title": "PlaybookCountersResponse"
      },
      "PlaybookHistogramRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "playbook_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/PlaybookRunFilter"
          },
          "bin_size": {
            "type": "string",
            "enum": [
              "hour",
              "day"
            ],
            "default": "day"
          }
        },
        "type": "object",
        "title": "PlaybookHistogramRequest"
      },
      "PlaybookHistogramResponse": {
        "properties": {
          "buckets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlaybookBucket"
            },
            "propertyNames": {
              "format": "date-time"
            },
            "type": "object"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "buckets",
          "total"
        ],
        "title": "PlaybookHistogramResponse"
      },
      "PlaybookRunFilter": {
        "properties": {
          "playbook_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "PlaybookRunFilter"
      },
      "AITokensBucket": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/AITokensBucket"
            },
            "type": "array"
          },
          "total_tokens": {
            "type": "integer"
          },
          "prompt_tokens": {
            "type": "integer"
          },
          "completion_tokens": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "filter",
          "groups",
          "total_tokens",
          "prompt_tokens",
          "completion_tokens"
        ],
        "title": "AITokensBucket"
      },
      "AITokensCounterRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "user_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/AITokensFilter"
          }
        },
        "type": "object",
        "title": "AITokensCounterRequest"
      },
      "AITokensCounterResponse": {
        "properties": {
          "total_tokens": {
            "type": "integer"
          },
          "prompt_tokens": {
            "type": "integer"
          },
          "completion_tokens": {
            "type": "integer"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/AITokensBucket",
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total_tokens",
          "prompt_tokens",
          "completion_tokens"
        ],
        "title": "AITokensCounterResponse"
      },
      "AITokensFilter": {
        "properties": {
          "user_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "organization_uuid": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "AIokensFilter"
      },
      "AITokensHistogramRequest": {
        "properties": {
          "latest": {
            "type": "string",
            "format": "date-time"
          },
          "earliest": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "items": {
              "type": "string",
              "enum": [
                "user_uuid",
                "organization_uuid"
              ]
            },
            "type": "array",
            "default": []
          },
          "filters": {
            "$ref": "#/components/schemas/AITokensFilter"
          },
          "bin_size": {
            "type": "string",
            "enum": [
              "hour",
              "day"
            ],
            "default": "day"
          }
        },
        "type": "object",
        "title": "AITokensHistogramRequest"
      },
      "AITokensHistogramResponse": {
        "properties": {
          "buckets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/AITokensBucket"
            },
            "propertyNames": {
              "format": "date-time"
            },
            "type": "object"
          },
          "total_tokens": {
            "type": "integer"
          },
          "prompt_tokens": {
            "type": "integer"
          },
          "completion_tokens": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "buckets",
          "total_tokens",
          "prompt_tokens",
          "completion_tokens"
        ],
        "title": "AITokensHistogramResponse"
      },
      "RuleResponse": {
        "properties": {
          "first_seen": {
            "type": "string",
            "format": "date"
          },
          "last_seen": {
            "type": "string",
            "format": "date"
          },
          "total": {
            "type": "integer",
            "default": 0
          },
          "occurrences": {
            "additionalProperties": {
              "type": "integer"
            },
            "propertyNames": {
              "format": "date"
            },
            "type": "object"
          },
          "available_since": {
            "type": "string",
            "format": "date"
          },
          "rule_uuid": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "rule_uuid"
        ],
        "title": "RuleResponse"
      },
      "Tag": {
        "properties": {
          "name": {
            "type": "string"
          },
          "valid_from": {
            "type": "string"
          },
          "valid_until": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Tag"
      },
      "TopCTIObjectResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "id",
          "total"
        ],
        "title": "TopCTIObjectResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array"
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "telemetry__api__dtos__events_by_status__Bucket": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "valid_events_occurrences": {
            "type": "integer"
          },
          "warning_events_occurences": {
            "type": "integer"
          },
          "invalid_events_occurrences": {
            "type": "integer"
          },
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/telemetry__api__dtos__events_by_status__Bucket"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "valid_events_occurrences",
          "warning_events_occurences",
          "invalid_events_occurrences",
          "filter",
          "groups"
        ],
        "title": "Bucket"
      },
      "telemetry__api__dtos__events_by_status__HistogramBucket": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "valid_events_occurrences": {
            "type": "integer"
          },
          "warning_events_occurences": {
            "type": "integer"
          },
          "invalid_events_occurrences": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "total",
          "valid_events_occurrences",
          "warning_events_occurences",
          "invalid_events_occurrences"
        ],
        "title": "HistogramBucket"
      },
      "telemetry__api__dtos__connectors__HistogramBucket": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "lag": {
            "type": "number"
          },
          "processing_lag": {
            "type": "number"
          },
          "event_size": {
            "type": "integer"
          },
          "message_size": {
            "type": "integer"
          },
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/telemetry__api__dtos__connectors__HistogramBucket"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "lag",
          "processing_lag",
          "event_size",
          "message_size",
          "filter",
          "groups"
        ],
        "title": "HistogramBucket"
      },
      "telemetry__api__dtos__invalid_events_aggregate__Bucket": {
        "properties": {
          "total": {
            "type": "integer"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "last_event": {
            "type": "object"
          },
          "filter": {
            "$ref": "#/components/schemas/BucketFilter"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/telemetry__api__dtos__invalid_events_aggregate__Bucket"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "total",
          "filter",
          "groups"
        ],
        "title": "Bucket"
      },
      "ActionRun": {
        "properties": {
          "action_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "account_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "arguments": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "action_uuid",
          "arguments"
        ],
        "title": "ActionRun"
      },
      "AllowedDownloadFormats": {
        "type": "string",
        "enum": [
          "csv",
          "jsonl"
        ],
        "title": "AllowedDownloadFormats"
      },
      "CreateQueryParameters": {
        "properties": {
          "name": {
            "type": "string"
          },
          "definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Input"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "visualization": {
            "$ref": "#/components/schemas/QueryVisualization",
            "default": "table"
          },
          "visualization_params": {
            "$ref": "#/components/schemas/QueryVisualizationParams"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "last_run_uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition"
        ],
        "title": "CreateQueryParameters"
      },
      "CreateQueryRunParameters": {
        "properties": {
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "query_definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Input"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "query_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "parent_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "parent_slug": {
            "type": "string"
          },
          "parent_type": {
            "$ref": "#/components/schemas/QueryRunParentType"
          }
        },
        "type": "object",
        "required": [
          "query_definition"
        ],
        "title": "CreateQueryRunParameters"
      },
      "FieldType": {
        "type": "string",
        "enum": [
          "string",
          "number",
          "boolean",
          "list",
          "object",
          "datetime",
          "unknown",
          "long",
          "real",
          "timedelta",
          "range",
          "array",
          "null"
        ],
        "title": "FieldType"
      },
      "FastAPI_HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/FastAPI_ValidationError"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ItemList_QuerySchema_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuerySchema",
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total"
        ],
        "title": "ItemList[QuerySchema]"
      },
      "NotebookTokenSchema": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "NotebookTokenSchema"
      },
      "PatchQueryRunParameters": {
        "properties": {
          "parent_slug": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "parent_slug"
        ],
        "title": "PatchQueryRunParameters"
      },
      "QLQuery": {
        "properties": {
          "ql_query": {
            "type": "string"
          },
          "organization_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          },
          "connector_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "ql_query"
        ],
        "title": "QLQuery"
      },
      "Query-Input": {
        "properties": {
          "datasource": {
            "$ref": "#/components/schemas/QueryDatasource"
          },
          "select": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_by": {
            "items": {
              "$ref": "#/components/schemas/QueryGroupBy"
            },
            "type": "array",
            "default": []
          },
          "aggregations": {
            "items": {
              "$ref": "#/components/schemas/QueryAggregation"
            },
            "type": "array",
            "default": []
          },
          "computed_fields": {
            "items": {
              "$ref": "#/components/schemas/QueryComputedField"
            },
            "type": "array",
            "default": []
          },
          "where": {
            "items": {
              "$ref": "#/components/schemas/QueryFilter"
            },
            "type": "array",
            "default": []
          },
          "order_by": {
            "items": {
              "$ref": "#/components/schemas/QuerySort"
            },
            "type": "array",
            "default": []
          },
          "offset": {
            "type": "integer",
            "default": 0
          },
          "limit": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "datasource"
        ],
        "title": "Query"
      },
      "Query-Output": {
        "properties": {
          "datasource": {
            "$ref": "#/components/schemas/QueryDatasource"
          },
          "select": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "group_by": {
            "items": {
              "$ref": "#/components/schemas/QueryGroupBy"
            },
            "type": "array",
            "default": []
          },
          "aggregations": {
            "items": {
              "$ref": "#/components/schemas/QueryAggregation"
            },
            "type": "array",
            "default": []
          },
          "computed_fields": {
            "items": {
              "$ref": "#/components/schemas/QueryComputedField"
            },
            "type": "array",
            "default": []
          },
          "where": {
            "items": {
              "$ref": "#/components/schemas/QueryFilter"
            },
            "type": "array",
            "default": []
          },
          "order_by": {
            "items": {
              "$ref": "#/components/schemas/QuerySort"
            },
            "type": "array",
            "default": []
          },
          "offset": {
            "type": "integer",
            "default": 0
          },
          "limit": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "datasource"
        ],
        "title": "Query"
      },
      "QueryAggregation": {
        "properties": {
          "name": {
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/QueryAggregationFunction"
          },
          "field": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "function",
          "field"
        ],
        "title": "QueryAggregation"
      },
      "QueryAggregationFunction": {
        "type": "string",
        "enum": [
          "count",
          "max",
          "min",
          "avg",
          "sum",
          "value_count"
        ],
        "title": "QueryAggregationFunction"
      },
      "QueryComputedField": {
        "properties": {
          "name": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "expression"
        ],
        "title": "QueryComputedField"
      },
      "QueryDatasource": {
        "properties": {
          "name": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "QueryDatasource"
      },
      "QueryFilter": {
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "operator": {
            "$ref": "#/components/schemas/QueryFilterOperator"
          },
          "excluded": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "field",
          "operator"
        ],
        "title": "QueryFilter"
      },
      "QueryFilterOperator": {
        "type": "string",
        "enum": [
          "=",
          "any",
          "startswith",
          "endswith",
          "contains",
          ">",
          ">=",
          "<",
          "<=",
          "within",
          "exists"
        ],
        "title": "QueryFilterOperator"
      },
      "QueryGroupBy": {
        "properties": {
          "field": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "field"
        ],
        "title": "QueryGroupBy"
      },
      "QueryRunCreated": {
        "properties": {
          "task_id": {
            "type": "string"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "uuid"
        ],
        "title": "QueryRunCreated"
      },
      "QueryRunFieldsSchema": {
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "QueryRunFieldsSchema"
      },
      "QueryRunParentType": {
        "type": "string",
        "enum": [
          "notebook",
          "query"
        ],
        "title": "QueryRunParentType"
      },
      "QueryRunSchema": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "query_definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Output"
              },
              {
                "$ref": "#/components/schemas/ActionRun"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "duration": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/QueryRunStatus"
          },
          "error": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/QueryRunFieldsSchema",
              "type": "object"
            },
            "type": "array"
          },
          "plan": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ]
          },
          "total": {
            "type": "integer"
          },
          "parent_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "parent_slug": {
            "type": "string"
          },
          "parent_type": {
            "type": "string"
          },
          "visualization": {
            "$ref": "#/components/schemas/QueryVisualization"
          },
          "visualization_params": {
            "$ref": "#/components/schemas/QueryVisualizationParams"
          }
        },
        "type": "object",
        "required": [
          "organization_uuid",
          "query_definition",
          "status"
        ],
        "title": "QueryRunSchema"
      },
      "QueryRunStatus": {
        "type": "string",
        "enum": [
          "pending",
          "running",
          "finished",
          "error"
        ],
        "title": "QueryRunStatus"
      },
      "QueryRunWithResultsSchema": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "query_definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Output"
              },
              {
                "$ref": "#/components/schemas/ActionRun"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "duration": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/QueryRunStatus"
          },
          "error": {
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/QueryRunFieldsSchema",
              "type": "object"
            },
            "type": "array"
          },
          "plan": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ]
          },
          "total": {
            "type": "integer"
          },
          "parent_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "parent_slug": {
            "type": "string"
          },
          "parent_type": {
            "type": "string"
          },
          "visualization": {
            "$ref": "#/components/schemas/QueryVisualization"
          },
          "visualization_params": {
            "$ref": "#/components/schemas/QueryVisualizationParams"
          },
          "results": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "organization_uuid",
          "query_definition",
          "status"
        ],
        "title": "QueryRunWithResultsSchema"
      },
      "QuerySchema": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "created_by": {
            "type": "string",
            "format": "uuid"
          },
          "created_by_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Output"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "visualization": {
            "$ref": "#/components/schemas/QueryVisualization",
            "default": "table",
            "type": "string"
          },
          "visualization_params": {
            "$ref": "#/components/schemas/QueryVisualizationParams"
          },
          "last_run_uuid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object",
        "required": [
          "organization_uuid",
          "name",
          "definition"
        ],
        "title": "QuerySchema"
      },
      "QuerySort": {
        "properties": {
          "field": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/QuerySortDirection",
            "default": "asc"
          }
        },
        "type": "object",
        "required": [
          "field"
        ],
        "title": "QuerySort"
      },
      "QuerySortDirection": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "QuerySortDirection"
      },
      "QueryVisualization": {
        "type": "string",
        "enum": [
          "number",
          "boolean",
          "table",
          "pie",
          "horizontal_bar",
          "vertical_bar",
          "line"
        ],
        "title": "QueryVisualization"
      },
      "QueryVisualizationParams": {
        "properties": {
          "x": {
            "type": "string"
          },
          "y": {
            "type": "string"
          },
          "breakdown": {
            "type": "string"
          },
          "stacked": {
            "type": "boolean"
          }
        },
        "type": "object",
        "title": "QueryVisualizationParams"
      },
      "UpdateQueryParameters": {
        "properties": {
          "name": {
            "type": "string"
          },
          "definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Query-Input"
              },
              {
                "$ref": "#/components/schemas/QLQuery"
              }
            ]
          },
          "visualization": {
            "$ref": "#/components/schemas/QueryVisualization",
            "default": "table"
          },
          "visualization_params": {
            "$ref": "#/components/schemas/QueryVisualizationParams"
          }
        },
        "type": "object",
        "required": [
          "name",
          "definition"
        ],
        "title": "UpdateQueryParameters"
      },
      "FastAPI_ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array"
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ListEntitySchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the entity"
                },
                "entity_id": {
                  "type": "string",
                  "description": "The Id of the entity"
                },
                "alerts_generation": {
                  "type": "string",
                  "description": "The uuid of the generation mode"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "The descrition of the entity"
                },
                "organization_uuid": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                },
                "number_of_connectors": {
                  "type": "integer"
                }
              },
              "required": [
                "alerts_generation",
                "organization_uuid",
                "entity_id",
                "name",
                "uuid"
              ]
            }
          }
        }
      },
      "EntitySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100,
            "description": "The name of the entity"
          },
          "entity_id": {
            "type": "string",
            "description": "The Id of the entity"
          },
          "alerts_generation": {
            "type": "string",
            "description": "The uuid of the generation mode"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "The descrition of the entity"
          },
          "organization_uuid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "number_of_connectors": {
            "type": "integer"
          }
        },
        "required": [
          "alerts_generation",
          "organization_uuid",
          "entity_id",
          "name",
          "uuid"
        ]
      },
      "EntityListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The uuid of the entity"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the entity"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "The deletion status of the entity"
                },
                "generation_mode": {
                  "type": "string",
                  "description": "The name of the generation mode"
                }
              },
              "required": [
                "created_at",
                "generation_mode",
                "name",
                "updated_at",
                "uuid"
              ]
            }
          }
        }
      },
      "ListCustomerSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total of existing customers"
          },
          "items": {
            "type": "array",
            "description": "Requested customers",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "name of the customer"
                },
                "customer_id": {
                  "type": "string",
                  "description": "id of the customer used for event association"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "description of the customer"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "uuid of the organization"
                },
                "uuid": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "created_by": {
                  "type": "string"
                },
                "entities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The uuid of the entity"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the creation date of the ressource"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the update date of the ressource"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the entity"
                      },
                      "deleted": {
                        "type": "boolean",
                        "description": "The deletion status of the entity"
                      },
                      "generation_mode": {
                        "type": "string",
                        "description": "The name of the generation mode"
                      }
                    },
                    "required": [
                      "created_at",
                      "generation_mode",
                      "name",
                      "updated_at",
                      "uuid"
                    ]
                  }
                }
              },
              "required": [
                "created_at",
                "created_by",
                "customer_id",
                "name",
                "updated_at",
                "uuid"
              ]
            }
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "ListArchivesSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total of existing customers"
          },
          "items": {
            "type": "array",
            "description": "Requested customers",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "name": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "settings": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "encryption_key": {
                  "type": "string",
                  "x-nullable": true
                },
                "validated": {
                  "type": "boolean",
                  "description": "Validity status of archive's config"
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "name",
                "provider",
                "settings",
                "updated_at",
                "uuid",
                "validated"
              ]
            }
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "RuleWorkerListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The unique ressource ID"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "definition_uuid": {
                  "type": "string",
                  "description": "The uuid of the definition of the rule"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the rule"
                },
                "type": {
                  "description": "cti|correlation|threshold",
                  "type": "string",
                  "enum": [
                    "correlation",
                    "cti",
                    "threshold",
                    "none"
                  ]
                },
                "enabled": {
                  "type": "boolean",
                  "description": "The status of the rule"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "The deletion status of the rule"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "The descrition of the rule"
                },
                "rule": {
                  "type": "string",
                  "description": "The text of the rule"
                },
                "all_entities": {
                  "type": "boolean",
                  "description": "Boolean indicating if this rule applies to all entities"
                },
                "entity_uuids": {
                  "type": "array",
                  "description": "List of entity UUIDs this rule applies to",
                  "items": {
                    "type": "string"
                  }
                },
                "all_assets": {
                  "type": "boolean",
                  "description": "Boolean indicating if this rule applies to all assets"
                },
                "assets_uuids": {
                  "type": "array",
                  "description": "List of assets UUIDs this rule applies to",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The uuid of the organization using the rule"
                },
                "alert_filters": {
                  "type": "array",
                  "description": "List of alert-filters attached to the rule",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "The unique ressource ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the alert filter"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the alert filter"
                      },
                      "exclusion_pattern": {
                        "type": "string",
                        "description": "The STIX observation expression that models the exclusion pattern"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The creation date of the alert filter",
                        "x-nullable": true
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The profile who created the alert filter"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                      },
                      "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The expiration date of the alert filter",
                        "x-nullable": true
                      },
                      "status": {
                        "description": "Status of the Alert Filter (active or expired)",
                        "type": "string",
                        "enum": [
                          "active",
                          "expired"
                        ]
                      }
                    },
                    "required": [
                      "created_at",
                      "created_by",
                      "created_by_type",
                      "exclusion_pattern",
                      "name",
                      "status",
                      "uuid"
                    ]
                  }
                },
                "alert": {
                  "type": "object",
                  "properties": {
                    "inherit_generation": {
                      "type": "boolean",
                      "description": "Boolean indicating if the entity's generation mode should be used"
                    },
                    "generation_mode": {
                      "type": "string",
                      "description": "The name of the generation mode"
                    },
                    "type": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "description": "The Category of the alert"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the type"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 1000,
                          "description": "The description of the type"
                        }
                      },
                      "required": [
                        "category",
                        "description",
                        "value"
                      ]
                    },
                    "countermeasures": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entity_uuid": {
                            "type": "string",
                            "description": "The entity that these countermeasures apply on"
                          },
                          "rule_definition_uuid": {
                            "type": "string",
                            "description": "The rule these countermeasures apply on"
                          },
                          "alert_type_uuid": {
                            "type": "string",
                            "description": "The alert type these countermeasures apply on"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 5,
                            "maxLength": 100,
                            "description": "Name of the set of countermeasures"
                          },
                          "description": {
                            "type": "string",
                            "maxLength": 1000,
                            "description": "Detailed description of the countermeasures"
                          },
                          "start_on": {
                            "type": "string",
                            "default": "",
                            "maxLength": 100,
                            "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                          },
                          "countermeasures": {
                            "type": "array",
                            "description": "Action steps of the countermeasure",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 100,
                                  "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                                },
                                "description": {
                                  "type": "string",
                                  "maxLength": 1000,
                                  "description": "Description of the action step"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "textual",
                                    "openc2",
                                    "powershell",
                                    "sh"
                                  ],
                                  "description": "Type of the action"
                                },
                                "value": {
                                  "type": "string",
                                  "maxLength": 1000,
                                  "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                                },
                                "object": {
                                  "type": "object",
                                  "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used",
                                  "additionalProperties": {}
                                },
                                "next_steps": {
                                  "type": "array",
                                  "description": "The set of named next action step(s) to execute after completion of this action step",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "name",
                                "type"
                              ]
                            }
                          },
                          "relevance": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Relevance of the countermeasure"
                          },
                          "duration": {
                            "type": "string",
                            "maxLength": 100,
                            "description": "Duration required to apply the countermeasure"
                          },
                          "organization_uuid": {
                            "type": "string",
                            "description": "The organization these countermeasures apply on"
                          },
                          "uuid": {
                            "type": "string",
                            "description": "The unique ressource ID"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the creation date of the ressource"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the update date of the ressource"
                          }
                        },
                        "required": [
                          "countermeasures",
                          "created_at",
                          "name",
                          "relevance",
                          "updated_at",
                          "uuid"
                        ]
                      }
                    },
                    "severity": {
                      "type": "integer",
                      "description": "The severity of the rule"
                    },
                    "similarity_strategy": {
                      "type": "array",
                      "description": "Strategy to use to consider alerts to be similar",
                      "items": {}
                    }
                  },
                  "required": [
                    "generation_mode",
                    "inherit_generation",
                    "severity",
                    "type"
                  ]
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The value of the parameter"
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the parameter"
                      }
                    },
                    "required": [
                      "name",
                      "value"
                    ]
                  }
                },
                "related_object_refs": {
                  "type": "array",
                  "description": "Related STIX object ids",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true
                },
                "smart_descriptions": {
                  "type": "string",
                  "description": "Smart descriptions"
                },
                "exclude_assets": {
                  "type": "boolean",
                  "description": "Are the listed assets excluded or included"
                },
                "exclude_entities": {
                  "type": "boolean",
                  "description": "Are the listed entities excluded or included"
                }
              },
              "required": [
                "all_assets",
                "all_entities",
                "organization_uuid",
                "created_at",
                "enabled",
                "name",
                "type",
                "updated_at",
                "uuid"
              ]
            }
          }
        }
      },
      "RulesDefinitionListSchema": {
        "type": "object",
        "properties": {
          "has_more": {
            "type": "boolean",
            "description": "Boolean indicating if there are more rules to pull"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The identifier of the rule"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the rule"
                },
                "type": {
                  "description": "The type of the rule",
                  "type": "string",
                  "enum": [
                    "cti",
                    "stix",
                    "sigma",
                    "anomaly"
                  ]
                },
                "payload": {
                  "type": "string",
                  "description": "The payload of the rule"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The organization uuid if the rule is attached to one",
                  "x-nullable": true
                },
                "instances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The identifier of the instance of the rule"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Is the rule enabled?",
                        "x-nullable": true
                      },
                      "organization_uuid": {
                        "type": "string",
                        "description": "The organization uuid of the rule instance"
                      },
                      "all_entities": {
                        "type": "boolean",
                        "description": "Boolean indicating if this rule applies to all entities"
                      },
                      "entity_uuids": {
                        "type": "array",
                        "description": "List of entity UUIDs this rule applies to",
                        "items": {
                          "type": "string"
                        }
                      },
                      "all_assets": {
                        "type": "boolean",
                        "description": "Boolean indicating if this rule applies to all assets"
                      },
                      "assets_uuids": {
                        "type": "array",
                        "description": "List of assets UUIDs this rule applies to",
                        "items": {
                          "type": "string",
                          "format": "uuid"
                        }
                      },
                      "alert_filters": {
                        "type": "array",
                        "description": "List of alert-filters attached to the rule",
                        "items": {
                          "type": "object",
                          "properties": {
                            "uuid": {
                              "type": "string",
                              "description": "The unique ressource ID"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the alert filter"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description of the alert filter"
                            },
                            "exclusion_pattern": {
                              "type": "string",
                              "description": "The STIX observation expression that models the exclusion pattern"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The creation date of the alert filter",
                              "x-nullable": true
                            },
                            "created_by": {
                              "type": "string",
                              "description": "The profile who created the alert filter"
                            },
                            "created_by_type": {
                              "type": "string",
                              "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                            },
                            "expires_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The expiration date of the alert filter",
                              "x-nullable": true
                            },
                            "status": {
                              "description": "Status of the Alert Filter (active or expired)",
                              "type": "string",
                              "enum": [
                                "active",
                                "expired"
                              ]
                            }
                          },
                          "required": [
                            "created_at",
                            "created_by",
                            "created_by_type",
                            "exclusion_pattern",
                            "name",
                            "status",
                            "uuid"
                          ]
                        }
                      },
                      "exclude_assets": {
                        "type": "boolean",
                        "description": "Are the listed assets excluded or included"
                      },
                      "exclude_entities": {
                        "type": "boolean",
                        "description": "Are the listed entities excluded or included"
                      }
                    },
                    "required": [
                      "all_assets",
                      "all_entities",
                      "enabled",
                      "uuid"
                    ]
                  }
                }
              },
              "required": [
                "name",
                "type",
                "uuid"
              ]
            }
          }
        },
        "required": [
          "has_more"
        ]
      },
      "GenerationModeListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The unique ressource ID"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "name of the generation mode"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "description of the generation mode"
                }
              },
              "required": [
                "created_at",
                "name",
                "updated_at",
                "uuid"
              ]
            }
          }
        }
      },
      "GenerationModeSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique ressource ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "the creation date of the ressource"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "the update date of the ressource"
          },
          "name": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100,
            "description": "name of the generation mode"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "description of the generation mode"
          }
        },
        "required": [
          "created_at",
          "name",
          "updated_at",
          "uuid"
        ]
      },
      "CategoryListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Alert category uuid"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "Alert category name"
                }
              },
              "required": [
                "name",
                "uuid"
              ]
            }
          }
        }
      },
      "AlertTypeListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Alert type uuid"
                },
                "category_uuid": {
                  "type": "string",
                  "description": "Alert type category uuid"
                },
                "category_name": {
                  "type": "string",
                  "description": "Alert type category name"
                },
                "value": {
                  "type": "string",
                  "description": "Alert type name "
                },
                "detail": {
                  "type": "string",
                  "description": "Alert type detail"
                },
                "description": {
                  "type": "string",
                  "description": "Alert type description"
                }
              },
              "required": [
                "category_name",
                "category_uuid",
                "uuid",
                "value"
              ]
            }
          }
        }
      },
      "CountermeasureListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The unique ressource ID"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the creation date of the ressource"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the update date of the ressource"
                },
                "entity_uuid": {
                  "type": "string",
                  "description": "The entity that these countermeasures apply on"
                },
                "rule_definition_uuid": {
                  "type": "string",
                  "description": "The rule these countermeasures apply on"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the set of countermeasures"
                },
                "description": {
                  "type": "string",
                  "description": "Detailed description of the countermeasures"
                },
                "start_on": {
                  "type": "string",
                  "default": "",
                  "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                },
                "countermeasures": {
                  "type": "array",
                  "description": "Action steps of the countermeasure",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100,
                        "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "Description of the action step"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "textual",
                          "openc2",
                          "powershell",
                          "sh"
                        ],
                        "description": "Type of the action"
                      },
                      "value": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                      },
                      "object": {
                        "type": "object",
                        "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used",
                        "additionalProperties": {}
                      },
                      "next_steps": {
                        "type": "array",
                        "description": "The set of named next action step(s) to execute after completion of this action step",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "type"
                    ]
                  }
                },
                "relevance": {
                  "type": "integer",
                  "description": "Relevance of the countermeasure"
                },
                "duration": {
                  "type": "string",
                  "description": "Duration required to apply the coountermeasure"
                },
                "alert_type_uuid": {
                  "type": "string",
                  "description": "The alert type uuid these countermeasures apply on"
                },
                "alert_type": {
                  "description": "alert type of the countermeasure",
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "name of the type"
                    },
                    "detail": {
                      "type": "string",
                      "description": "description of the type"
                    }
                  }
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "organization the countermeasures belong to"
                }
              },
              "required": [
                "created_at",
                "updated_at",
                "uuid"
              ]
            }
          }
        }
      },
      "CountermeasuresSchema": {
        "type": "object",
        "properties": {
          "entity_uuid": {
            "type": "string",
            "description": "The entity that these countermeasures apply on"
          },
          "rule_definition_uuid": {
            "type": "string",
            "description": "The rule these countermeasures apply on"
          },
          "alert_type_uuid": {
            "type": "string",
            "description": "The alert type these countermeasures apply on"
          },
          "name": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100,
            "description": "Name of the set of countermeasures"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "Detailed description of the countermeasures"
          },
          "start_on": {
            "type": "string",
            "default": "",
            "maxLength": 100,
            "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
          },
          "countermeasures": {
            "type": "array",
            "description": "Action steps of the countermeasure",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100,
                  "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "Description of the action step"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "textual",
                    "openc2",
                    "powershell",
                    "sh"
                  ],
                  "description": "Type of the action"
                },
                "value": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                },
                "object": {
                  "type": "object",
                  "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used",
                  "additionalProperties": {}
                },
                "next_steps": {
                  "type": "array",
                  "description": "The set of named next action step(s) to execute after completion of this action step",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "name",
                "type"
              ]
            }
          },
          "relevance": {
            "type": "integer",
            "minimum": 0,
            "description": "Relevance of the countermeasure"
          },
          "duration": {
            "type": "string",
            "maxLength": 100,
            "description": "Duration required to apply the countermeasure"
          },
          "organization_uuid": {
            "type": "string",
            "description": "The organization these countermeasures apply on"
          },
          "uuid": {
            "type": "string",
            "description": "The unique ressource ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "the creation date of the ressource"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "the update date of the ressource"
          }
        },
        "required": [
          "countermeasures",
          "created_at",
          "name",
          "relevance",
          "updated_at",
          "uuid"
        ]
      },
      "ConnectorsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "The list of connectors matching the criteria",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The identifier of the connector"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the connector"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The identifier of the organization of the connector"
                },
                "entity_uuid": {
                  "type": "string",
                  "description": "The identifier of the entity of the connector",
                  "deprecated": true
                },
                "format_uuid": {
                  "type": "string",
                  "description": "The identifier of the format of the connector"
                },
                "connector_key": {
                  "type": "string",
                  "description": "The key to assocaited to the sent events"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the connector"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the client that created the connector"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The nature of the client that created the connector"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The modification date of the connector"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The identifier of the client that updated the connector"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The nature of the client that updated the connector"
                },
                "entity": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 100,
                      "description": "The name of the entity"
                    },
                    "entity_id": {
                      "type": "string",
                      "description": "The Id of the entity"
                    },
                    "alerts_generation": {
                      "type": "string",
                      "description": "The uuid of the generation mode"
                    },
                    "description": {
                      "type": "string",
                      "maxLength": 1000,
                      "description": "The descrition of the entity"
                    },
                    "organization_uuid": {
                      "type": "string"
                    },
                    "uuid": {
                      "type": "string"
                    },
                    "number_of_connectors": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "alerts_generation",
                    "organization_uuid",
                    "entity_id",
                    "name",
                    "uuid"
                  ]
                },
                "configured": {
                  "type": "boolean",
                  "description": "Is a that connector configured via the connector settings API?"
                },
                "is_custom_format": {
                  "type": "boolean",
                  "description": "The connector's format is a custom format"
                },
                "connector_configuration_uuid": {
                  "type": "string",
                  "description": "The identifier of the connector's connector configuration in case it's a pulling connector"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the connector"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "The number of connectors matching the criteria"
          }
        }
      },
      "ConnectorSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The identifier of the connector"
          },
          "name": {
            "type": "string",
            "description": "The name of the connector"
          },
          "organization_uuid": {
            "type": "string",
            "description": "The identifier of the organization of the connector"
          },
          "entity_uuid": {
            "type": "string",
            "description": "The identifier of the entity of the connector",
            "deprecated": true
          },
          "format_uuid": {
            "type": "string",
            "description": "The identifier of the format of the connector"
          },
          "connector_key": {
            "type": "string",
            "description": "The key to assocaited to the sent events"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the connector"
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the client that created the connector"
          },
          "created_by_type": {
            "type": "string",
            "description": "The nature of the client that created the connector"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modification date of the connector"
          },
          "updated_by": {
            "type": "string",
            "description": "The identifier of the client that updated the connector"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The nature of the client that updated the connector"
          },
          "entity": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 5,
                "maxLength": 100,
                "description": "The name of the entity"
              },
              "entity_id": {
                "type": "string",
                "description": "The Id of the entity"
              },
              "alerts_generation": {
                "type": "string",
                "description": "The uuid of the generation mode"
              },
              "description": {
                "type": "string",
                "maxLength": 1000,
                "description": "The descrition of the entity"
              },
              "organization_uuid": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              },
              "number_of_connectors": {
                "type": "integer"
              }
            },
            "required": [
              "alerts_generation",
              "organization_uuid",
              "entity_id",
              "name",
              "uuid"
            ]
          },
          "configured": {
            "type": "boolean",
            "description": "Is a that connector configured via the connector settings API?"
          },
          "is_custom_format": {
            "type": "boolean",
            "description": "The connector's format is a custom format"
          },
          "connector_configuration_uuid": {
            "type": "string",
            "description": "The identifier of the connector's connector configuration in case it's a pulling connector"
          },
          "status": {
            "type": "string",
            "description": "The status of the connector"
          }
        }
      },
      "ConnectorSettingOffice365ConsentRedirectUri": {
        "type": "object",
        "properties": {
          "redirect_uri": {
            "type": "string",
            "description": "The redirect uri to use"
          },
          "tenant_id": {
            "type": "string",
            "description": "The tenant id of the user"
          }
        }
      },
      "ATTACKDatasourcesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of MITRE ATT&CK datasources",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier of the datasource"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the datasource"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of datasources"
          }
        }
      },
      "ConfiguredConnectorFormatSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of configured connector formats uuids",
            "items": {
              "type": "object",
              "properties": {
                "format_uuid": {
                  "type": "string",
                  "description": "Unique identifier of the format"
                },
                "organization_uuids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Identifier of the organization the format is used in"
                  }
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of configured connector formats"
          }
        }
      },
      "list_of_optimization_rules_schema": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_optimization_rule_public_schema",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector_optimization_rule_public_schema": {
        "required": [
          "action",
          "created_at",
          "created_by",
          "created_by_type",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "connector_uuid": {
            "type": "string"
          },
          "format_uuid": {
            "type": "string"
          },
          "organization_uuid": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/optimization_rule_filter",
              "type": "object"
            }
          },
          "action": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_by_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "optimization_rule_filter": {
        "required": [
          "field",
          "operator"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "operator": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "list_of_optimization_actions_schema": {
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/optimization_action_description",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "optimization_action_description": {
        "required": [
          "action",
          "description",
          "name"
        ],
        "properties": {
          "action": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSearchSimilarListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "Similar event search terms",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer",
            "description": "The number of similar event search terms"
          }
        }
      },
      "EventSearchJobListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "The list of event search jobs",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Job identifier"
                },
                "status": {
                  "type": "integer",
                  "description": "Job status (0:not started, 1:in-progress, 2:done, 3:canceled)"
                },
                "total": {
                  "type": "integer",
                  "description": "An estimation of the number of events matching the criteria"
                },
                "retrieved": {
                  "type": "integer",
                  "description": "The number of events that are currently available"
                },
                "term": {
                  "type": "string",
                  "description": "Job event search terms"
                },
                "term_lang": {
                  "type": "string",
                  "description": "Language of the search terms"
                },
                "filters": {
                  "type": "array",
                  "description": "List of filters to apply",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Field to filter"
                      },
                      "value": {
                        "description": "Value that the field should have"
                      },
                      "operator": {
                        "type": "string",
                        "enum": [
                          "=",
                          "startswith",
                          "endswith",
                          "contains",
                          "exists",
                          ">",
                          ">=",
                          "<",
                          "<="
                        ],
                        "description": "Filter operator"
                      },
                      "excluded": {
                        "type": "boolean",
                        "description": "Should matches be excluded ?"
                      },
                      "disabled": {
                        "type": "boolean",
                        "description": "Is this filter disabled ?"
                      }
                    },
                    "required": [
                      "field",
                      "operator"
                    ]
                  }
                },
                "created_by": {
                  "type": "string",
                  "description": "The profile that created the job"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The profile type that created the job"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the search job"
                },
                "started_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The start date of the search job"
                },
                "canceled_by": {
                  "type": "string",
                  "description": "The profile that canceled the job"
                },
                "canceled_by_type": {
                  "type": "string",
                  "description": "The profile type that canceled the job"
                },
                "canceled_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The cancel date of the search job"
                },
                "ended_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The end date of the search job"
                },
                "earliest_time": {
                  "type": "string",
                  "description": "The earliest time of the time range of the search"
                },
                "latest_time": {
                  "type": "string",
                  "description": "The latest time of the time range of the search"
                },
                "results_ttl": {
                  "type": "integer",
                  "description": "The search results' time-to-live"
                },
                "expiration_date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date at which the search job will expire"
                },
                "expired": {
                  "type": "boolean",
                  "description": "The event search job expiration status"
                },
                "short_histogram": {
                  "type": "array",
                  "description": "Short histogram",
                  "items": {
                    "type": "object",
                    "properties": {
                      "length": {
                        "type": "number",
                        "description": "Length of the bin in seconds"
                      },
                      "earliest_time": {
                        "type": "number",
                        "description": "Timestamp of the earliest event that can be stored in the bin"
                      },
                      "total": {
                        "type": "integer",
                        "description": "Number of events in the bin"
                      },
                      "alerts": {
                        "type": "integer",
                        "description": "Number of alert-related events in the bin"
                      },
                      "cases": {
                        "type": "integer",
                        "description": "Number of case-related events in the bin"
                      }
                    }
                  }
                },
                "view_uuid": {
                  "type": "string",
                  "description": "The identifier of the view of the job"
                },
                "organization_uuids": {
                  "type": "array",
                  "description": "Organizations impacted by the search",
                  "items": {
                    "type": "string"
                  }
                },
                "only_eternal": {
                  "type": "boolean",
                  "description": "Only search in eternal events"
                },
                "max_last_events": {
                  "type": "integer",
                  "description": "The optional maximum number of events the job returns"
                },
                "date_field": {
                  "type": "string",
                  "description": "Optional name of field used for the event's date boundaries, @timestamp is used by default"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "The number of event search jobs matching the criteria"
          }
        }
      },
      "EventSearchJobInfoSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Job identifier"
          },
          "status": {
            "type": "integer",
            "description": "Job status (0:not started, 1:in-progress, 2:done, 3:canceled)"
          },
          "total": {
            "type": "integer",
            "description": "An estimation of the number of events matching the criteria"
          },
          "retrieved": {
            "type": "integer",
            "description": "The number of events that are currently available"
          },
          "term": {
            "type": "string",
            "description": "Job event search terms"
          },
          "term_lang": {
            "type": "string",
            "description": "Language of the search terms"
          },
          "filters": {
            "type": "array",
            "description": "List of filters to apply",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field to filter"
                },
                "value": {
                  "description": "Value that the field should have"
                },
                "operator": {
                  "type": "string",
                  "enum": [
                    "=",
                    "startswith",
                    "endswith",
                    "contains",
                    "exists",
                    ">",
                    ">=",
                    "<",
                    "<="
                  ],
                  "description": "Filter operator"
                },
                "excluded": {
                  "type": "boolean",
                  "description": "Should matches be excluded ?"
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Is this filter disabled ?"
                }
              },
              "required": [
                "field",
                "operator"
              ]
            }
          },
          "created_by": {
            "type": "string",
            "description": "The profile that created the job"
          },
          "created_by_type": {
            "type": "string",
            "description": "The profile type that created the job"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the search job"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the search job"
          },
          "canceled_by": {
            "type": "string",
            "description": "The profile that canceled the job"
          },
          "canceled_by_type": {
            "type": "string",
            "description": "The profile type that canceled the job"
          },
          "canceled_at": {
            "type": "string",
            "format": "date-time",
            "description": "The cancel date of the search job"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the search job"
          },
          "earliest_time": {
            "type": "string",
            "description": "The earliest time of the time range of the search"
          },
          "latest_time": {
            "type": "string",
            "description": "The latest time of the time range of the search"
          },
          "results_ttl": {
            "type": "integer",
            "description": "The search results' time-to-live"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date at which the search job will expire"
          },
          "expired": {
            "type": "boolean",
            "description": "The event search job expiration status"
          },
          "short_histogram": {
            "type": "array",
            "description": "Short histogram",
            "items": {
              "type": "object",
              "properties": {
                "length": {
                  "type": "number",
                  "description": "Length of the bin in seconds"
                },
                "earliest_time": {
                  "type": "number",
                  "description": "Timestamp of the earliest event that can be stored in the bin"
                },
                "total": {
                  "type": "integer",
                  "description": "Number of events in the bin"
                },
                "alerts": {
                  "type": "integer",
                  "description": "Number of alert-related events in the bin"
                },
                "cases": {
                  "type": "integer",
                  "description": "Number of case-related events in the bin"
                }
              }
            }
          },
          "view_uuid": {
            "type": "string",
            "description": "The identifier of the view of the job"
          },
          "organization_uuids": {
            "type": "array",
            "description": "Organizations impacted by the search",
            "items": {
              "type": "string"
            }
          },
          "only_eternal": {
            "type": "boolean",
            "description": "Only search in eternal events"
          },
          "max_last_events": {
            "type": "integer",
            "description": "The optional maximum number of events the job returns"
          },
          "date_field": {
            "type": "string",
            "description": "Optional name of field used for the event's date boundaries, @timestamp is used by default"
          }
        }
      },
      "EventsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "The list of events",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "total": {
            "type": "integer",
            "description": "An estimation of the number of events matching the criteria (by default, limited to the last 24 hours and up to 10000)"
          },
          "paging_token": {
            "type": "string",
            "description": "Token used to request next page of results"
          }
        }
      },
      "HistogramsSchema": {
        "type": "object",
        "properties": {
          "short": {
            "type": "array",
            "description": "Short histogram",
            "items": {
              "type": "object",
              "properties": {
                "length": {
                  "type": "number",
                  "description": "Length of the bin in seconds"
                },
                "earliest_time": {
                  "type": "number",
                  "description": "Timestamp of the earliest event that can be stored in the bin"
                },
                "total": {
                  "type": "integer",
                  "description": "Number of events in the bin"
                },
                "alerts": {
                  "type": "integer",
                  "description": "Number of alert-related events in the bin"
                },
                "cases": {
                  "type": "integer",
                  "description": "Number of case-related events in the bin"
                }
              }
            }
          },
          "large": {
            "type": "array",
            "description": "Large histogram",
            "items": {
              "type": "object",
              "properties": {
                "length": {
                  "type": "number",
                  "description": "Length of the bin in seconds"
                },
                "earliest_time": {
                  "type": "number",
                  "description": "Timestamp of the earliest event that can be stored in the bin"
                },
                "total": {
                  "type": "integer",
                  "description": "Number of events in the bin"
                },
                "alerts": {
                  "type": "integer",
                  "description": "Number of alert-related events in the bin"
                },
                "cases": {
                  "type": "integer",
                  "description": "Number of case-related events in the bin"
                }
              }
            }
          }
        }
      },
      "EventSearchJobFieldsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "The list of fields found in the event search results",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the field"
                },
                "display_name": {
                  "type": "string",
                  "description": "Display name of the field"
                },
                "description": {
                  "type": "string",
                  "description": "Short description of the field"
                },
                "value_type": {
                  "type": "string",
                  "description": "Type of the field values"
                },
                "most_common_values": {
                  "type": "array",
                  "description": "The most common values",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Value of the field"
                      },
                      "value": {
                        "type": "number",
                        "description": "Percent of occurence"
                      }
                    }
                  }
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of fields"
          },
          "retrieved": {
            "type": "integer",
            "description": "The number of events over which fields were computed"
          }
        }
      },
      "RulesCountersSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of rules"
          },
          "verified": {
            "type": "integer",
            "description": "The total number of verified rules"
          },
          "enabled": {
            "type": "integer",
            "description": "The total number of enabled rules"
          },
          "per_effort": {
            "type": "object",
            "description": "Statistics per effort",
            "additionalProperties": {}
          }
        },
        "required": [
          "enabled",
          "per_effort",
          "total",
          "verified"
        ]
      },
      "IndicatorCounterSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of indicator covered by organization's enabled CTI rules"
          }
        },
        "required": [
          "total"
        ]
      },
      "ViewsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "The list of views matching the criteria",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The identifier of the view"
                },
                "short_id": {
                  "type": "string",
                  "description": "The short identifier of the view"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the view"
                },
                "date_start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The start date for events retrieved from archive"
                },
                "date_end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The end date for events retrieved from archive"
                },
                "archive": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "The identifier of the archive"
                    },
                    "short_id": {
                      "type": "string",
                      "description": "The short identifier of the archive"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the archive"
                    },
                    "organization_uuid": {
                      "type": "string",
                      "description": "The identifier of the organization of the archive"
                    },
                    "provider": {
                      "type": "string",
                      "description": "The provider to use to store snapshots"
                    },
                    "nb_snapshots": {
                      "type": "string",
                      "description": "The number of snapshots contained by the archive"
                    },
                    "settings": {
                      "description": "The settings to generate and store snapshots"
                    },
                    "status_uuid": {
                      "type": "string",
                      "description": "The identifier of the status of the archive"
                    },
                    "status_reason": {
                      "type": "string",
                      "description": "The reason of the status of the archive"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The creation date of the archive"
                    },
                    "created_by": {
                      "type": "string",
                      "description": "The identifier of the client which create the archive"
                    },
                    "created_by_type": {
                      "type": "string",
                      "description": "The type of the client which create the archive"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The modification date of the archive"
                    },
                    "updated_by": {
                      "type": "string",
                      "description": "The identifier of the client which update the archive"
                    },
                    "updated_by_type": {
                      "type": "string",
                      "description": "The type of the client which update the archive"
                    },
                    "is_encrypted": {
                      "type": "boolean",
                      "description": "Is the archive encrypted"
                    }
                  }
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The identifier of the organization of the view"
                },
                "nb_events": {
                  "type": "string",
                  "description": "The number of snapshots contained by the view"
                },
                "total_segments": {
                  "type": "integer",
                  "description": "The total number of segments inside the view"
                },
                "processed_segments": {
                  "type": "integer",
                  "description": "The number of segments that were already indexed"
                },
                "errors": {
                  "type": "array",
                  "description": "List of errors that occured while processing the view",
                  "items": {
                    "type": "object",
                    "additionalProperties": {}
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the view"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the client which create the view"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the client which create the view"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The modification date of the view"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The identifier of the client which update the view"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The type of the client which update the view"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "The number of views matching the criteria"
          }
        }
      },
      "ViewSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The identifier of the view"
          },
          "short_id": {
            "type": "string",
            "description": "The short identifier of the view"
          },
          "name": {
            "type": "string",
            "description": "The name of the view"
          },
          "date_start": {
            "type": "string",
            "format": "date-time",
            "description": "The start date for events retrieved from archive"
          },
          "date_end": {
            "type": "string",
            "format": "date-time",
            "description": "The end date for events retrieved from archive"
          },
          "archive": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "The identifier of the archive"
              },
              "short_id": {
                "type": "string",
                "description": "The short identifier of the archive"
              },
              "name": {
                "type": "string",
                "description": "The name of the archive"
              },
              "organization_uuid": {
                "type": "string",
                "description": "The identifier of the organization of the archive"
              },
              "provider": {
                "type": "string",
                "description": "The provider to use to store snapshots"
              },
              "nb_snapshots": {
                "type": "string",
                "description": "The number of snapshots contained by the archive"
              },
              "settings": {
                "description": "The settings to generate and store snapshots"
              },
              "status_uuid": {
                "type": "string",
                "description": "The identifier of the status of the archive"
              },
              "status_reason": {
                "type": "string",
                "description": "The reason of the status of the archive"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The creation date of the archive"
              },
              "created_by": {
                "type": "string",
                "description": "The identifier of the client which create the archive"
              },
              "created_by_type": {
                "type": "string",
                "description": "The type of the client which create the archive"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "The modification date of the archive"
              },
              "updated_by": {
                "type": "string",
                "description": "The identifier of the client which update the archive"
              },
              "updated_by_type": {
                "type": "string",
                "description": "The type of the client which update the archive"
              },
              "is_encrypted": {
                "type": "boolean",
                "description": "Is the archive encrypted"
              }
            }
          },
          "organization_uuid": {
            "type": "string",
            "description": "The identifier of the organization of the view"
          },
          "nb_events": {
            "type": "string",
            "description": "The number of snapshots contained by the view"
          },
          "total_segments": {
            "type": "integer",
            "description": "The total number of segments inside the view"
          },
          "processed_segments": {
            "type": "integer",
            "description": "The number of segments that were already indexed"
          },
          "errors": {
            "type": "array",
            "description": "List of errors that occured while processing the view",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the view"
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the client which create the view"
          },
          "created_by_type": {
            "type": "string",
            "description": "The type of the client which create the view"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modification date of the view"
          },
          "updated_by": {
            "type": "string",
            "description": "The identifier of the client which update the view"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the client which update the view"
          }
        }
      },
      "RuleTagsSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the tag"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the tag"
                }
              },
              "required": [
                "name",
                "uuid"
              ]
            }
          }
        }
      },
      "MergedRulesSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the rule"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Is the rule enabled?",
                  "x-nullable": true
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The organization uuid if the rule is attached to one",
                  "x-nullable": true
                },
                "parameters": {
                  "type": "array",
                  "description": "The parameters of the rule",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "the identifier of the parameter"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the parameter"
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the parameter"
                      },
                      "default": {
                        "type": "string",
                        "description": "The default value of the parameter"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "the description of the parameter"
                      }
                    },
                    "required": [
                      "default",
                      "description",
                      "name",
                      "uuid",
                      "value"
                    ]
                  }
                },
                "all_entities": {
                  "type": "boolean",
                  "description": "Should the rule be applied on all entities?",
                  "x-nullable": true
                },
                "entities": {
                  "type": "array",
                  "description": "The list of entities the rule should be applied on",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the entity"
                      },
                      "entity_id": {
                        "type": "string",
                        "description": "The Id of the entity"
                      },
                      "alerts_generation": {
                        "type": "string",
                        "description": "The uuid of the generation mode"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The descrition of the entity"
                      },
                      "organization_uuid": {
                        "type": "string"
                      },
                      "uuid": {
                        "type": "string"
                      },
                      "number_of_connectors": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "alerts_generation",
                      "organization_uuid",
                      "entity_id",
                      "name",
                      "uuid"
                    ]
                  }
                },
                "all_assets": {
                  "type": "boolean",
                  "description": "Should the rule be applied on all assets?",
                  "x-nullable": true
                },
                "assets": {
                  "type": "array",
                  "description": "The list of assets identifiers the rule should be applied on",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "last_compilation_success": {
                  "type": "boolean",
                  "description": "Is the last compilation succeed?",
                  "x-nullable": true
                },
                "last_compilation_message": {
                  "type": "string",
                  "description": "The message of the last compilation",
                  "x-nullable": true
                },
                "last_compilation_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last compilation date of the rule",
                  "x-nullable": true
                },
                "exclude_assets": {
                  "type": "boolean",
                  "description": "Are the listed assets excluded or included"
                },
                "exclude_entities": {
                  "type": "boolean",
                  "description": "Are the listed entities excluded or included"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the rule"
                },
                "type": {
                  "description": "The type of the rule",
                  "type": "string",
                  "enum": [
                    "cti",
                    "stix",
                    "sigma",
                    "anomaly"
                  ]
                },
                "private": {
                  "type": "boolean",
                  "description": "Is the rule available only for the organization?"
                },
                "is_private": {
                  "type": "boolean",
                  "description": "Is the rule available only for the organization?"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "The descrition of the rule"
                },
                "payload": {
                  "type": "string",
                  "description": "The payload of the rule"
                },
                "severity": {
                  "type": "integer",
                  "description": "The severity of the rule"
                },
                "effort": {
                  "type": "integer",
                  "description": "The effort of the rule"
                },
                "alert_type": {
                  "description": "The alert type associated to the rule",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Alert type uuid"
                    },
                    "category_uuid": {
                      "type": "string",
                      "description": "Alert type category uuid"
                    },
                    "category_name": {
                      "type": "string",
                      "description": "Alert type category name"
                    },
                    "value": {
                      "type": "string",
                      "description": "Alert type name "
                    },
                    "detail": {
                      "type": "string",
                      "description": "Alert type detail"
                    },
                    "description": {
                      "type": "string",
                      "description": "Alert type description"
                    }
                  },
                  "required": [
                    "category_name",
                    "category_uuid",
                    "uuid",
                    "value"
                  ]
                },
                "alert_category": {
                  "description": "The alert category associated to the rule",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Alert category uuid"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 5,
                      "maxLength": 100,
                      "description": "Alert category name"
                    }
                  },
                  "required": [
                    "name",
                    "uuid"
                  ]
                },
                "tags": {
                  "type": "array",
                  "description": "The list of tags associated to the rule",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "the identifier of the tag"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the tag"
                      }
                    },
                    "required": [
                      "name",
                      "uuid"
                    ]
                  }
                },
                "source": {
                  "type": "string",
                  "description": "The source of the rule"
                },
                "verified": {
                  "type": "boolean",
                  "description": "Is the rule verified?"
                },
                "related_object_refs": {
                  "type": "array",
                  "description": "The list of reference of objects related to the rule",
                  "items": {
                    "type": "string"
                  }
                },
                "datasources": {
                  "type": "array",
                  "description": "The list of datasources of the rule",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the datasource"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the datasource"
                      }
                    }
                  }
                },
                "event_fields": {
                  "type": "array",
                  "description": "The list of fields to show when displaying a matched event",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string",
                        "description": "Field path"
                      },
                      "description": {
                        "type": "string",
                        "description": "Field description"
                      }
                    },
                    "required": [
                      "description",
                      "field"
                    ]
                  }
                },
                "similarity_strategy": {
                  "type": "array",
                  "description": "Similarity Strategy used by this rule",
                  "items": {}
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the rule",
                  "x-nullable": true
                },
                "created_by": {
                  "type": "string",
                  "description": "The profile who created the rule"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The modification date of the rule",
                  "x-nullable": true
                },
                "updated_by": {
                  "type": "string",
                  "description": "The profile who updated the rule",
                  "x-nullable": true
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'",
                  "x-nullable": true
                },
                "goal": {
                  "type": "string",
                  "description": "A high-level description explaining the contribution of the rule",
                  "x-nullable": true
                },
                "false_positives": {
                  "type": "string",
                  "description": "A possible legitimate usage which can raise a false alert",
                  "x-nullable": true
                },
                "references": {
                  "type": "string",
                  "description": "Details on what led to write this rule"
                },
                "available_for_suborganizations": {
                  "type": "boolean",
                  "default": false,
                  "description": "Is the rule available for suborganizations (if applicable)",
                  "x-nullable": true
                },
                "instance_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the instance of the rule",
                  "x-nullable": true
                }
              },
              "required": [
                "alert_category",
                "alert_type",
                "all_assets",
                "all_entities",
                "created_at",
                "created_by",
                "created_by_type",
                "datasources",
                "effort",
                "enabled",
                "event_fields",
                "instance_uuid",
                "last_compilation_at",
                "last_compilation_message",
                "last_compilation_success",
                "name",
                "parameters",
                "related_object_refs",
                "severity",
                "source",
                "type",
                "updated_at",
                "uuid",
                "verified"
              ]
            }
          }
        }
      },
      "MergedRuleSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "the identifier of the rule"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the rule enabled?",
            "x-nullable": true
          },
          "organization_uuid": {
            "type": "string",
            "description": "The organization uuid if the rule is attached to one",
            "x-nullable": true
          },
          "parameters": {
            "type": "array",
            "description": "The parameters of the rule",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the parameter"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the parameter"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the parameter"
                },
                "default": {
                  "type": "string",
                  "description": "The default value of the parameter"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "the description of the parameter"
                }
              },
              "required": [
                "default",
                "description",
                "name",
                "uuid",
                "value"
              ]
            }
          },
          "all_entities": {
            "type": "boolean",
            "description": "Should the rule be applied on all entities?",
            "x-nullable": true
          },
          "entities": {
            "type": "array",
            "description": "The list of entities the rule should be applied on",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the entity"
                },
                "entity_id": {
                  "type": "string",
                  "description": "The Id of the entity"
                },
                "alerts_generation": {
                  "type": "string",
                  "description": "The uuid of the generation mode"
                },
                "description": {
                  "type": "string",
                  "maxLength": 1000,
                  "description": "The descrition of the entity"
                },
                "organization_uuid": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                },
                "number_of_connectors": {
                  "type": "integer"
                }
              },
              "required": [
                "alerts_generation",
                "organization_uuid",
                "entity_id",
                "name",
                "uuid"
              ]
            }
          },
          "all_assets": {
            "type": "boolean",
            "description": "Should the rule be applied on all assets?",
            "x-nullable": true
          },
          "assets": {
            "type": "array",
            "description": "The list of assets identifiers the rule should be applied on",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "last_compilation_success": {
            "type": "boolean",
            "description": "Is the last compilation succeed?",
            "x-nullable": true
          },
          "last_compilation_message": {
            "type": "string",
            "description": "The message of the last compilation",
            "x-nullable": true
          },
          "last_compilation_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last compilation date of the rule",
            "x-nullable": true
          },
          "exclude_assets": {
            "type": "boolean",
            "description": "Are the listed assets excluded or included"
          },
          "exclude_entities": {
            "type": "boolean",
            "description": "Are the listed entities excluded or included"
          },
          "name": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100,
            "description": "The name of the rule"
          },
          "type": {
            "description": "The type of the rule",
            "type": "string",
            "enum": [
              "cti",
              "stix",
              "sigma",
              "anomaly"
            ]
          },
          "private": {
            "type": "boolean",
            "description": "Is the rule available only for the organization?"
          },
          "is_private": {
            "type": "boolean",
            "description": "Is the rule available only for the organization?"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "description": "The descrition of the rule"
          },
          "payload": {
            "type": "string",
            "description": "The payload of the rule"
          },
          "severity": {
            "type": "integer",
            "description": "The severity of the rule"
          },
          "effort": {
            "type": "integer",
            "description": "The effort of the rule"
          },
          "alert_type": {
            "description": "The alert type associated to the rule",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Alert type uuid"
              },
              "category_uuid": {
                "type": "string",
                "description": "Alert type category uuid"
              },
              "category_name": {
                "type": "string",
                "description": "Alert type category name"
              },
              "value": {
                "type": "string",
                "description": "Alert type name "
              },
              "detail": {
                "type": "string",
                "description": "Alert type detail"
              },
              "description": {
                "type": "string",
                "description": "Alert type description"
              }
            },
            "required": [
              "category_name",
              "category_uuid",
              "uuid",
              "value"
            ]
          },
          "alert_category": {
            "description": "The alert category associated to the rule",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Alert category uuid"
              },
              "name": {
                "type": "string",
                "minLength": 5,
                "maxLength": 100,
                "description": "Alert category name"
              }
            },
            "required": [
              "name",
              "uuid"
            ]
          },
          "tags": {
            "type": "array",
            "description": "The list of tags associated to the rule",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the tag"
                },
                "name": {
                  "type": "string",
                  "minLength": 5,
                  "maxLength": 100,
                  "description": "The name of the tag"
                }
              },
              "required": [
                "name",
                "uuid"
              ]
            }
          },
          "source": {
            "type": "string",
            "description": "The source of the rule"
          },
          "verified": {
            "type": "boolean",
            "description": "Is the rule verified?"
          },
          "related_object_refs": {
            "type": "array",
            "description": "The list of reference of objects related to the rule",
            "items": {
              "type": "string"
            }
          },
          "datasources": {
            "type": "array",
            "description": "The list of datasources of the rule",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier of the datasource"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the datasource"
                }
              }
            }
          },
          "event_fields": {
            "type": "array",
            "description": "The list of fields to show when displaying a matched event",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field path"
                },
                "description": {
                  "type": "string",
                  "description": "Field description"
                }
              },
              "required": [
                "description",
                "field"
              ]
            }
          },
          "similarity_strategy": {
            "type": "array",
            "description": "Similarity Strategy used by this rule",
            "items": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the rule",
            "x-nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "The profile who created the rule"
          },
          "created_by_type": {
            "type": "string",
            "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modification date of the rule",
            "x-nullable": true
          },
          "updated_by": {
            "type": "string",
            "description": "The profile who updated the rule",
            "x-nullable": true
          },
          "updated_by_type": {
            "type": "string",
            "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'",
            "x-nullable": true
          },
          "goal": {
            "type": "string",
            "description": "A high-level description explaining the contribution of the rule",
            "x-nullable": true
          },
          "false_positives": {
            "type": "string",
            "description": "A possible legitimate usage which can raise a false alert",
            "x-nullable": true
          },
          "references": {
            "type": "string",
            "description": "Details on what led to write this rule"
          },
          "available_for_suborganizations": {
            "type": "boolean",
            "default": false,
            "description": "Is the rule available for suborganizations (if applicable)",
            "x-nullable": true
          },
          "instance_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "the identifier of the instance of the rule",
            "x-nullable": true
          }
        },
        "required": [
          "alert_category",
          "alert_type",
          "all_assets",
          "all_entities",
          "created_at",
          "created_by",
          "created_by_type",
          "datasources",
          "effort",
          "enabled",
          "event_fields",
          "instance_uuid",
          "last_compilation_at",
          "last_compilation_message",
          "last_compilation_success",
          "name",
          "parameters",
          "related_object_refs",
          "severity",
          "source",
          "type",
          "updated_at",
          "uuid",
          "verified"
        ]
      },
      "AlertFiltersSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The unique ressource ID"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the alert filter"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the alert filter"
                },
                "exclusion_pattern": {
                  "type": "string",
                  "description": "The STIX observation expression that models the exclusion pattern"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the alert filter",
                  "x-nullable": true
                },
                "created_by": {
                  "type": "string",
                  "description": "The profile who created the alert filter"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The expiration date of the alert filter",
                  "x-nullable": true
                },
                "status": {
                  "description": "Status of the Alert Filter (active or expired)",
                  "type": "string",
                  "enum": [
                    "active",
                    "expired"
                  ]
                }
              },
              "required": [
                "created_at",
                "created_by",
                "created_by_type",
                "exclusion_pattern",
                "name",
                "status",
                "uuid"
              ]
            }
          }
        }
      },
      "AlertFilterSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique ressource ID"
          },
          "name": {
            "type": "string",
            "description": "The name of the alert filter"
          },
          "description": {
            "type": "string",
            "description": "The description of the alert filter"
          },
          "exclusion_pattern": {
            "type": "string",
            "description": "The STIX observation expression that models the exclusion pattern"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the alert filter",
            "x-nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "The profile who created the alert filter"
          },
          "created_by_type": {
            "type": "string",
            "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the alert filter",
            "x-nullable": true
          },
          "status": {
            "description": "Status of the Alert Filter (active or expired)",
            "type": "string",
            "enum": [
              "active",
              "expired"
            ]
          }
        },
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "exclusion_pattern",
          "name",
          "status",
          "uuid"
        ]
      },
      "MatrixSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the rule"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Is the rule enabled?",
                  "x-nullable": true
                },
                "related_object_refs": {
                  "type": "array",
                  "description": "The list of reference of objects related to the rule",
                  "items": {
                    "type": "string"
                  }
                },
                "datasources": {
                  "type": "array",
                  "description": "The list of datasources of the rule",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the datasource"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the datasource"
                      }
                    }
                  }
                }
              },
              "required": [
                "datasources",
                "enabled",
                "related_object_refs",
                "uuid"
              ]
            }
          }
        }
      },
      "MatrixAttackNavigatorSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "object",
            "properties": {
              "attack": {
                "type": "string"
              },
              "layer": {
                "type": "string"
              },
              "navigator": {
                "type": "string"
              }
            },
            "required": [
              "attack",
              "layer",
              "navigator"
            ]
          },
          "domain": {
            "type": "string"
          },
          "techniques": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "techniqueID": {
                  "type": "string",
                  "description": "MITRE ID of the techniques"
                },
                "comment": {
                  "type": "string"
                }
              },
              "required": [
                "comment",
                "techniqueID"
              ]
            }
          }
        },
        "required": [
          "domain",
          "name"
        ]
      },
      "RuleSettingSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique ressource ID"
          },
          "effort_threshold_for_auto_activation": {
            "type": "integer",
            "description": "The effort threshold to enable automatically new rules from catalog"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the setting",
            "x-nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "The profile who created the setting"
          },
          "created_by_type": {
            "type": "string",
            "description": "The profile type who created the setting can be 'avatar', 'application', 'apikey'"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The modification date of the setting",
            "x-nullable": true
          },
          "updated_by": {
            "type": "string",
            "description": "The profile who updated the setting",
            "x-nullable": true
          },
          "updated_by_type": {
            "type": "string",
            "description": "The profile type who updated the setting can be 'rule', 'application', 'apikey'",
            "x-nullable": true
          },
          "organization_uuid": {
            "type": "string",
            "description": "The organization the setting belongs to",
            "x-nullable": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "effort_threshold_for_auto_activation",
          "updated_at",
          "uuid"
        ]
      },
      "RuleFormatsAssociationSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "connector_format_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the connector format"
                },
                "connector_format_name": {
                  "type": "string",
                  "description": "the name of the connector format"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "the organization uuid of the association row",
                  "x-nullable": true
                },
                "configured": {
                  "type": "boolean",
                  "description": "True if the organization has an connector using the connector format"
                },
                "connectors_organization_uuids": {
                  "type": "array",
                  "description": "The list of organization uuids where the compatible format is used in an connector",
                  "items": {
                    "type": "string"
                  },
                  "x-nullable": true
                }
              },
              "required": [
                "organization_uuid",
                "configured",
                "connector_format_name",
                "connector_format_uuid",
                "connectors_organization_uuids"
              ]
            }
          }
        }
      },
      "compilation_reports_list": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/compilation_report"
            }
          }
        },
        "type": "object"
      },
      "compilation_report": {
        "required": [
          "compilation_date",
          "rule_definition_uuid",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "rule_definition_uuid": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "in_progress"
          },
          "reason": {
            "type": "string"
          },
          "compilation_date": {
            "type": "string",
            "format": "date-time"
          },
          "last_indicator_updated_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "daily_c_t_i_schema": {
        "required": [
          "compiled_indicators",
          "failed_indicators"
        ],
        "properties": {
          "compiled_indicators": {
            "type": "integer"
          },
          "failed_indicators": {
            "type": "integer"
          },
          "not_compilable_indicators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/c_t_i_failures"
            }
          }
        },
        "type": "object"
      },
      "c_t_i_failures": {
        "required": [
          "id",
          "pattern",
          "reason"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Change2024061Schema": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "old": {
                    "description": "Old value"
                  },
                  "new": {
                    "description": "New value"
                  }
                }
              }
            }
          },
          "similarity_strategy": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "old": {
                    "description": "Old value"
                  },
                  "new": {
                    "description": "New value"
                  }
                }
              }
            }
          },
          "event_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "old": {
                    "description": "Old value"
                  },
                  "new": {
                    "description": "New value"
                  }
                }
              }
            }
          },
          "alert_filters": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "old": {
                    "description": "Old value"
                  },
                  "new": {
                    "description": "New value"
                  }
                }
              }
            }
          }
        }
      },
      "organizationListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of organizations"
          },
          "items": {
            "type": "array",
            "description": "A list of organizations",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the organization"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the organization"
                },
                "description": {
                  "type": "string",
                  "description": "A description of the organization"
                },
                "homepage_url": {
                  "type": "string",
                  "description": "An external URL referring to the organization"
                },
                "picture_mode": {
                  "type": "string",
                  "description": "The picture mode (custom or initials)",
                  "x-nullable": true
                },
                "members": {
                  "type": "array",
                  "description": "The list of the organization members",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The UUID of the member"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the member",
                        "x-nullable": true
                      },
                      "user": {
                        "description": "The user of the member",
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Unique identifier (UUID) of the user"
                          },
                          "firstname": {
                            "type": "string",
                            "description": "First name of the user",
                            "x-nullable": true
                          },
                          "lastname": {
                            "type": "string",
                            "description": "Last name of the user",
                            "x-nullable": true
                          },
                          "company_name": {
                            "type": "string",
                            "description": "Company name of the user",
                            "x-nullable": true
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the user (if available)",
                            "x-nullable": true
                          },
                          "picture_mode": {
                            "type": "string",
                            "description": "Picture mode of the user. Can be “custom” or “initials”.",
                            "x-nullable": true
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Creation date of the user"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "Last update of the user"
                          },
                          "invitation_v2": {
                            "description": "",
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email"
                            ],
                            "x-nullable": true
                          },
                          "mfa_enabled": {
                            "type": "boolean",
                            "description": "Is multi factor authentication (MFA) enabled for the user",
                            "x-nullable": true
                          },
                          "last_activity": {
                            "type": "string",
                            "format": "date-time",
                            "description": "User's last activity time",
                            "x-nullable": true
                          },
                          "auth_provider": {
                            "description": "Authentication method of the user",
                            "enum": [
                              "local",
                              "oidc"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "created_at",
                          "updated_at",
                          "uuid"
                        ]
                      },
                      "created_at": {
                        "type": "string",
                        "description": "The creation date of this member in its organization"
                      },
                      "updated_at": {
                        "type": "string",
                        "description": "The last modification date of the member"
                      },
                      "status": {
                        "description": "Indicate if the avatar is enabled or not",
                        "enum": [
                          "enabled",
                          "disabled"
                        ],
                        "type": "string"
                      },
                      "status_changed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Indicate when the avatar’s status was updated"
                      },
                      "role_uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier (UUID) of the built-in role, if any.",
                        "x-nullable": true
                      }
                    }
                  }
                },
                "total_members": {
                  "type": "integer",
                  "description": "The total number of member count",
                  "nullable": true
                },
                "created_at": {
                  "type": "string",
                  "description": "The creation date of the organization"
                },
                "updated_at": {
                  "type": "string",
                  "description": "The last modification date of the organization"
                },
                "created_by": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the creator of the organization"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the organization creator"
                },
                "creator": {
                  "description": "The organization creator",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The UUID of the organization creator"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the organization creator"
                    },
                    "description": {
                      "type": "string",
                      "description": "An optional description of the organization creator"
                    }
                  }
                },
                "company_size": {
                  "type": "string",
                  "description": "The size of the company"
                },
                "company_security_team_size": {
                  "type": "string",
                  "description": "The size of the security team"
                },
                "company_sector": {
                  "type": "string",
                  "description": "The sector of the company"
                },
                "company_location": {
                  "type": "string",
                  "description": "The location of the company"
                },
                "is_parent": {
                  "type": "boolean",
                  "description": "A flag that indicates if the organization can create and manage suborganizations"
                },
                "parent_organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID parent organization",
                  "x-nullable": true
                },
                "suborganizations": {
                  "description": "The suborganizations of the organization",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the organization"
                  }
                },
                "is_mfa_enforced": {
                  "type": "boolean",
                  "default": false,
                  "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
                },
                "session_timeout": {
                  "type": "integer",
                  "default": null,
                  "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
                  "x-nullable": true
                },
                "disable_inactive_avatars": {
                  "type": "boolean",
                  "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
                },
                "disabled": {
                  "type": "boolean",
                  "description": "Is the organization disabled?"
                },
                "plans": {
                  "type": "array",
                  "description": "Plans subscribed by the organization",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier of the plan"
                      }
                    }
                  }
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Features accessible through the plan subscribed by the organization",
                    "x-nullable": true
                  }
                },
                "computed_properties": {
                  "type": "object",
                  "additionalProperties": {},
                  "x-nullable": true
                }
              },
              "required": [
                "description",
                "disable_inactive_avatars",
                "disabled",
                "name"
              ]
            }
          }
        }
      },
      "organizationSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the organization"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization"
          },
          "description": {
            "type": "string",
            "description": "A description of the organization"
          },
          "homepage_url": {
            "type": "string",
            "description": "An external URL referring to the organization"
          },
          "picture_mode": {
            "type": "string",
            "description": "The picture mode (custom or initials)",
            "x-nullable": true
          },
          "members": {
            "type": "array",
            "description": "The list of the organization members",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the member"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "x-nullable": true
                },
                "user": {
                  "description": "The user of the member",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Unique identifier (UUID) of the user"
                    },
                    "firstname": {
                      "type": "string",
                      "description": "First name of the user",
                      "x-nullable": true
                    },
                    "lastname": {
                      "type": "string",
                      "description": "Last name of the user",
                      "x-nullable": true
                    },
                    "company_name": {
                      "type": "string",
                      "description": "Company name of the user",
                      "x-nullable": true
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the user (if available)",
                      "x-nullable": true
                    },
                    "picture_mode": {
                      "type": "string",
                      "description": "Picture mode of the user. Can be “custom” or “initials”.",
                      "x-nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Creation date of the user"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Last update of the user"
                    },
                    "invitation_v2": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "x-nullable": true
                    },
                    "mfa_enabled": {
                      "type": "boolean",
                      "description": "Is multi factor authentication (MFA) enabled for the user",
                      "x-nullable": true
                    },
                    "last_activity": {
                      "type": "string",
                      "format": "date-time",
                      "description": "User's last activity time",
                      "x-nullable": true
                    },
                    "auth_provider": {
                      "description": "Authentication method of the user",
                      "enum": [
                        "local",
                        "oidc"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "created_at",
                    "updated_at",
                    "uuid"
                  ]
                },
                "created_at": {
                  "type": "string",
                  "description": "The creation date of this member in its organization"
                },
                "updated_at": {
                  "type": "string",
                  "description": "The last modification date of the member"
                },
                "status": {
                  "description": "Indicate if the avatar is enabled or not",
                  "enum": [
                    "enabled",
                    "disabled"
                  ],
                  "type": "string"
                },
                "status_changed_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Indicate when the avatar’s status was updated"
                },
                "role_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier (UUID) of the built-in role, if any.",
                  "x-nullable": true
                }
              }
            }
          },
          "total_members": {
            "type": "integer",
            "description": "The total number of member count",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of the organization"
          },
          "updated_at": {
            "type": "string",
            "description": "The last modification date of the organization"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the creator of the organization"
          },
          "created_by_type": {
            "type": "string",
            "description": "The type of the organization creator"
          },
          "creator": {
            "description": "The organization creator",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the organization creator"
              },
              "name": {
                "type": "string",
                "description": "The name of the organization creator"
              },
              "description": {
                "type": "string",
                "description": "An optional description of the organization creator"
              }
            }
          },
          "company_size": {
            "type": "string",
            "description": "The size of the company"
          },
          "company_security_team_size": {
            "type": "string",
            "description": "The size of the security team"
          },
          "company_sector": {
            "type": "string",
            "description": "The sector of the company"
          },
          "company_location": {
            "type": "string",
            "description": "The location of the company"
          },
          "is_parent": {
            "type": "boolean",
            "description": "A flag that indicates if the organization can create and manage suborganizations"
          },
          "parent_organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID parent organization",
            "x-nullable": true
          },
          "suborganizations": {
            "description": "The suborganizations of the organization",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of the organization"
            }
          },
          "is_mfa_enforced": {
            "type": "boolean",
            "default": false,
            "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
          },
          "session_timeout": {
            "type": "integer",
            "default": null,
            "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
            "x-nullable": true
          },
          "disable_inactive_avatars": {
            "type": "boolean",
            "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
          },
          "disabled": {
            "type": "boolean",
            "description": "Is the organization disabled?"
          },
          "plans": {
            "type": "array",
            "description": "Plans subscribed by the organization",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier of the plan"
                }
              }
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Features accessible through the plan subscribed by the organization",
              "x-nullable": true
            }
          },
          "computed_properties": {
            "type": "object",
            "additionalProperties": {},
            "x-nullable": true
          }
        },
        "required": [
          "description",
          "disable_inactive_avatars",
          "disabled",
          "name"
        ]
      },
      "organizationSchemaWithLicense": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the organization"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization"
          },
          "description": {
            "type": "string",
            "description": "A description of the organization"
          },
          "homepage_url": {
            "type": "string",
            "description": "An external URL referring to the organization"
          },
          "picture_mode": {
            "type": "string",
            "description": "The picture mode (custom or initials)",
            "x-nullable": true
          },
          "total_members": {
            "type": "integer",
            "description": "The total number of member count",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of the organization"
          },
          "updated_at": {
            "type": "string",
            "description": "The last modification date of the organization"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the creator of the organization"
          },
          "created_by_type": {
            "type": "string",
            "description": "The type of the organization creator"
          },
          "creator": {
            "description": "The organization creator",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the organization creator"
              },
              "name": {
                "type": "string",
                "description": "The name of the organization creator"
              },
              "description": {
                "type": "string",
                "description": "An optional description of the organization creator"
              }
            }
          },
          "company_size": {
            "type": "string",
            "description": "The size of the company"
          },
          "company_security_team_size": {
            "type": "string",
            "description": "The size of the security team"
          },
          "company_sector": {
            "type": "string",
            "description": "The sector of the company"
          },
          "company_location": {
            "type": "string",
            "description": "The location of the company"
          },
          "is_parent": {
            "type": "boolean",
            "description": "A flag that indicates if the organization can create and manage suborganizations"
          },
          "parent_organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID parent organization",
            "x-nullable": true
          },
          "suborganizations": {
            "description": "The suborganizations of the organization",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of the organization"
            }
          },
          "is_mfa_enforced": {
            "type": "boolean",
            "default": false,
            "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
          },
          "session_timeout": {
            "type": "integer",
            "default": null,
            "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
            "x-nullable": true
          },
          "disable_inactive_avatars": {
            "type": "boolean",
            "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
          },
          "disabled": {
            "type": "boolean",
            "description": "Is the organization disabled?"
          },
          "plans": {
            "type": "array",
            "description": "Plans subscribed by the organization",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier of the plan"
                }
              }
            }
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Features accessible through the plan subscribed by the organization",
              "x-nullable": true
            }
          },
          "computed_properties": {
            "type": "object",
            "additionalProperties": {},
            "x-nullable": true
          },
          "licenses": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            },
            "x-nullable": true
          },
          "limits": {
            "type": "object",
            "additionalProperties": {},
            "x-nullable": true
          }
        },
        "required": [
          "description",
          "disable_inactive_avatars",
          "disabled",
          "name"
        ]
      },
      "RoleListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of roles"
          },
          "items": {
            "type": "array",
            "description": "A list of roles",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the role"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the organization that the role belong to",
                  "x-nullable": true
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role"
                },
                "permissions": {
                  "type": "array",
                  "description": "The permissions associated to the role",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The  UUID of the permission"
                      },
                      "bitmask_id": {
                        "type": "integer",
                        "description": "The bitmask id of the permission"
                      },
                      "name": {
                        "type": "string",
                        "description": "Technical name of the permission"
                      },
                      "title": {
                        "type": "string",
                        "description": "Human-readable title of the permission"
                      },
                      "description": {
                        "type": "string",
                        "default": "",
                        "description": "The description of the permission"
                      },
                      "feature": {
                        "type": "string",
                        "description": "Feature of the permission"
                      }
                    },
                    "required": [
                      "bitmask_id",
                      "name",
                      "title",
                      "uuid"
                    ]
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the role"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last modification date of the role"
                },
                "total_members": {
                  "type": "integer",
                  "description": "The number of members that have this role"
                },
                "members": {
                  "type": "array",
                  "description": "The members that have this role",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The UUID of the member"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the member",
                        "x-nullable": true
                      },
                      "user": {
                        "description": "The user of the member",
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Unique identifier (UUID) of the user"
                          },
                          "firstname": {
                            "type": "string",
                            "description": "First name of the user",
                            "x-nullable": true
                          },
                          "lastname": {
                            "type": "string",
                            "description": "Last name of the user",
                            "x-nullable": true
                          },
                          "company_name": {
                            "type": "string",
                            "description": "Company name of the user",
                            "x-nullable": true
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the user (if available)",
                            "x-nullable": true
                          },
                          "picture_mode": {
                            "type": "string",
                            "description": "Picture mode of the user. Can be “custom” or “initials”.",
                            "x-nullable": true
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Creation date of the user"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "Last update of the user"
                          },
                          "invitation_v2": {
                            "description": "",
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email"
                            ],
                            "x-nullable": true
                          },
                          "mfa_enabled": {
                            "type": "boolean",
                            "description": "Is multi factor authentication (MFA) enabled for the user",
                            "x-nullable": true
                          },
                          "last_activity": {
                            "type": "string",
                            "format": "date-time",
                            "description": "User's last activity time",
                            "x-nullable": true
                          },
                          "auth_provider": {
                            "description": "Authentication method of the user",
                            "enum": [
                              "local",
                              "oidc"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "created_at",
                          "updated_at",
                          "uuid"
                        ]
                      },
                      "created_at": {
                        "type": "string",
                        "description": "The creation date of this member in its organization"
                      },
                      "updated_at": {
                        "type": "string",
                        "description": "The last modification date of the member"
                      },
                      "status": {
                        "description": "Indicate if the avatar is enabled or not",
                        "enum": [
                          "enabled",
                          "disabled"
                        ],
                        "type": "string"
                      },
                      "status_changed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Indicate when the avatar’s status was updated"
                      },
                      "role_uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier (UUID) of the built-in role, if any.",
                        "x-nullable": true
                      }
                    }
                  }
                },
                "is_restricted": {
                  "type": "boolean",
                  "description": "Is the role restricted?"
                },
                "connector_uuids": {
                  "type": "array",
                  "description": "The list of connector UUIDs for the restricted role",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              "required": [
                "description",
                "name",
                "uuid"
              ]
            }
          }
        }
      },
      "RoleSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the role"
          },
          "name": {
            "type": "string",
            "description": "The name of the role"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the organization that the role belong to",
            "x-nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the role"
          },
          "permissions": {
            "type": "array",
            "description": "The permissions associated to the role",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The  UUID of the permission"
                },
                "bitmask_id": {
                  "type": "integer",
                  "description": "The bitmask id of the permission"
                },
                "name": {
                  "type": "string",
                  "description": "Technical name of the permission"
                },
                "title": {
                  "type": "string",
                  "description": "Human-readable title of the permission"
                },
                "description": {
                  "type": "string",
                  "default": "",
                  "description": "The description of the permission"
                },
                "feature": {
                  "type": "string",
                  "description": "Feature of the permission"
                }
              },
              "required": [
                "bitmask_id",
                "name",
                "title",
                "uuid"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the role"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the role"
          },
          "total_members": {
            "type": "integer",
            "description": "The number of members that have this role"
          },
          "members": {
            "type": "array",
            "description": "The members that have this role",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the member"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "x-nullable": true
                },
                "user": {
                  "description": "The user of the member",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Unique identifier (UUID) of the user"
                    },
                    "firstname": {
                      "type": "string",
                      "description": "First name of the user",
                      "x-nullable": true
                    },
                    "lastname": {
                      "type": "string",
                      "description": "Last name of the user",
                      "x-nullable": true
                    },
                    "company_name": {
                      "type": "string",
                      "description": "Company name of the user",
                      "x-nullable": true
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the user (if available)",
                      "x-nullable": true
                    },
                    "picture_mode": {
                      "type": "string",
                      "description": "Picture mode of the user. Can be “custom” or “initials”.",
                      "x-nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Creation date of the user"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Last update of the user"
                    },
                    "invitation_v2": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "x-nullable": true
                    },
                    "mfa_enabled": {
                      "type": "boolean",
                      "description": "Is multi factor authentication (MFA) enabled for the user",
                      "x-nullable": true
                    },
                    "last_activity": {
                      "type": "string",
                      "format": "date-time",
                      "description": "User's last activity time",
                      "x-nullable": true
                    },
                    "auth_provider": {
                      "description": "Authentication method of the user",
                      "enum": [
                        "local",
                        "oidc"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "created_at",
                    "updated_at",
                    "uuid"
                  ]
                },
                "created_at": {
                  "type": "string",
                  "description": "The creation date of this member in its organization"
                },
                "updated_at": {
                  "type": "string",
                  "description": "The last modification date of the member"
                },
                "status": {
                  "description": "Indicate if the avatar is enabled or not",
                  "enum": [
                    "enabled",
                    "disabled"
                  ],
                  "type": "string"
                },
                "status_changed_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Indicate when the avatar’s status was updated"
                },
                "role_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier (UUID) of the built-in role, if any.",
                  "x-nullable": true
                }
              }
            }
          },
          "is_restricted": {
            "type": "boolean",
            "description": "Is the role restricted?"
          },
          "connector_uuids": {
            "type": "array",
            "description": "The list of connector UUIDs for the restricted role",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "description",
          "name",
          "uuid"
        ]
      },
      "ListAPIKeysSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of apikeys"
          },
          "items": {
            "type": "array",
            "description": "A list of apikeys",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "readOnly": true,
                  "description": "The UUID of the apikey"
                },
                "created_by": {
                  "type": "string",
                  "format": "uuid",
                  "readOnly": true,
                  "description": "The UUID of the apikey creator"
                },
                "created_by_type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type of the apikey creator"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true,
                  "description": "The creation datetime"
                },
                "revoked": {
                  "type": "boolean",
                  "readOnly": true,
                  "description": "The revocation status of the apikey"
                },
                "revoked_at": {
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true,
                  "description": "The revocation datetime"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the apikey"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the apikey"
                },
                "roles": {
                  "type": "array",
                  "description": "The roles managed by the apikey",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The UUID of the role"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the role"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the role"
                      }
                    },
                    "required": [
                      "description",
                      "name",
                      "uuid"
                    ]
                  }
                },
                "permissions": {
                  "type": "array",
                  "description": "The permissions managed by the apikey",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The  UUID of the permission"
                      },
                      "bitmask_id": {
                        "type": "integer",
                        "description": "The bitmask id of the permission"
                      },
                      "name": {
                        "type": "string",
                        "description": "Technical name of the permission"
                      },
                      "title": {
                        "type": "string",
                        "description": "Human-readable title of the permission"
                      },
                      "description": {
                        "type": "string",
                        "default": "",
                        "description": "The description of the permission"
                      },
                      "feature": {
                        "type": "string",
                        "description": "Feature of the permission"
                      }
                    },
                    "required": [
                      "bitmask_id",
                      "name",
                      "title",
                      "uuid"
                    ]
                  }
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The expiration datetime"
                },
                "status": {
                  "description": "Status of the APIKey (active, expired or revoked)",
                  "enum": [
                    "active",
                    "revoked",
                    "expired"
                  ],
                  "type": "string"
                },
                "internal": {
                  "type": "boolean",
                  "description": "Is the API key internal i.e. generated by an application"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "created_by_type",
                "description",
                "internal",
                "name",
                "revoked",
                "revoked_at",
                "status",
                "uuid"
              ]
            }
          }
        },
        "required": [
          "total"
        ]
      },
      "APIKeyCreateSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The UUID of the apikey"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The UUID of the apikey creator"
          },
          "created_by_type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the apikey creator"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The creation datetime"
          },
          "revoked": {
            "type": "boolean",
            "readOnly": true,
            "description": "The revocation status of the apikey"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The revocation datetime"
          },
          "name": {
            "type": "string",
            "description": "Name of the apikey"
          },
          "description": {
            "type": "string",
            "description": "Description of the apikey"
          },
          "roles": {
            "type": "array",
            "description": "The roles managed by the apikey",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the role"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role"
                }
              },
              "required": [
                "description",
                "name",
                "uuid"
              ]
            }
          },
          "permissions": {
            "type": "array",
            "description": "The permissions managed by the apikey",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The  UUID of the permission"
                },
                "bitmask_id": {
                  "type": "integer",
                  "description": "The bitmask id of the permission"
                },
                "name": {
                  "type": "string",
                  "description": "Technical name of the permission"
                },
                "title": {
                  "type": "string",
                  "description": "Human-readable title of the permission"
                },
                "description": {
                  "type": "string",
                  "default": "",
                  "description": "The description of the permission"
                },
                "feature": {
                  "type": "string",
                  "description": "Feature of the permission"
                }
              },
              "required": [
                "bitmask_id",
                "name",
                "title",
                "uuid"
              ]
            }
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration datetime"
          },
          "status": {
            "description": "Status of the APIKey (active, expired or revoked)",
            "enum": [
              "active",
              "revoked",
              "expired"
            ],
            "type": "string"
          },
          "internal": {
            "type": "boolean",
            "description": "Is the API key internal i.e. generated by an application"
          },
          "key": {
            "type": "string",
            "readOnly": true,
            "description": "The generated apikey"
          },
          "short_key": {
            "type": "string",
            "readOnly": true,
            "description": "The generated short apikey"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "internal",
          "key",
          "name",
          "revoked",
          "revoked_at",
          "status",
          "uuid"
        ]
      },
      "APIKeySchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The UUID of the apikey"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The UUID of the apikey creator"
          },
          "created_by_type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the apikey creator"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The creation datetime"
          },
          "revoked": {
            "type": "boolean",
            "readOnly": true,
            "description": "The revocation status of the apikey"
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The revocation datetime"
          },
          "name": {
            "type": "string",
            "description": "Name of the apikey"
          },
          "description": {
            "type": "string",
            "description": "Description of the apikey"
          },
          "roles": {
            "type": "array",
            "description": "The roles managed by the apikey",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the role"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role"
                }
              },
              "required": [
                "description",
                "name",
                "uuid"
              ]
            }
          },
          "permissions": {
            "type": "array",
            "description": "The permissions managed by the apikey",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The  UUID of the permission"
                },
                "bitmask_id": {
                  "type": "integer",
                  "description": "The bitmask id of the permission"
                },
                "name": {
                  "type": "string",
                  "description": "Technical name of the permission"
                },
                "title": {
                  "type": "string",
                  "description": "Human-readable title of the permission"
                },
                "description": {
                  "type": "string",
                  "default": "",
                  "description": "The description of the permission"
                },
                "feature": {
                  "type": "string",
                  "description": "Feature of the permission"
                }
              },
              "required": [
                "bitmask_id",
                "name",
                "title",
                "uuid"
              ]
            }
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration datetime"
          },
          "status": {
            "description": "Status of the APIKey (active, expired or revoked)",
            "enum": [
              "active",
              "revoked",
              "expired"
            ],
            "type": "string"
          },
          "internal": {
            "type": "boolean",
            "description": "Is the API key internal i.e. generated by an application"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "internal",
          "name",
          "revoked",
          "revoked_at",
          "status",
          "uuid"
        ]
      },
      "list_avatars_schema": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of avatars of the organization"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/avatar_schema",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "avatar_schema": {
        "required": [
          "created_at",
          "status",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the member"
          },
          "role_uuid": {
            "type": "string",
            "description": "The built-in role UUID of the member"
          },
          "name": {
            "type": "string",
            "description": "The name of the member"
          },
          "user": {
            "$ref": "#/components/schemas/user_schema"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of this member in its organization"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the member"
          },
          "status": {
            "type": "string",
            "description": "Indicate if the avatar is enabled or not"
          },
          "status_changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicate when the avatar’s status was updated"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/avatar_role"
            }
          }
        },
        "type": "object"
      },
      "user_schema": {
        "required": [
          "auth_provider",
          "confirmed",
          "created_at",
          "updated_at",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier (UUID) of the user"
          },
          "firstname": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "company_name": {
            "type": "string",
            "description": "Company name of the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user (if available)"
          },
          "picture_mode": {
            "type": "string",
            "description": "Picture mode of the user. Can be “custom” or “initials”."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the user"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update of the user"
          },
          "confirmed": {
            "type": "boolean",
            "description": "Has the user confirmed its invitation?"
          },
          "invitation_v2": {
            "$ref": "#/components/schemas/invitation_schema"
          },
          "mfa_enabled": {
            "type": "boolean",
            "description": "Is multi factor authentication (MFA) enabled for the user"
          },
          "last_activity": {
            "type": "string",
            "format": "date-time",
            "description": "User's last activity time"
          },
          "auth_provider": {
            "type": "string",
            "description": "Authentication method of the user"
          },
          "sso_available": {
            "type": "boolean",
            "description": "Can the user authenticate via Single Sign-on",
            "default": false
          }
        },
        "type": "object"
      },
      "invitation_schema": {
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "avatar_role": {
        "required": [
          "name",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Role’s unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of the role"
          }
        },
        "type": "object"
      },
      "AvatarSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the member"
          },
          "name": {
            "type": "string",
            "description": "The name of the member",
            "x-nullable": true
          },
          "user": {
            "description": "The user of the member",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Unique identifier (UUID) of the user"
              },
              "firstname": {
                "type": "string",
                "description": "First name of the user",
                "x-nullable": true
              },
              "lastname": {
                "type": "string",
                "description": "Last name of the user",
                "x-nullable": true
              },
              "company_name": {
                "type": "string",
                "description": "Company name of the user",
                "x-nullable": true
              },
              "email": {
                "type": "string",
                "description": "Email of the user (if available)",
                "x-nullable": true
              },
              "picture_mode": {
                "type": "string",
                "description": "Picture mode of the user. Can be “custom” or “initials”.",
                "x-nullable": true
              },
              "created_at": {
                "type": "string",
                "description": "Creation date of the user"
              },
              "updated_at": {
                "type": "string",
                "description": "Last update of the user"
              },
              "invitation_v2": {
                "description": "",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "x-nullable": true
              },
              "mfa_enabled": {
                "type": "boolean",
                "description": "Is multi factor authentication (MFA) enabled for the user",
                "x-nullable": true
              },
              "last_activity": {
                "type": "string",
                "format": "date-time",
                "description": "User's last activity time",
                "x-nullable": true
              },
              "auth_provider": {
                "description": "Authentication method of the user",
                "enum": [
                  "local",
                  "oidc"
                ],
                "type": "string"
              }
            },
            "required": [
              "created_at",
              "updated_at",
              "uuid"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of this member in its organization"
          },
          "updated_at": {
            "type": "string",
            "description": "The last modification date of the member"
          },
          "status": {
            "description": "Indicate if the avatar is enabled or not",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "status_changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicate when the avatar’s status was updated"
          },
          "role_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the built-in role, if any.",
            "x-nullable": true
          },
          "organization": {
            "description": "The organization of the member",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the organization"
              },
              "name": {
                "type": "string",
                "description": "The name of the organization"
              },
              "description": {
                "type": "string",
                "description": "A description of the organization"
              },
              "homepage_url": {
                "type": "string",
                "description": "An external URL referring to the organization"
              },
              "picture_mode": {
                "type": "string",
                "description": "The picture mode (custom or initials)",
                "x-nullable": true
              },
              "created_at": {
                "type": "string",
                "description": "The creation date of the organization"
              },
              "updated_at": {
                "type": "string",
                "description": "The last modification date of the organization"
              },
              "created_by": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the creator of the organization"
              },
              "created_by_type": {
                "type": "string",
                "description": "The type of the organization creator"
              },
              "creator": {
                "description": "The organization creator",
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the organization creator"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the organization creator"
                  },
                  "description": {
                    "type": "string",
                    "description": "An optional description of the organization creator"
                  }
                }
              },
              "company_size": {
                "type": "string",
                "description": "The size of the company"
              },
              "company_security_team_size": {
                "type": "string",
                "description": "The size of the security team"
              },
              "company_sector": {
                "type": "string",
                "description": "The sector of the company"
              },
              "company_location": {
                "type": "string",
                "description": "The location of the company"
              },
              "is_parent": {
                "type": "boolean",
                "description": "A flag that indicates if the organization can create and manage suborganizations"
              },
              "parent_organization_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID parent organization",
                "x-nullable": true
              },
              "suborganizations": {
                "description": "The suborganizations of the organization",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the organization"
                }
              },
              "is_mfa_enforced": {
                "type": "boolean",
                "default": false,
                "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
              },
              "session_timeout": {
                "type": "integer",
                "default": null,
                "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
                "x-nullable": true
              },
              "disable_inactive_avatars": {
                "type": "boolean",
                "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
              },
              "disabled": {
                "type": "boolean",
                "description": "Is the organization disabled?"
              },
              "plans": {
                "type": "array",
                "description": "Plans subscribed by the organization",
                "items": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier of the plan"
                    }
                  }
                }
              },
              "features": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Features accessible through the plan subscribed by the organization",
                  "x-nullable": true
                }
              },
              "computed_properties": {
                "type": "object",
                "additionalProperties": {},
                "x-nullable": true
              }
            },
            "required": [
              "description",
              "disable_inactive_avatars",
              "disabled",
              "name"
            ]
          },
          "is_restricted": {
            "type": "boolean",
            "description": "Is the avatar restricted"
          },
          "connector_uuids": {
            "type": "array",
            "description": "The avatar allowed connector uuids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "permissions_mask": {
            "type": "string",
            "description": "The permission mask of the avatar"
          }
        }
      },
      "suborganizations_resultset_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/suborganization_d_t_o",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "suborganization_d_t_o": {
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "name",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "homepage_url": {
            "type": "string"
          },
          "picture_mode": {
            "type": "string"
          },
          "is_parent": {
            "type": "boolean"
          },
          "parent_organization_uuid": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "company_size": {
            "type": "string"
          },
          "company_security_team_size": {
            "type": "string"
          },
          "company_sector": {
            "type": "string"
          },
          "company_location": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "permission_list_schema": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of permissions"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permission_schema",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "permission_schema": {
        "required": [
          "bitmask_id",
          "name",
          "title",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the permission"
          },
          "bitmask_id": {
            "type": "integer",
            "description": "The bitmask id of the permission"
          },
          "name": {
            "type": "string",
            "description": "Technical name of the permission"
          },
          "title": {
            "type": "string",
            "description": "Human-readable title of the permission"
          },
          "description": {
            "type": "string",
            "description": "The description of the permission",
            "default": ""
          },
          "feature": {
            "type": "string",
            "description": "Feature of the permission"
          }
        },
        "type": "object"
      },
      "list_licenses_schema": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "Number of licenses"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/license_schema",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "license_schema": {
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "is_upsell",
          "license_type",
          "management_organization_uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the license"
          },
          "license_type": {
            "type": "string",
            "description": "Type of license"
          },
          "plan": {
            "$ref": "#/components/schemas/plan_model"
          },
          "properties": {
            "type": "string",
            "description": "Optional properties of the license"
          },
          "limits": {
            "type": "string",
            "description": "Optional limits of the license"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the license"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "End date of the license"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the license in days"
          },
          "transaction_id": {
            "type": "string",
            "description": "Optional identifier the related commercial transaction"
          },
          "management_organization_uuid": {
            "type": "string",
            "description": "Identifier of the organization that manages the license"
          },
          "beneficiary_organization_uuid": {
            "type": "string",
            "description": "Identifier of the organization that benefits the license"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation of the license"
          },
          "created_by": {
            "type": "string",
            "description": "Unique identifier of the profile that created the license"
          },
          "created_by_type": {
            "type": "string",
            "description": "Kind of profile (e.g. “user”) of the profile that created the license"
          },
          "is_upsell": {
            "type": "boolean",
            "description": "Is licence an upsell (partial license) or not"
          }
        },
        "type": "object"
      },
      "plan_model": {
        "required": [
          "title",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The Analytic solution plan unique identifier"
          },
          "title": {
            "type": "string",
            "description": "The title of the plan"
          },
          "required_properties": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of required properties for the plan"
            }
          },
          "optional_properties": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of optional properties for the plan"
            }
          },
          "limits": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of limits for the plan"
            }
          },
          "module": {
            "$ref": "#/components/schemas/module_model"
          }
        },
        "type": "object"
      },
      "module_model": {
        "required": [
          "description",
          "name",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The Analytic solution module unique identifier"
          },
          "name": {
            "type": "string",
            "description": "The title of the module"
          },
          "description": {
            "type": "string",
            "description": "The description of the module"
          }
        },
        "type": "object"
      },
      "root_model[list[_license_schema]]": {
        "required": [
          "root"
        ],
        "properties": {
          "root": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AvatarListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of avatars"
          },
          "items": {
            "type": "array",
            "description": "A list of avatars",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the member"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "x-nullable": true
                },
                "user": {
                  "description": "The user of the member",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Unique identifier (UUID) of the user"
                    },
                    "firstname": {
                      "type": "string",
                      "description": "First name of the user",
                      "x-nullable": true
                    },
                    "lastname": {
                      "type": "string",
                      "description": "Last name of the user",
                      "x-nullable": true
                    },
                    "company_name": {
                      "type": "string",
                      "description": "Company name of the user",
                      "x-nullable": true
                    },
                    "email": {
                      "type": "string",
                      "description": "Email of the user (if available)",
                      "x-nullable": true
                    },
                    "picture_mode": {
                      "type": "string",
                      "description": "Picture mode of the user. Can be “custom” or “initials”.",
                      "x-nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Creation date of the user"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Last update of the user"
                    },
                    "invitation_v2": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "x-nullable": true
                    },
                    "mfa_enabled": {
                      "type": "boolean",
                      "description": "Is multi factor authentication (MFA) enabled for the user",
                      "x-nullable": true
                    },
                    "last_activity": {
                      "type": "string",
                      "format": "date-time",
                      "description": "User's last activity time",
                      "x-nullable": true
                    },
                    "auth_provider": {
                      "description": "Authentication method of the user",
                      "enum": [
                        "local",
                        "oidc"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "created_at",
                    "updated_at",
                    "uuid"
                  ]
                },
                "created_at": {
                  "type": "string",
                  "description": "The creation date of this member in its organization"
                },
                "updated_at": {
                  "type": "string",
                  "description": "The last modification date of the member"
                },
                "status": {
                  "description": "Indicate if the avatar is enabled or not",
                  "enum": [
                    "enabled",
                    "disabled"
                  ],
                  "type": "string"
                },
                "status_changed_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Indicate when the avatar’s status was updated"
                },
                "role_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier (UUID) of the built-in role, if any.",
                  "x-nullable": true
                },
                "organization": {
                  "description": "The organization of the member",
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The UUID of the organization"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the organization"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the organization"
                    },
                    "homepage_url": {
                      "type": "string",
                      "description": "An external URL referring to the organization"
                    },
                    "picture_mode": {
                      "type": "string",
                      "description": "The picture mode (custom or initials)",
                      "x-nullable": true
                    },
                    "created_at": {
                      "type": "string",
                      "description": "The creation date of the organization"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "The last modification date of the organization"
                    },
                    "created_by": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The UUID of the creator of the organization"
                    },
                    "created_by_type": {
                      "type": "string",
                      "description": "The type of the organization creator"
                    },
                    "creator": {
                      "description": "The organization creator",
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string",
                          "format": "uuid",
                          "description": "The UUID of the organization creator"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the organization creator"
                        },
                        "description": {
                          "type": "string",
                          "description": "An optional description of the organization creator"
                        }
                      }
                    },
                    "company_size": {
                      "type": "string",
                      "description": "The size of the company"
                    },
                    "company_security_team_size": {
                      "type": "string",
                      "description": "The size of the security team"
                    },
                    "company_sector": {
                      "type": "string",
                      "description": "The sector of the company"
                    },
                    "company_location": {
                      "type": "string",
                      "description": "The location of the company"
                    },
                    "is_parent": {
                      "type": "boolean",
                      "description": "A flag that indicates if the organization can create and manage suborganizations"
                    },
                    "parent_organization_uuid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The UUID parent organization",
                      "x-nullable": true
                    },
                    "suborganizations": {
                      "description": "The suborganizations of the organization",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The UUID of the organization"
                      }
                    },
                    "is_mfa_enforced": {
                      "type": "boolean",
                      "default": false,
                      "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
                    },
                    "session_timeout": {
                      "type": "integer",
                      "default": null,
                      "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
                      "x-nullable": true
                    },
                    "disable_inactive_avatars": {
                      "type": "boolean",
                      "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
                    },
                    "disabled": {
                      "type": "boolean",
                      "description": "Is the organization disabled?"
                    },
                    "plans": {
                      "type": "array",
                      "description": "Plans subscribed by the organization",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identifier of the plan"
                          }
                        }
                      }
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Features accessible through the plan subscribed by the organization",
                        "x-nullable": true
                      }
                    },
                    "computed_properties": {
                      "type": "object",
                      "additionalProperties": {},
                      "x-nullable": true
                    }
                  },
                  "required": [
                    "description",
                    "disable_inactive_avatars",
                    "disabled",
                    "name"
                  ]
                },
                "is_restricted": {
                  "type": "boolean",
                  "description": "Is the avatar restricted"
                },
                "connector_uuids": {
                  "type": "array",
                  "description": "The avatar allowed connector uuids",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "permissions_mask": {
                  "type": "string",
                  "description": "The permission mask of the avatar"
                }
              }
            }
          }
        }
      },
      "AvatarWithoutEmailSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the member"
          },
          "name": {
            "type": "string",
            "description": "The name of the member",
            "x-nullable": true
          },
          "user": {
            "description": "The user of the member",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "Unique identifier (UUID) of the user"
              },
              "firstname": {
                "type": "string",
                "description": "First name of the user",
                "x-nullable": true
              },
              "lastname": {
                "type": "string",
                "description": "Last name of the user",
                "x-nullable": true
              },
              "company_name": {
                "type": "string",
                "description": "Company name of the user",
                "x-nullable": true
              },
              "email": {
                "type": "string",
                "description": "Email of the user (if available)",
                "x-nullable": true
              },
              "picture_mode": {
                "type": "string",
                "description": "Picture mode of the user. Can be “custom” or “initials”.",
                "x-nullable": true
              },
              "created_at": {
                "type": "string",
                "description": "Creation date of the user"
              },
              "updated_at": {
                "type": "string",
                "description": "Last update of the user"
              },
              "invitation_v2": {
                "description": "",
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "x-nullable": true
              },
              "mfa_enabled": {
                "type": "boolean",
                "description": "Is multi factor authentication (MFA) enabled for the user",
                "x-nullable": true
              },
              "last_activity": {
                "type": "string",
                "format": "date-time",
                "description": "User's last activity time",
                "x-nullable": true
              },
              "auth_provider": {
                "description": "Authentication method of the user",
                "enum": [
                  "local",
                  "oidc"
                ],
                "type": "string"
              }
            },
            "required": [
              "created_at",
              "updated_at",
              "uuid"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The creation date of this member in its organization"
          },
          "updated_at": {
            "type": "string",
            "description": "The last modification date of the member"
          },
          "status": {
            "description": "Indicate if the avatar is enabled or not",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "status_changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicate when the avatar’s status was updated"
          },
          "role_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier (UUID) of the built-in role, if any.",
            "x-nullable": true
          },
          "organization": {
            "description": "The organization of the member",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the organization"
              },
              "name": {
                "type": "string",
                "description": "The name of the organization"
              },
              "description": {
                "type": "string",
                "description": "A description of the organization"
              },
              "homepage_url": {
                "type": "string",
                "description": "An external URL referring to the organization"
              },
              "picture_mode": {
                "type": "string",
                "description": "The picture mode (custom or initials)",
                "x-nullable": true
              },
              "created_at": {
                "type": "string",
                "description": "The creation date of the organization"
              },
              "updated_at": {
                "type": "string",
                "description": "The last modification date of the organization"
              },
              "created_by": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the creator of the organization"
              },
              "created_by_type": {
                "type": "string",
                "description": "The type of the organization creator"
              },
              "creator": {
                "description": "The organization creator",
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the organization creator"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the organization creator"
                  },
                  "description": {
                    "type": "string",
                    "description": "An optional description of the organization creator"
                  }
                }
              },
              "company_size": {
                "type": "string",
                "description": "The size of the company"
              },
              "company_security_team_size": {
                "type": "string",
                "description": "The size of the security team"
              },
              "company_sector": {
                "type": "string",
                "description": "The sector of the company"
              },
              "company_location": {
                "type": "string",
                "description": "The location of the company"
              },
              "is_parent": {
                "type": "boolean",
                "description": "A flag that indicates if the organization can create and manage suborganizations"
              },
              "parent_organization_uuid": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID parent organization",
                "x-nullable": true
              },
              "suborganizations": {
                "description": "The suborganizations of the organization",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of the organization"
                }
              },
              "is_mfa_enforced": {
                "type": "boolean",
                "default": false,
                "description": "Should Mulfi-Factor Authentication (MFA) be enforced by the organization?"
              },
              "session_timeout": {
                "type": "integer",
                "default": null,
                "description": "Inactivity timeout (in minutes) after which members of this organization are disconnected",
                "x-nullable": true
              },
              "disable_inactive_avatars": {
                "type": "boolean",
                "description": "Should avatars should be marked as “disabled” after 90 days of inactivity within the organization?"
              },
              "disabled": {
                "type": "boolean",
                "description": "Is the organization disabled?"
              },
              "plans": {
                "type": "array",
                "description": "Plans subscribed by the organization",
                "items": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier of the plan"
                    }
                  }
                }
              },
              "features": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Features accessible through the plan subscribed by the organization",
                  "x-nullable": true
                }
              },
              "computed_properties": {
                "type": "object",
                "additionalProperties": {},
                "x-nullable": true
              }
            },
            "required": [
              "description",
              "disable_inactive_avatars",
              "disabled",
              "name"
            ]
          },
          "is_restricted": {
            "type": "boolean",
            "description": "Is the avatar restricted"
          },
          "connector_uuids": {
            "type": "array",
            "description": "The avatar allowed connector uuids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "permissions_mask": {
            "type": "string",
            "description": "The permission mask of the avatar"
          }
        }
      },
      "avatar_count_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of avatar for a organization"
          }
        },
        "type": "object"
      },
      "organizationShortListSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of organizations"
          },
          "items": {
            "type": "array",
            "description": "A list of organizations with only few informations",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The UUID of a organization"
                },
                "suborganizations": {
                  "description": "The suborganizations of the organization",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the organization"
                  }
                }
              },
              "required": [
                "uuid"
              ]
            }
          }
        }
      },
      "invitation_validation_schema": {
        "required": [
          "confirmation_token",
          "email",
          "invitation_id"
        ],
        "properties": {
          "invitation_id": {
            "type": "string",
            "description": "The identifier of the invitation"
          },
          "expiration_datetime": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime from when the invitation become expired"
          },
          "confirmation_token": {
            "type": "string",
            "description": "The token to use for the account creation"
          },
          "email": {
            "type": "string",
            "description": "The email of the invitee"
          }
        },
        "type": "object"
      },
      "list_of_users_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of users"
          }
        },
        "type": "object"
      },
      "user_d_t_o": {
        "required": [
          "auth_provider",
          "created_at",
          "updated_at",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier (UUID) of the user"
          },
          "firstname": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "Last name of the user"
          },
          "company_name": {
            "type": "string",
            "description": "Company name of the user"
          },
          "role_within_the_company": {
            "type": "string",
            "description": "User's title within the company"
          },
          "email": {
            "type": "string",
            "description": "Email of the user (if available)"
          },
          "picture_mode": {
            "type": "string",
            "description": "Picture mode of the user. Can be “custom” or “initials”."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the user"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update of the user"
          },
          "invitation_v2": {
            "$ref": "#/components/schemas/invitation_v2_d_t_o"
          },
          "mfa_enabled": {
            "type": "boolean",
            "description": "Is multi factor authentication (MFA) enabled for the user"
          },
          "last_activity": {
            "type": "string",
            "format": "date-time",
            "description": "User's last activity time"
          },
          "auth_provider": {
            "type": "string",
            "description": "Authentication method of the user"
          },
          "preferred_mfa_method": {
            "type": "string",
            "description": "Preferred MFA method"
          }
        },
        "type": "object"
      },
      "invitation_v2_d_t_o": {
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "created_user_d_t_o": {
        "required": [
          "confirmed",
          "created_at",
          "deleted",
          "email",
          "mfa_enabled",
          "updated_at",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "company_name": {
            "type": "string"
          },
          "role_within_the_company": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "mfa_enabled": {
            "type": "boolean"
          },
          "last_avatar_uuid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "confirmed_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "confirmed": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "user_with_organizations_d_t_o": {
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_organization_d_t_o",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "user_organization_d_t_o": {
        "required": [
          "disabled",
          "name",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the organization"
          },
          "name": {
            "type": "string",
            "description": "Name of the organization"
          },
          "avatar_uuid": {
            "type": "string",
            "description": "UUID of the avatar in the organization"
          },
          "disabled": {
            "type": "boolean",
            "description": "Is the organization disabled"
          }
        },
        "type": "object"
      },
      "list_of_user_avatars_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of avatars of the user"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_avatar_d_t_o",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "user_avatar_d_t_o": {
        "required": [
          "created_at",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The UUID of the avatar"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the avatar"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the avatar last update"
          },
          "organization": {
            "$ref": "#/components/schemas/user_organization_d_t_o"
          }
        },
        "type": "object"
      },
      "list_of_user_sessions_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of sessions of the user"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/user_session_d_t_o",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "user_session_d_t_o": {
        "required": [
          "expiration_mode",
          "expires_at",
          "ipaddress",
          "revoked",
          "started_at",
          "useragent",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the session"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the session started"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Expiration date of the session"
          },
          "ipaddress": {
            "type": "string",
            "description": "IP Address of the user that initiated the session."
          },
          "useragent": {
            "type": "string",
            "description": "User Agent of the user that initiated the session."
          },
          "revoked": {
            "type": "boolean",
            "description": "Is this session revoked?"
          },
          "expiration_mode": {
            "type": "string",
            "description": "User session expiration mode"
          },
          "session_timeout": {
            "type": "integer",
            "description": "Session timeout when “inactivity” expiration mode is used"
          }
        },
        "type": "object"
      },
      "user_login": {
        "required": [
          "login"
        ],
        "properties": {
          "login": {
            "type": "boolean",
            "description": "Whether the connexion was a success"
          },
          "should_enable_mfa": {
            "type": "boolean",
            "description": "Should the user enable MFA",
            "default": false
          },
          "should_reset_mfa": {
            "type": "boolean",
            "description": "Should the user reset MFA",
            "default": false
          }
        },
        "type": "object"
      },
      "j_w_k_s": {
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/e_c_public_key_j_w_k",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "e_c_public_key_j_w_k": {
        "required": [
          "alg",
          "crv",
          "kid",
          "kty",
          "use",
          "x"
        ],
        "properties": {
          "kid": {
            "type": "string",
            "description": "Key ID"
          },
          "kty": {
            "type": "string",
            "description": "Key Type"
          },
          "alg": {
            "type": "string",
            "description": "Algorithm"
          },
          "use": {
            "type": "string",
            "description": "Public Key Use"
          },
          "crv": {
            "type": "string"
          },
          "x": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "root_model[list[_plan_model]]": {
        "required": [
          "root"
        ],
        "properties": {
          "root": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "list_of_connector_formats_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector_format_d_t_o": {
        "required": [
          "created_at",
          "created_by",
          "created_by_type",
          "name",
          "slug",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "module_uuid": {
            "type": "string"
          },
          "organization_uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "taxonomy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/field_info",
              "type": "object"
            }
          },
          "parser": {
            "$ref": "#/components/schemas/connector"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_by_type": {
            "type": "string"
          },
          "datasources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_ingest": {
            "type": "boolean"
          },
          "automation_module_uuid": {
            "type": "string"
          },
          "automation_connector_uuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "field_info": {
        "required": [
          "description",
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "short": {
            "type": "string"
          },
          "accepted_values": {
            "type": "string"
          },
          "observable": {
            "$ref": "#/components/schemas/observable_mapping"
          },
          "eternal": {
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "observable_mapping": {
        "required": [
          "property",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector": {
        "required": [
          "name",
          "stages"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "ignored_values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "pipeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stage_reference"
            }
          },
          "stages": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "stage_reference": {
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external": {
            "$ref": "#/components/schemas/external_stage_reference"
          },
          "filter": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "external_stage_reference": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "properties": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "list_of_connector_format_fields_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_field_info_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector_format_field_info_d_t_o": {
        "properties": {
          "format_uuid": {
            "type": "string"
          },
          "module_uuid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector_format_smart_descriptions_per_format_d_t_o": {
        "properties": {
          "items": {
            "type": "string",
            "default": {}
          },
          "total": {
            "type": "integer",
            "default": 0
          }
        },
        "type": "object"
      },
      "parsing_result_d_t_o": {
        "required": [
          "flattened",
          "output"
        ],
        "properties": {
          "output": {
            "type": "string"
          },
          "flattened": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "validation_results_d_t_o": {
        "properties": {
          "parsed_messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "taxonomy": {
            "$ref": "#/components/schemas/taxonomy_validation_results_d_t_o"
          },
          "coverage": {
            "$ref": "#/components/schemas/coverage_validation_results_d_t_o"
          }
        },
        "type": "object"
      },
      "taxonomy_validation_results_d_t_o": {
        "properties": {
          "missing": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unused": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "coverage_validation_results_d_t_o": {
        "required": [
          "percent"
        ],
        "properties": {
          "percent": {
            "type": "number"
          },
          "missing": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "list_of_connector_format_revisions_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_revision_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector_format_revision_d_t_o": {
        "required": [
          "format_uuid"
        ],
        "properties": {
          "format_uuid": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          },
          "smart_descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_smart_description_d_t_o"
            }
          }
        },
        "type": "object"
      },
      "connector_format_smart_description_d_t_o": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_smart_description_condition_d_t_o"
            }
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_smart_description_relationship_d_t_o"
            }
          }
        },
        "type": "object"
      },
      "connector_format_smart_description_condition_d_t_o": {
        "required": [
          "field"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector_format_smart_description_relationship_d_t_o": {
        "required": [
          "source",
          "target",
          "type"
        ],
        "properties": {
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector_format_documentation_d_t_o": {
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector_format_smart_descriptions_d_t_o": {
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_smart_description_d_t_o",
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "list_of_connector_format_datasources_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connector_format_datasource_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector_format_datasource_d_t_o": {
        "required": [
          "name",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertTypesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "category": {
                  "type": "string"
                }
              }
            }
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertStatusesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "title": {
                  "type": "string"
                },
                "created_at": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "integer"
                },
                "updated_by": {
                  "type": "string"
                },
                "updated_by_type": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "short_id": {
                  "type": "string"
                },
                "entity": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "uuid"
                  ]
                },
                "urgency": {
                  "description": "    The alert urgency can have two different representations in the api: a numerical and a textual representation.        | Urgency | Value |        | Low | [0-20[ |        | Moderate | [20-40[ |        | High | [40-60[ |        | Major | [60-80[ |        | Urgent | [80-100] |",
                  "type": "object",
                  "properties": {
                    "current_value": {
                      "type": "integer"
                    },
                    "value": {
                      "type": "integer"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "criticity": {
                      "type": "integer"
                    },
                    "display": {
                      "type": "string"
                    }
                  }
                },
                "alert_type": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "rule": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    },
                    "pattern": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "pattern",
                    "uuid"
                  ]
                },
                "detection_type": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "similar": {
                  "type": "integer"
                },
                "details": {
                  "type": "string"
                },
                "ttps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "adversaries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "stix": {
                  "type": "object"
                },
                "kill_chain_short_id": {
                  "type": "string"
                },
                "number_of_unseen_comments": {
                  "type": "integer"
                },
                "number_of_total_comments": {
                  "type": "integer"
                },
                "first_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "last_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "time_to_ingest": {
                  "type": "integer"
                },
                "time_to_detect": {
                  "type": "integer"
                },
                "time_to_acknowledge": {
                  "type": "integer"
                },
                "time_to_respond": {
                  "type": "integer"
                },
                "time_to_resolve": {
                  "type": "integer"
                },
                "connector_uuids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "cases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "is_supplied": {
                        "type": "boolean"
                      },
                      "manual": {
                        "type": "boolean"
                      },
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "AlertDetailSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_by_type": {
            "type": "string"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "short_id": {
            "type": "string"
          },
          "entity": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "uuid"
            ]
          },
          "urgency": {
            "description": "    The alert urgency can have two different representations in the api: a numerical and a textual representation.        | Urgency | Value |        | Low | [0-20[ |        | Moderate | [20-40[ |        | High | [40-60[ |        | Major | [60-80[ |        | Urgent | [80-100] |",
            "type": "object",
            "properties": {
              "current_value": {
                "type": "integer"
              },
              "value": {
                "type": "integer"
              },
              "severity": {
                "type": "integer"
              },
              "criticity": {
                "type": "integer"
              },
              "display": {
                "type": "string"
              }
            }
          },
          "alert_type": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              },
              "category": {
                "type": "string"
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "rule": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "severity": {
                "type": "integer"
              },
              "type": {
                "type": "string"
              },
              "pattern": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "pattern",
              "uuid"
            ]
          },
          "detection_type": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "similar": {
            "type": "integer"
          },
          "details": {
            "type": "string"
          },
          "ttps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name",
                "type"
              ]
            }
          },
          "adversaries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name",
                "type"
              ]
            }
          },
          "stix": {
            "type": "object"
          },
          "kill_chain_short_id": {
            "type": "string"
          },
          "number_of_unseen_comments": {
            "type": "integer"
          },
          "number_of_total_comments": {
            "type": "integer"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time"
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "time_to_ingest": {
            "type": "integer"
          },
          "time_to_detect": {
            "type": "integer"
          },
          "time_to_acknowledge": {
            "type": "integer"
          },
          "time_to_respond": {
            "type": "integer"
          },
          "time_to_resolve": {
            "type": "integer"
          },
          "connector_uuids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "cases": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "short_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "is_supplied": {
                  "type": "boolean"
                },
                "manual": {
                  "type": "boolean"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                },
                "unseen": {
                  "type": "boolean"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "created_at": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "entry_type": {
                  "type": "string"
                },
                "alert": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "previous_status": {
                      "type": "string"
                    }
                  }
                },
                "comment": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "display_name": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  }
                },
                "countermeasure": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "history_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "countermeasure_action_step": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "kill_chain": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "short_id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "previous_short_id": {
                      "type": "string"
                    }
                  }
                },
                "urgency": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "integer"
                    },
                    "previous_value": {
                      "type": "integer"
                    }
                  }
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "previous_value": {
                      "type": "string"
                    }
                  }
                },
                "alert_type": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "previous_value": {
                      "type": "string"
                    },
                    "previous_category": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "countermeasures": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "UUID of the countermeasure"
                },
                "model_uuid": {
                  "type": "string",
                  "description": "UUID of the model from which this countermeasure has been created"
                },
                "relevance": {
                  "type": "integer",
                  "description": "Relevance of the countermeasure"
                },
                "dynamic_relevance": {
                  "type": "integer",
                  "description": "Dynamic relevance of the countermeasure"
                },
                "duration": {
                  "type": "string",
                  "description": "Estimated duration to apply the countermeasures"
                },
                "status": {
                  "type": "string",
                  "description": "(deprecated) Status of the countermeasure"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was created"
                },
                "created_by": {
                  "type": "string",
                  "description": "UUID of profile that created the countermeasure"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "Type of the profile that created the countermeasure"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was activated"
                },
                "activated_by": {
                  "type": "string",
                  "description": "UUID of profile that activated the countermeasure"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "Type of the profile that activated the countermeasure"
                },
                "denied_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was denied"
                },
                "denied_by": {
                  "type": "string",
                  "description": "UUID of profile that denied the countermeasure"
                },
                "denied_by_type": {
                  "type": "string",
                  "description": "Type of the profile that denied the countermeasure"
                },
                "course_of_action": {
                  "type": "object",
                  "description": "(deprecated) STIX2 object course of action"
                },
                "action_steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Unique identifier (UUID) of the action step"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the action step"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the action step"
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the action step"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was created"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "UUID of profile that created the action step"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "Type of the profile that created the action step"
                      },
                      "activated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was activated"
                      },
                      "activated_by": {
                        "type": "string",
                        "description": "UUID of profile that activated the action step"
                      },
                      "activated_by_type": {
                        "type": "string",
                        "description": "Type of the profile that activated the action step"
                      },
                      "denied_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was denied"
                      },
                      "denied_by": {
                        "type": "string",
                        "description": "UUID of profile that denied the action step"
                      },
                      "denied_by_type": {
                        "type": "string",
                        "description": "Type of the profile that denied the action step"
                      },
                      "action_order": {
                        "type": "integer",
                        "description": "Position in the execution order of action steps"
                      },
                      "object": {
                        "type": "object",
                        "description": "Object associated to the action step"
                      },
                      "comments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "uuid": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Identifier of the comment"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content of the comment"
                            },
                            "author": {
                              "type": "string",
                              "description": "Author of the comment"
                            },
                            "date": {
                              "type": "integer"
                            },
                            "created_by": {
                              "type": "string",
                              "description": "The identifier of the creator of the comment"
                            },
                            "created_by_type": {
                              "type": "string",
                              "description": "The type of the creator of the comment"
                            }
                          },
                          "required": [
                            "author",
                            "content",
                            "created_by",
                            "created_by_type",
                            "date",
                            "uuid"
                          ]
                        }
                      },
                      "assignee": {
                        "type": "string",
                        "description": "UUID of the profile assigned to the progress of the action step"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the action step (e.g. `text`, `openc2`)"
                      }
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Name of the countermeasure"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the countermeasure"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "assignee": {
                  "type": "string",
                  "description": "UUID of the profile assigned to the progress of the countermeasure"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the countermeasure (e.g. `text`, `intelligence_center`, `openc2`)"
                },
                "external_ref": {
                  "type": "string",
                  "description": "Reference for countermeasures that comes from Analytic solution’s CTI"
                },
                "alert_uuid": {
                  "type": "string",
                  "description": "UUID of the alert related to the countermeasure"
                }
              }
            }
          },
          "similarity_strategy": {
            "description": "Strategy to use to consider alerts to be similar"
          }
        }
      },
      "AlertHistorySchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "created_at": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "entry_type": {
                  "type": "string"
                },
                "alert": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "previous_status": {
                      "type": "string"
                    }
                  }
                },
                "comment": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "display_name": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  }
                },
                "countermeasure": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "history_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "countermeasure_action_step": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "kill_chain": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "short_id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "previous_short_id": {
                      "type": "string"
                    }
                  }
                },
                "urgency": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "integer"
                    },
                    "previous_value": {
                      "type": "integer"
                    }
                  }
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "previous_value": {
                      "type": "string"
                    }
                  }
                },
                "alert_type": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "previous_value": {
                      "type": "string"
                    },
                    "previous_category": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertHistoryEntrySchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "entry_type": {
            "type": "string"
          },
          "alert": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "previous_status": {
                "type": "string"
              }
            }
          },
          "comment": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "content": {
                "type": "string"
              }
            }
          },
          "countermeasure": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            }
          },
          "history_comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "countermeasure_action_step": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "kill_chain": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "short_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "previous_short_id": {
                "type": "string"
              }
            }
          },
          "urgency": {
            "type": "object",
            "properties": {
              "value": {
                "type": "integer"
              },
              "previous_value": {
                "type": "integer"
              }
            }
          },
          "details": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              },
              "previous_value": {
                "type": "string"
              }
            }
          },
          "alert_type": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              },
              "category": {
                "type": "string"
              },
              "previous_value": {
                "type": "string"
              },
              "previous_category": {
                "type": "string"
              }
            }
          }
        }
      },
      "CommentsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation datetime of the comment"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The modification datetime of the comment"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the comment (alert_comment, countermeasure_comment, ...)"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the organization"
                },
                "alert_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The identifier of the alert associated to the comment"
                },
                "alert_short_id": {
                  "type": "string",
                  "description": "The short id of the alert associated to the comment"
                },
                "alert_title": {
                  "type": "string",
                  "description": "The title of the alert associated to the comment"
                },
                "alert_status_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The identifier of the status of the alert associated to the comment"
                },
                "alert_status_name": {
                  "type": "string",
                  "description": "The name of the status of the alert associated to the comment"
                },
                "rule_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The identifier of the rule of the alert associated to the comment"
                },
                "rule_name": {
                  "type": "string",
                  "description": "The name of the rule of the alert associated to the comment"
                },
                "case_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The identifier of the case associated to the comment"
                },
                "case_short_id": {
                  "type": "string",
                  "description": "The short id of the case associated to the comment"
                },
                "case_title": {
                  "type": "string",
                  "description": "The title of the case associated to the comment"
                },
                "case_status_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "the identifier of the status of the case associated to the comment"
                },
                "case_status_name": {
                  "type": "string",
                  "description": "The name of the status of the case associated to the comment"
                }
              },
              "required": [
                "author",
                "organization_uuid",
                "content",
                "created_at",
                "created_by",
                "created_by_type",
                "type",
                "updated_at",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertStatusWorkflowSchema": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "AlertCommentsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                },
                "unseen": {
                  "type": "boolean"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertCommentSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier of the comment"
          },
          "content": {
            "type": "string",
            "description": "Content of the comment"
          },
          "author": {
            "type": "string",
            "description": "Author of the comment"
          },
          "date": {
            "type": "integer"
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the creator of the comment"
          },
          "created_by_type": {
            "type": "string",
            "description": "The type of the creator of the comment"
          },
          "unseen": {
            "type": "boolean"
          }
        },
        "required": [
          "author",
          "content",
          "created_by",
          "created_by_type",
          "date",
          "uuid"
        ]
      },
      "ObjectsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Identifier of the object"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the object"
                },
                "display_name": {
                  "type": "string",
                  "description": "Display name of the object"
                },
                "pattern": {
                  "type": "string",
                  "description": "Detection pattern (for indicators)"
                },
                "description": {
                  "type": "string",
                  "description": "Display description of the object"
                },
                "embedded_relationships": {
                  "type": "object",
                  "description": "Relationships embedded in the object",
                  "additionalProperties": {
                    "type": "array",
                    "description": "Identifiers of the related objects",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "display_name",
                "id",
                "type"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "TimelineSchema": {
        "type": "object",
        "properties": {
          "timeline": {
            "type": "array",
            "description": "Evolution of the number of observed data",
            "items": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start of the point"
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End of the point"
                },
                "value": {
                  "type": "integer",
                  "description": "Value of the point"
                }
              },
              "required": [
                "end",
                "start",
                "value"
              ]
            }
          },
          "frame": {
            "description": "Recommanded frame to display",
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "date-time",
                "description": "Start of the frame"
              },
              "end": {
                "type": "string",
                "format": "date-time",
                "description": "End of the frame"
              }
            },
            "required": [
              "end",
              "start"
            ]
          }
        }
      },
      "AlertCountermeasuresSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "UUID of the countermeasure"
                },
                "model_uuid": {
                  "type": "string",
                  "description": "UUID of the model from which this countermeasure has been created"
                },
                "relevance": {
                  "type": "integer",
                  "description": "Relevance of the countermeasure"
                },
                "dynamic_relevance": {
                  "type": "integer",
                  "description": "Dynamic relevance of the countermeasure"
                },
                "duration": {
                  "type": "string",
                  "description": "Estimated duration to apply the countermeasures"
                },
                "status": {
                  "type": "string",
                  "description": "(deprecated) Status of the countermeasure"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was created"
                },
                "created_by": {
                  "type": "string",
                  "description": "UUID of profile that created the countermeasure"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "Type of the profile that created the countermeasure"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was activated"
                },
                "activated_by": {
                  "type": "string",
                  "description": "UUID of profile that activated the countermeasure"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "Type of the profile that activated the countermeasure"
                },
                "denied_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was denied"
                },
                "denied_by": {
                  "type": "string",
                  "description": "UUID of profile that denied the countermeasure"
                },
                "denied_by_type": {
                  "type": "string",
                  "description": "Type of the profile that denied the countermeasure"
                },
                "course_of_action": {
                  "type": "object",
                  "description": "(deprecated) STIX2 object course of action"
                },
                "action_steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Unique identifier (UUID) of the action step"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the action step"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the action step"
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the action step"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was created"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "UUID of profile that created the action step"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "Type of the profile that created the action step"
                      },
                      "activated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was activated"
                      },
                      "activated_by": {
                        "type": "string",
                        "description": "UUID of profile that activated the action step"
                      },
                      "activated_by_type": {
                        "type": "string",
                        "description": "Type of the profile that activated the action step"
                      },
                      "denied_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was denied"
                      },
                      "denied_by": {
                        "type": "string",
                        "description": "UUID of profile that denied the action step"
                      },
                      "denied_by_type": {
                        "type": "string",
                        "description": "Type of the profile that denied the action step"
                      },
                      "action_order": {
                        "type": "integer",
                        "description": "Position in the execution order of action steps"
                      },
                      "object": {
                        "type": "object",
                        "description": "Object associated to the action step"
                      },
                      "comments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "uuid": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Identifier of the comment"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content of the comment"
                            },
                            "author": {
                              "type": "string",
                              "description": "Author of the comment"
                            },
                            "date": {
                              "type": "integer"
                            },
                            "created_by": {
                              "type": "string",
                              "description": "The identifier of the creator of the comment"
                            },
                            "created_by_type": {
                              "type": "string",
                              "description": "The type of the creator of the comment"
                            }
                          },
                          "required": [
                            "author",
                            "content",
                            "created_by",
                            "created_by_type",
                            "date",
                            "uuid"
                          ]
                        }
                      },
                      "assignee": {
                        "type": "string",
                        "description": "UUID of the profile assigned to the progress of the action step"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the action step (e.g. `text`, `openc2`)"
                      }
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Name of the countermeasure"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the countermeasure"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "assignee": {
                  "type": "string",
                  "description": "UUID of the profile assigned to the progress of the countermeasure"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the countermeasure (e.g. `text`, `intelligence_center`, `openc2`)"
                },
                "external_ref": {
                  "type": "string",
                  "description": "Reference for countermeasures that comes from Analytic solution’s CTI"
                },
                "alert_uuid": {
                  "type": "string",
                  "description": "UUID of the alert related to the countermeasure"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertCountermeasureSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the countermeasure"
          },
          "model_uuid": {
            "type": "string",
            "description": "UUID of the model from which this countermeasure has been created"
          },
          "relevance": {
            "type": "integer",
            "description": "Relevance of the countermeasure"
          },
          "dynamic_relevance": {
            "type": "integer",
            "description": "Dynamic relevance of the countermeasure"
          },
          "duration": {
            "type": "string",
            "description": "Estimated duration to apply the countermeasures"
          },
          "status": {
            "type": "string",
            "description": "(deprecated) Status of the countermeasure"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was created"
          },
          "created_by": {
            "type": "string",
            "description": "UUID of profile that created the countermeasure"
          },
          "created_by_type": {
            "type": "string",
            "description": "Type of the profile that created the countermeasure"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was activated"
          },
          "activated_by": {
            "type": "string",
            "description": "UUID of profile that activated the countermeasure"
          },
          "activated_by_type": {
            "type": "string",
            "description": "Type of the profile that activated the countermeasure"
          },
          "denied_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was denied"
          },
          "denied_by": {
            "type": "string",
            "description": "UUID of profile that denied the countermeasure"
          },
          "denied_by_type": {
            "type": "string",
            "description": "Type of the profile that denied the countermeasure"
          },
          "course_of_action": {
            "type": "object",
            "description": "(deprecated) STIX2 object course of action"
          },
          "action_steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier (UUID) of the action step"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the action step"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the action step"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the action step"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was created"
                },
                "created_by": {
                  "type": "string",
                  "description": "UUID of profile that created the action step"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "Type of the profile that created the action step"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was activated"
                },
                "activated_by": {
                  "type": "string",
                  "description": "UUID of profile that activated the action step"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "Type of the profile that activated the action step"
                },
                "denied_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was denied"
                },
                "denied_by": {
                  "type": "string",
                  "description": "UUID of profile that denied the action step"
                },
                "denied_by_type": {
                  "type": "string",
                  "description": "Type of the profile that denied the action step"
                },
                "action_order": {
                  "type": "integer",
                  "description": "Position in the execution order of action steps"
                },
                "object": {
                  "type": "object",
                  "description": "Object associated to the action step"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "assignee": {
                  "type": "string",
                  "description": "UUID of the profile assigned to the progress of the action step"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the action step (e.g. `text`, `openc2`)"
                }
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the countermeasure"
          },
          "description": {
            "type": "string",
            "description": "Description of the countermeasure"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "assignee": {
            "type": "string",
            "description": "UUID of the profile assigned to the progress of the countermeasure"
          },
          "type": {
            "type": "string",
            "description": "Type of the countermeasure (e.g. `text`, `intelligence_center`, `openc2`)"
          },
          "external_ref": {
            "type": "string",
            "description": "Reference for countermeasures that comes from Analytic solution’s CTI"
          },
          "alert_uuid": {
            "type": "string",
            "description": "UUID of the alert related to the countermeasure"
          }
        }
      },
      "StatisticsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the threat"
                },
                "label": {
                  "type": "string",
                  "description": "Name of the threat"
                },
                "buckets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Key of the bucket"
                      },
                      "count": {
                        "type": "integer",
                        "description": "Number of alerts"
                      }
                    }
                  }
                },
                "total": {
                  "type": "integer",
                  "description": "Total number of alerts"
                }
              }
            }
          }
        }
      },
      "TaskIdSchema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "task_id"
        ]
      },
      "AlertSourcesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertTargetsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CommentSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier of the comment"
          },
          "content": {
            "type": "string",
            "description": "Content of the comment"
          },
          "author": {
            "type": "string",
            "description": "Author of the comment"
          },
          "date": {
            "type": "integer"
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the creator of the comment"
          },
          "created_by_type": {
            "type": "string",
            "description": "The type of the creator of the comment"
          }
        },
        "required": [
          "author",
          "content",
          "created_by",
          "created_by_type",
          "date",
          "uuid"
        ]
      },
      "CountermeasureActionStepSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier (UUID) of the action step"
          },
          "name": {
            "type": "string",
            "description": "Name of the action step"
          },
          "description": {
            "type": "string",
            "description": "Description of the action step"
          },
          "status": {
            "type": "string",
            "description": "Status of the action step"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the action step was created"
          },
          "created_by": {
            "type": "string",
            "description": "UUID of profile that created the action step"
          },
          "created_by_type": {
            "type": "string",
            "description": "Type of the profile that created the action step"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the action step was activated"
          },
          "activated_by": {
            "type": "string",
            "description": "UUID of profile that activated the action step"
          },
          "activated_by_type": {
            "type": "string",
            "description": "Type of the profile that activated the action step"
          },
          "denied_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the action step was denied"
          },
          "denied_by": {
            "type": "string",
            "description": "UUID of profile that denied the action step"
          },
          "denied_by_type": {
            "type": "string",
            "description": "Type of the profile that denied the action step"
          },
          "action_order": {
            "type": "integer",
            "description": "Position in the execution order of action steps"
          },
          "object": {
            "type": "object",
            "description": "Object associated to the action step"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "assignee": {
            "type": "string",
            "description": "UUID of the profile assigned to the progress of the action step"
          },
          "type": {
            "type": "string",
            "description": "Type of the action step (e.g. `text`, `openc2`)"
          }
        }
      },
      "AlertRulesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier of the rule"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the rule"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "organization uuid of the rule"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertEntitiesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the entity"
                },
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier of the entity"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "UUID of the organization"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CasesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "short_id": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "updated_by": {
                  "type": "string"
                },
                "updated_by_type": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "priority": {
                  "default": "medium",
                  "description": "priority of the case",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ]
                },
                "status": {
                  "type": "string"
                },
                "status_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "subscribers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "avatar_uuid": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "avatar_uuid",
                      "type"
                    ]
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "List of tags associated to the case",
                  "items": {
                    "type": "string"
                  }
                },
                "number_of_comments": {
                  "type": "integer"
                },
                "first_seen_at": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true,
                  "description": "Date and time of the first case event"
                },
                "last_seen_at": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true,
                  "description": "Date and time of the last case event"
                },
                "manual": {
                  "type": "boolean",
                  "x-nullable": true,
                  "description": "if True, indicates that the case was created manually"
                },
                "is_supplied": {
                  "type": "boolean",
                  "x-nullable": true,
                  "description": "if True, indicates that alerts can be automatically added to the case"
                },
                "verdict_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "x-nullable": true,
                  "description": "UUID of the verdict associated to the case"
                },
                "verdict": {
                  "x-nullable": true,
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "level": {
                      "type": "integer"
                    },
                    "stage": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "description",
                    "label",
                    "level",
                    "stage"
                  ]
                },
                "custom_status_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "x-nullable": true,
                  "description": "UUID of the custom status associated to the case"
                },
                "custom_status": {
                  "x-nullable": true,
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "level": {
                      "type": "integer"
                    },
                    "stage": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "description",
                    "label",
                    "level",
                    "stage"
                  ]
                },
                "custom_priority_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "x-nullable": true,
                  "description": "UUID of the priority associated to the case"
                },
                "custom_priority": {
                  "x-nullable": true,
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "level": {
                      "type": "integer"
                    },
                    "color": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "color",
                    "description",
                    "label",
                    "level"
                  ]
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "short_id",
                "status",
                "status_uuid",
                "title",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CaseSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "short_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "updated_by_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "default": "medium",
            "description": "priority of the case",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "avatar_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "avatar_uuid",
                "type"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "List of tags associated to the case",
            "items": {
              "type": "string"
            }
          },
          "number_of_comments": {
            "type": "integer"
          },
          "first_seen_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true,
            "description": "Date and time of the first case event"
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true,
            "description": "Date and time of the last case event"
          },
          "manual": {
            "type": "boolean",
            "x-nullable": true,
            "description": "if True, indicates that the case was created manually"
          },
          "is_supplied": {
            "type": "boolean",
            "x-nullable": true,
            "description": "if True, indicates that alerts can be automatically added to the case"
          },
          "verdict_uuid": {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "UUID of the verdict associated to the case"
          },
          "verdict": {
            "x-nullable": true,
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "level": {
                "type": "integer"
              },
              "stage": {
                "type": "string"
              }
            },
            "required": [
              "description",
              "label",
              "level",
              "stage"
            ]
          },
          "custom_status_uuid": {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "UUID of the custom status associated to the case"
          },
          "custom_status": {
            "x-nullable": true,
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "level": {
                "type": "integer"
              },
              "stage": {
                "type": "string"
              }
            },
            "required": [
              "description",
              "label",
              "level",
              "stage"
            ]
          },
          "custom_priority_uuid": {
            "type": "string",
            "format": "uuid",
            "x-nullable": true,
            "description": "UUID of the priority associated to the case"
          },
          "custom_priority": {
            "x-nullable": true,
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "level": {
                "type": "integer"
              },
              "color": {
                "type": "string"
              }
            },
            "required": [
              "color",
              "description",
              "label",
              "level"
            ]
          },
          "number_of_alerts": {
            "type": "integer"
          },
          "alerts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "title": {
                  "type": "string"
                },
                "created_at": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "integer"
                },
                "updated_by": {
                  "type": "string"
                },
                "updated_by_type": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "short_id": {
                  "type": "string"
                },
                "entity": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "uuid"
                  ]
                },
                "urgency": {
                  "description": "    The alert urgency can have two different representations in the api: a numerical and a textual representation.        | Urgency | Value |        | Low | [0-20[ |        | Moderate | [20-40[ |        | High | [40-60[ |        | Major | [60-80[ |        | Urgent | [80-100] |",
                  "type": "object",
                  "properties": {
                    "current_value": {
                      "type": "integer"
                    },
                    "value": {
                      "type": "integer"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "criticity": {
                      "type": "integer"
                    },
                    "display": {
                      "type": "string"
                    }
                  }
                },
                "alert_type": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "rule": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    },
                    "pattern": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "pattern",
                    "uuid"
                  ]
                },
                "detection_type": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "similar": {
                  "type": "integer"
                },
                "details": {
                  "type": "string"
                },
                "ttps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "adversaries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "stix": {
                  "type": "object"
                },
                "kill_chain_short_id": {
                  "type": "string"
                },
                "number_of_unseen_comments": {
                  "type": "integer"
                },
                "number_of_total_comments": {
                  "type": "integer"
                },
                "first_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "last_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "time_to_ingest": {
                  "type": "integer"
                },
                "time_to_detect": {
                  "type": "integer"
                },
                "time_to_acknowledge": {
                  "type": "integer"
                },
                "time_to_respond": {
                  "type": "integer"
                },
                "time_to_resolve": {
                  "type": "integer"
                },
                "connector_uuids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "cases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "is_supplied": {
                        "type": "boolean"
                      },
                      "manual": {
                        "type": "boolean"
                      },
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "short_id",
          "status",
          "status_uuid",
          "title",
          "uuid"
        ]
      },
      "CaseTagsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CasesStatisticsSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "open": {
                "type": "integer"
              },
              "closed": {
                "type": "integer"
              }
            }
          }
        }
      },
      "CaseCommentsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "content": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                }
              },
              "required": [
                "content",
                "created_at",
                "created_by",
                "created_by_type",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CaseCommentSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "content",
          "created_at",
          "created_by",
          "created_by_type",
          "uuid"
        ]
      },
      "AddedAlertsSchema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "AlertsCaseSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "title": {
                  "type": "string"
                },
                "created_at": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "integer"
                },
                "updated_by": {
                  "type": "string"
                },
                "updated_by_type": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "short_id": {
                  "type": "string"
                },
                "entity": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "uuid"
                  ]
                },
                "urgency": {
                  "description": "    The alert urgency can have two different representations in the api: a numerical and a textual representation.        | Urgency | Value |        | Low | [0-20[ |        | Moderate | [20-40[ |        | High | [40-60[ |        | Major | [60-80[ |        | Urgent | [80-100] |",
                  "type": "object",
                  "properties": {
                    "current_value": {
                      "type": "integer"
                    },
                    "value": {
                      "type": "integer"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "criticity": {
                      "type": "integer"
                    },
                    "display": {
                      "type": "string"
                    }
                  }
                },
                "alert_type": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    }
                  }
                },
                "status": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "rule": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    },
                    "pattern": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "pattern",
                    "uuid"
                  ]
                },
                "detection_type": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                },
                "similar": {
                  "type": "integer"
                },
                "details": {
                  "type": "string"
                },
                "ttps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "adversaries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "type"
                    ]
                  }
                },
                "stix": {
                  "type": "object"
                },
                "kill_chain_short_id": {
                  "type": "string"
                },
                "number_of_unseen_comments": {
                  "type": "integer"
                },
                "number_of_total_comments": {
                  "type": "integer"
                },
                "first_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "last_seen_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "time_to_ingest": {
                  "type": "integer"
                },
                "time_to_detect": {
                  "type": "integer"
                },
                "time_to_acknowledge": {
                  "type": "integer"
                },
                "time_to_respond": {
                  "type": "integer"
                },
                "time_to_resolve": {
                  "type": "integer"
                },
                "connector_uuids": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "cases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "is_supplied": {
                        "type": "boolean"
                      },
                      "manual": {
                        "type": "boolean"
                      },
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                },
                "description": {
                  "type": "string",
                  "description": "Description of the alert with special field that can be enriched"
                },
                "similarity_strategy": {
                  "description": "Strategy used to compute the similarity between alerts"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "CaseCountermeasuresSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "UUID of the countermeasure"
                },
                "model_uuid": {
                  "type": "string",
                  "description": "UUID of the model from which this countermeasure has been created"
                },
                "relevance": {
                  "type": "integer",
                  "description": "Relevance of the countermeasure"
                },
                "dynamic_relevance": {
                  "type": "integer",
                  "description": "Dynamic relevance of the countermeasure"
                },
                "duration": {
                  "type": "string",
                  "description": "Estimated duration to apply the countermeasures"
                },
                "status": {
                  "type": "string",
                  "description": "(deprecated) Status of the countermeasure"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was created"
                },
                "created_by": {
                  "type": "string",
                  "description": "UUID of profile that created the countermeasure"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "Type of the profile that created the countermeasure"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was activated"
                },
                "activated_by": {
                  "type": "string",
                  "description": "UUID of profile that activated the countermeasure"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "Type of the profile that activated the countermeasure"
                },
                "denied_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the countermeasure was denied"
                },
                "denied_by": {
                  "type": "string",
                  "description": "UUID of profile that denied the countermeasure"
                },
                "denied_by_type": {
                  "type": "string",
                  "description": "Type of the profile that denied the countermeasure"
                },
                "course_of_action": {
                  "type": "object",
                  "description": "(deprecated) STIX2 object course of action"
                },
                "action_steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "description": "Unique identifier (UUID) of the action step"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the action step"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the action step"
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the action step"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was created"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "UUID of profile that created the action step"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "Type of the profile that created the action step"
                      },
                      "activated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was activated"
                      },
                      "activated_by": {
                        "type": "string",
                        "description": "UUID of profile that activated the action step"
                      },
                      "activated_by_type": {
                        "type": "string",
                        "description": "Type of the profile that activated the action step"
                      },
                      "denied_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date the action step was denied"
                      },
                      "denied_by": {
                        "type": "string",
                        "description": "UUID of profile that denied the action step"
                      },
                      "denied_by_type": {
                        "type": "string",
                        "description": "Type of the profile that denied the action step"
                      },
                      "action_order": {
                        "type": "integer",
                        "description": "Position in the execution order of action steps"
                      },
                      "object": {
                        "type": "object",
                        "description": "Object associated to the action step"
                      },
                      "comments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "uuid": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Identifier of the comment"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content of the comment"
                            },
                            "author": {
                              "type": "string",
                              "description": "Author of the comment"
                            },
                            "date": {
                              "type": "integer"
                            },
                            "created_by": {
                              "type": "string",
                              "description": "The identifier of the creator of the comment"
                            },
                            "created_by_type": {
                              "type": "string",
                              "description": "The type of the creator of the comment"
                            }
                          },
                          "required": [
                            "author",
                            "content",
                            "created_by",
                            "created_by_type",
                            "date",
                            "uuid"
                          ]
                        }
                      },
                      "assignee": {
                        "type": "string",
                        "description": "UUID of the profile assigned to the progress of the action step"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the action step (e.g. `text`, `openc2`)"
                      }
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "description": "Name of the countermeasure"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the countermeasure"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "assignee": {
                  "type": "string",
                  "description": "UUID of the profile assigned to the progress of the countermeasure"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the countermeasure (e.g. `text`, `intelligence_center`, `openc2`)"
                },
                "external_ref": {
                  "type": "string",
                  "description": "Reference for countermeasures that comes from Analytic solution’s CTI"
                },
                "case_uuid": {
                  "type": "string",
                  "description": "UUID of the case related to the countermeasure"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "CaseCountermeasureSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the countermeasure"
          },
          "model_uuid": {
            "type": "string",
            "description": "UUID of the model from which this countermeasure has been created"
          },
          "relevance": {
            "type": "integer",
            "description": "Relevance of the countermeasure"
          },
          "dynamic_relevance": {
            "type": "integer",
            "description": "Dynamic relevance of the countermeasure"
          },
          "duration": {
            "type": "string",
            "description": "Estimated duration to apply the countermeasures"
          },
          "status": {
            "type": "string",
            "description": "(deprecated) Status of the countermeasure"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was created"
          },
          "created_by": {
            "type": "string",
            "description": "UUID of profile that created the countermeasure"
          },
          "created_by_type": {
            "type": "string",
            "description": "Type of the profile that created the countermeasure"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was activated"
          },
          "activated_by": {
            "type": "string",
            "description": "UUID of profile that activated the countermeasure"
          },
          "activated_by_type": {
            "type": "string",
            "description": "Type of the profile that activated the countermeasure"
          },
          "denied_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date the countermeasure was denied"
          },
          "denied_by": {
            "type": "string",
            "description": "UUID of profile that denied the countermeasure"
          },
          "denied_by_type": {
            "type": "string",
            "description": "Type of the profile that denied the countermeasure"
          },
          "course_of_action": {
            "type": "object",
            "description": "(deprecated) STIX2 object course of action"
          },
          "action_steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "Unique identifier (UUID) of the action step"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the action step"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the action step"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the action step"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was created"
                },
                "created_by": {
                  "type": "string",
                  "description": "UUID of profile that created the action step"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "Type of the profile that created the action step"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was activated"
                },
                "activated_by": {
                  "type": "string",
                  "description": "UUID of profile that activated the action step"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "Type of the profile that activated the action step"
                },
                "denied_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date the action step was denied"
                },
                "denied_by": {
                  "type": "string",
                  "description": "UUID of profile that denied the action step"
                },
                "denied_by_type": {
                  "type": "string",
                  "description": "Type of the profile that denied the action step"
                },
                "action_order": {
                  "type": "integer",
                  "description": "Position in the execution order of action steps"
                },
                "object": {
                  "type": "object",
                  "description": "Object associated to the action step"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Identifier of the comment"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the comment"
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the comment"
                      },
                      "date": {
                        "type": "integer"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "The identifier of the creator of the comment"
                      },
                      "created_by_type": {
                        "type": "string",
                        "description": "The type of the creator of the comment"
                      }
                    },
                    "required": [
                      "author",
                      "content",
                      "created_by",
                      "created_by_type",
                      "date",
                      "uuid"
                    ]
                  }
                },
                "assignee": {
                  "type": "string",
                  "description": "UUID of the profile assigned to the progress of the action step"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the action step (e.g. `text`, `openc2`)"
                }
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the countermeasure"
          },
          "description": {
            "type": "string",
            "description": "Description of the countermeasure"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Identifier of the comment"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the comment"
                },
                "author": {
                  "type": "string",
                  "description": "Author of the comment"
                },
                "date": {
                  "type": "integer"
                },
                "created_by": {
                  "type": "string",
                  "description": "The identifier of the creator of the comment"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The type of the creator of the comment"
                }
              },
              "required": [
                "author",
                "content",
                "created_by",
                "created_by_type",
                "date",
                "uuid"
              ]
            }
          },
          "assignee": {
            "type": "string",
            "description": "UUID of the profile assigned to the progress of the countermeasure"
          },
          "type": {
            "type": "string",
            "description": "Type of the countermeasure (e.g. `text`, `intelligence_center`, `openc2`)"
          },
          "external_ref": {
            "type": "string",
            "description": "Reference for countermeasures that comes from Analytic solution’s CTI"
          },
          "case_uuid": {
            "type": "string",
            "description": "UUID of the case related to the countermeasure"
          }
        }
      },
      "CaseThreatsSchema": {
        "type": "object",
        "properties": {
          "threats": {
            "type": "array",
            "description": "Dict of threats associated to the case's alerts",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier of the threat"
                },
                "type": {
                  "type": "string",
                  "description": "Type of threat"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the threat"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the threat"
                }
              }
            }
          }
        }
      },
      "CaseAssetsSchema": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "description": "List of assets uuids associated to the case's alerts",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CaseEntitiesSchema": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "description": "List of entities uuids associated to the case's alerts",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CaseKillChainSchema": {
        "type": "object",
        "properties": {
          "killchains": {
            "type": "array",
            "description": "List of kill chain short ids associated to the case's alerts",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CaseRulesSchema": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "description": "List of rules associated to the case's alerts",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the rule"
                }
              },
              "required": [
                "uuid"
              ]
            }
          }
        }
      },
      "CaseHistoryListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "created_at": {
                  "type": "string"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "action": {
                  "type": "object"
                },
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "created_by_type",
                "type",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertThreatsCounterSchema": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Number of returned elements"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier of the TTP."
                },
                "type": {
                  "type": "string",
                  "description": "Type of TTP (could be “malware”, “tool” or “attack-pattern”."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the threat"
                },
                "count": {
                  "type": "integer",
                  "description": "Number of occurrence of that TTP"
                }
              },
              "required": [
                "count",
                "id",
                "name",
                "type"
              ]
            }
          }
        },
        "required": [
          "total"
        ]
      },
      "SOCKPIsSchema": {
        "type": "object",
        "properties": {
          "mean_time_to_ingest": {
            "type": "integer",
            "description": "Mean time to ingest (in seconds)"
          },
          "mean_time_to_detect": {
            "type": "integer",
            "description": "Mean time to detect (in seconds)"
          },
          "mean_time_to_acknowledge": {
            "type": "integer",
            "description": "Mean time to acknowledge (in seconds)"
          },
          "mean_time_to_respond": {
            "type": "integer",
            "description": "Mean time to respond (in seconds)"
          },
          "mean_time_to_resolve": {
            "type": "integer",
            "description": "Mean time to resolve (in seconds)"
          }
        }
      },
      "AlertKillChainsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "integer",
                "description": "Order identifier of the kill chain step"
              },
              "uuid": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier of the kill chain step"
              },
              "short_id": {
                "type": "string",
                "description": "Unique short id of the kill chain step"
              },
              "name": {
                "type": "string",
                "description": "Name of the kill chain step"
              },
              "description": {
                "type": "string",
                "description": "Description of the kill chain step"
              },
              "stix_name": {
                "type": "string",
                "description": "The STIXv2 name for this kill chain step"
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "AlertKillChainSchema": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Order identifier of the kill chain step"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the kill chain step"
          },
          "short_id": {
            "type": "string",
            "description": "Unique short id of the kill chain step"
          },
          "name": {
            "type": "string",
            "description": "Name of the kill chain step"
          },
          "description": {
            "type": "string",
            "description": "Description of the kill chain step"
          },
          "stix_name": {
            "type": "string",
            "description": "The STIXv2 name for this kill chain step"
          }
        }
      },
      "ListCustomStatusesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "level": {
                  "type": "integer"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "updated_by": {
                  "type": "string",
                  "x-nullable": true
                },
                "updated_by_type": {
                  "type": "string",
                  "x-nullable": true
                },
                "stage": {
                  "enum": [
                    "open",
                    "closed",
                    "in_progress"
                  ],
                  "description": "Stage of the custom status"
                },
                "label": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "is_used": {
                  "type": "boolean"
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "description",
                "label",
                "level",
                "stage",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "CustomStatusSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "updated_by": {
            "type": "string",
            "x-nullable": true
          },
          "updated_by_type": {
            "type": "string",
            "x-nullable": true
          },
          "stage": {
            "enum": [
              "open",
              "closed",
              "in_progress"
            ],
            "description": "Stage of the custom status"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_used": {
            "type": "boolean"
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "label",
          "level",
          "stage",
          "uuid"
        ]
      },
      "ListCustomVerdictsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "level": {
                  "type": "integer"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "updated_by": {
                  "type": "string",
                  "x-nullable": true
                },
                "updated_by_type": {
                  "type": "string",
                  "x-nullable": true
                },
                "stage": {
                  "enum": [
                    "false_positive",
                    "true_positive"
                  ],
                  "description": "Stage of the custom verdict"
                },
                "label": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "is_used": {
                  "type": "boolean"
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "description",
                "label",
                "level",
                "stage",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "CustomVerdictSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "updated_by": {
            "type": "string",
            "x-nullable": true
          },
          "updated_by_type": {
            "type": "string",
            "x-nullable": true
          },
          "stage": {
            "enum": [
              "false_positive",
              "true_positive"
            ],
            "description": "Stage of the custom verdict"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_used": {
            "type": "boolean"
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "label",
          "level",
          "stage",
          "uuid"
        ]
      },
      "ListCustomPrioritiesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "level": {
                  "type": "integer"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "created_by": {
                  "type": "string"
                },
                "created_by_type": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "x-nullable": true
                },
                "updated_by": {
                  "type": "string",
                  "x-nullable": true
                },
                "updated_by_type": {
                  "type": "string",
                  "x-nullable": true
                },
                "color": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "is_used": {
                  "type": "boolean"
                }
              },
              "required": [
                "color",
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "description",
                "label",
                "level",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "CustomPrioritySchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "created_by_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-nullable": true
          },
          "updated_by": {
            "type": "string",
            "x-nullable": true
          },
          "updated_by_type": {
            "type": "string",
            "x-nullable": true
          },
          "color": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_used": {
            "type": "boolean"
          }
        },
        "required": [
          "color",
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "description",
          "label",
          "level",
          "uuid"
        ]
      },
      "PlaybookInfoSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the playbook"
          },
          "version": {
            "type": "integer",
            "description": "The version number for this revision"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the organization this playbook belongs to"
          },
          "meta_organization_uuids": {
            "type": "array",
            "description": "The unique identifiers of the organizations having an instance of the playbook",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the playbook"
          },
          "status_message": {
            "type": "string",
            "description": "The reason of the status of the playbook",
            "x-nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the playbook"
          },
          "description": {
            "type": "string",
            "description": "The description of the playbook"
          },
          "meta_playbook": {
            "type": "boolean",
            "description": "Whether it is a meta playbook"
          },
          "parent_uuid": {
            "type": "string",
            "description": "The unique identifier of the parent playbook"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the playbook"
          },
          "created_by": {
            "type": "string",
            "description": "The unique identifier of the creator of the playbook"
          },
          "created_by_type": {
            "type": "string",
            "description": "The account type of the creator of the playbook"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the playbook"
          },
          "updated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to update the playbook"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the last account to update the playbook"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activation date of the playbook"
          },
          "activated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to activate the playbook"
          },
          "activated_by_type": {
            "type": "string",
            "description": "The type of the last account to activate the playbook"
          },
          "trigger_configurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the trigger configuration"
                },
                "trigger_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the trigger"
                }
              },
              "required": [
                "trigger_uuid",
                "uuid"
              ]
            }
          },
          "status_tags": {
            "type": "array",
            "description": "The status tags of the playbook",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "name",
          "status",
          "status_message",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid",
          "version"
        ]
      },
      "PlaybookListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the playbook"
                },
                "version": {
                  "type": "integer",
                  "description": "The version number for this revision"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the organization this playbook belongs to"
                },
                "meta_organization_uuids": {
                  "type": "array",
                  "description": "The unique identifiers of the organizations having an instance of the playbook",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "The status of the playbook"
                },
                "status_message": {
                  "type": "string",
                  "description": "The reason of the status of the playbook",
                  "x-nullable": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the playbook"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the playbook"
                },
                "meta_playbook": {
                  "type": "boolean",
                  "description": "Whether it is a meta playbook"
                },
                "parent_uuid": {
                  "type": "string",
                  "description": "The unique identifier of the parent playbook"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the playbook"
                },
                "created_by": {
                  "type": "string",
                  "description": "The unique identifier of the creator of the playbook"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The account type of the creator of the playbook"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last modification date of the playbook"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to update the playbook"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The type of the last account to update the playbook"
                },
                "activated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last activation date of the playbook"
                },
                "activated_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to activate the playbook"
                },
                "activated_by_type": {
                  "type": "string",
                  "description": "The type of the last account to activate the playbook"
                },
                "trigger_configurations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique identifier of the trigger configuration"
                      },
                      "trigger_uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique identifier of the trigger"
                      }
                    },
                    "required": [
                      "trigger_uuid",
                      "uuid"
                    ]
                  }
                },
                "status_tags": {
                  "type": "array",
                  "description": "The status tags of the playbook",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "name",
                "status",
                "status_message",
                "updated_at",
                "updated_by",
                "updated_by_type",
                "uuid",
                "version"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "PlaybookSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the playbook"
          },
          "version": {
            "type": "integer",
            "description": "The version number for this revision"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the organization this playbook belongs to"
          },
          "meta_organization_uuids": {
            "type": "array",
            "description": "The unique identifiers of the organizations having an instance of the playbook",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the playbook"
          },
          "status_message": {
            "type": "string",
            "description": "The reason of the status of the playbook",
            "x-nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the playbook"
          },
          "description": {
            "type": "string",
            "description": "The description of the playbook"
          },
          "meta_playbook": {
            "type": "boolean",
            "description": "Whether it is a meta playbook"
          },
          "parent_uuid": {
            "type": "string",
            "description": "The unique identifier of the parent playbook"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the playbook"
          },
          "created_by": {
            "type": "string",
            "description": "The unique identifier of the creator of the playbook"
          },
          "created_by_type": {
            "type": "string",
            "description": "The account type of the creator of the playbook"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the playbook"
          },
          "updated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to update the playbook"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the last account to update the playbook"
          },
          "activated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activation date of the playbook"
          },
          "activated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to activate the playbook"
          },
          "activated_by_type": {
            "type": "string",
            "description": "The type of the last account to activate the playbook"
          },
          "trigger_configurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the trigger configuration"
                },
                "trigger_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the trigger"
                }
              },
              "required": [
                "trigger_uuid",
                "uuid"
              ]
            }
          },
          "status_tags": {
            "type": "array",
            "description": "The status tags of the playbook",
            "items": {
              "type": "string"
            }
          },
          "content": {
            "type": "object",
            "description": "Detailed playbook content",
            "additionalProperties": {}
          }
        },
        "required": [
          "organization_uuid",
          "content",
          "created_at",
          "created_by",
          "created_by_type",
          "name",
          "status",
          "status_message",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid",
          "version"
        ]
      },
      "PlaybookStatisticsSchema": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "object",
            "description": "Statistics about the statuses of the playbooks",
            "additionalProperties": {}
          }
        }
      },
      "PlaybookRunsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The playbook run uuid"
                },
                "playbook_content": {
                  "type": "object",
                  "description": "Content of the playbook for this run",
                  "additionalProperties": {}
                },
                "playbook_uuid": {
                  "type": "string",
                  "description": "UUID of the Playbook"
                },
                "playbook_name": {
                  "type": "string",
                  "description": "Name of the Playbook"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "The playbook run organization uuid"
                },
                "event": {
                  "type": "string",
                  "description": "The event name of the playbook run"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the playbook run"
                },
                "store": {
                  "type": "object",
                  "description": "Store of the playbook run",
                  "additionalProperties": {}
                },
                "started_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Starting date of the playbook run"
                },
                "started_by": {
                  "type": "string",
                  "description": "Entity that started the playbook run"
                },
                "started_by_type": {
                  "type": "string",
                  "description": "Type of the entity that started the the playbook run"
                },
                "pending_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Pending date of the playbook run"
                },
                "running_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Running date of the playbook run"
                },
                "finished_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Finished date of the playbook run"
                }
              },
              "required": [
                "organization_uuid",
                "event",
                "playbook_name",
                "playbook_uuid",
                "started_at",
                "started_by",
                "started_by_type",
                "status",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "PlaybookRunSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The playbook run uuid"
          },
          "playbook_content": {
            "type": "object",
            "description": "Content of the playbook for this run",
            "additionalProperties": {}
          },
          "playbook_uuid": {
            "type": "string",
            "description": "UUID of the Playbook"
          },
          "playbook_name": {
            "type": "string",
            "description": "Name of the Playbook"
          },
          "organization_uuid": {
            "type": "string",
            "description": "The playbook run organization uuid"
          },
          "event": {
            "type": "string",
            "description": "The event name of the playbook run"
          },
          "status": {
            "type": "string",
            "description": "Status of the playbook run"
          },
          "store": {
            "type": "object",
            "description": "Store of the playbook run",
            "additionalProperties": {}
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Starting date of the playbook run"
          },
          "started_by": {
            "type": "string",
            "description": "Entity that started the playbook run"
          },
          "started_by_type": {
            "type": "string",
            "description": "Type of the entity that started the the playbook run"
          },
          "pending_at": {
            "type": "string",
            "format": "date-time",
            "description": "Pending date of the playbook run"
          },
          "running_at": {
            "type": "string",
            "format": "date-time",
            "description": "Running date of the playbook run"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "Finished date of the playbook run"
          }
        },
        "required": [
          "organization_uuid",
          "event",
          "playbook_name",
          "playbook_uuid",
          "started_at",
          "started_by",
          "started_by_type",
          "status",
          "uuid"
        ]
      },
      "PlaybookRunDetailsSchema": {
        "type": "object",
        "properties": {
          "playbook_run": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "description": "The playbook run uuid"
              },
              "playbook_content": {
                "type": "object",
                "description": "Content of the playbook for this run",
                "additionalProperties": {}
              },
              "playbook_uuid": {
                "type": "string",
                "description": "UUID of the Playbook"
              },
              "playbook_name": {
                "type": "string",
                "description": "Name of the Playbook"
              },
              "organization_uuid": {
                "type": "string",
                "description": "The playbook run organization uuid"
              },
              "event": {
                "type": "string",
                "description": "The event name of the playbook run"
              },
              "status": {
                "type": "string",
                "description": "Status of the playbook run"
              },
              "store": {
                "type": "object",
                "description": "Store of the playbook run",
                "additionalProperties": {}
              },
              "started_at": {
                "type": "string",
                "format": "date-time",
                "description": "Starting date of the playbook run"
              },
              "started_by": {
                "type": "string",
                "description": "Entity that started the playbook run"
              },
              "started_by_type": {
                "type": "string",
                "description": "Type of the entity that started the the playbook run"
              },
              "pending_at": {
                "type": "string",
                "format": "date-time",
                "description": "Pending date of the playbook run"
              },
              "running_at": {
                "type": "string",
                "format": "date-time",
                "description": "Running date of the playbook run"
              },
              "finished_at": {
                "type": "string",
                "format": "date-time",
                "description": "Finished date of the playbook run"
              }
            },
            "required": [
              "organization_uuid",
              "event",
              "playbook_name",
              "playbook_uuid",
              "started_at",
              "started_by",
              "started_by_type",
              "status",
              "uuid"
            ]
          },
          "playbook": {
            "type": "object",
            "description": "Detailed playbook content",
            "additionalProperties": {}
          },
          "node_runs": {
            "type": "object",
            "description": "Node Runs",
            "additionalProperties": {}
          }
        },
        "required": [
          "node_runs",
          "playbook"
        ]
      },
      "TriggerConfigurationSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the Node Configuration"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the organization this Node Configuration belongs to"
          },
          "module_configuration_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Module Configuration"
          },
          "name": {
            "type": "string",
            "description": "The name of the Node Configuration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the Node Configuration"
          },
          "created_by": {
            "type": "string",
            "description": "The unique identifier of the creator of the Node Configuration"
          },
          "created_by_type": {
            "type": "string",
            "description": "The account type of the creator of the Node Configuration"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the Node Configuration"
          },
          "updated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to update the Node Configuration"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the last account to update the Node Configuration"
          },
          "deleted": {
            "type": "boolean",
            "description": "Determine if the Node Configuration is set at \"deleted\""
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activation date of the Node Configuration"
          },
          "deleted_by": {
            "type": "string",
            "description": "The unique identifier of the last account to activate the Node Configuration"
          },
          "deleted_by_type": {
            "type": "string",
            "description": "The type of the last account to activate the Node Configuration"
          },
          "value": {
            "type": "object",
            "description": "The Node Configuration value",
            "additionalProperties": {}
          },
          "trigger_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Node"
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "module_configuration_uuid",
          "name",
          "trigger_uuid",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid"
        ]
      },
      "TriggerConfigurationListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the Node Configuration"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the organization this Node Configuration belongs to"
                },
                "module_configuration_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "UUID of the Module Configuration"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the Node Configuration"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the Node Configuration"
                },
                "created_by": {
                  "type": "string",
                  "description": "The unique identifier of the creator of the Node Configuration"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The account type of the creator of the Node Configuration"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last modification date of the Node Configuration"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to update the Node Configuration"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The type of the last account to update the Node Configuration"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "Determine if the Node Configuration is set at \"deleted\""
                },
                "deleted_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last activation date of the Node Configuration"
                },
                "deleted_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to activate the Node Configuration"
                },
                "deleted_by_type": {
                  "type": "string",
                  "description": "The type of the last account to activate the Node Configuration"
                },
                "value": {
                  "type": "object",
                  "description": "The Node Configuration value",
                  "additionalProperties": {}
                },
                "trigger_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "UUID of the Node"
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "module_configuration_uuid",
                "name",
                "trigger_uuid",
                "updated_at",
                "updated_by",
                "updated_by_type",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "RetrieveLogsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid"
                },
                "level": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "date": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          },
          "errors": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "ActionsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The action uuid"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the action"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the action"
                },
                "docker": {
                  "type": "string",
                  "description": "The action's docker image"
                },
                "docker_parameters": {
                  "type": "string",
                  "description": "The parameters of the action's docker image"
                },
                "outputs": {
                  "type": "object",
                  "description": "Pending date of the action",
                  "additionalProperties": {}
                },
                "module_uuid": {
                  "type": "string",
                  "description": "UUID of the module this action belongs to"
                },
                "arguments": {
                  "type": "object",
                  "description": "Type of the entity that started the the action",
                  "additionalProperties": {}
                },
                "results": {
                  "type": "object",
                  "description": "Finished date of the action",
                  "additionalProperties": {}
                },
                "template": {
                  "type": "string",
                  "description": "The template to display the result of an action execution"
                }
              },
              "required": [
                "docker",
                "module_uuid",
                "name",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ActionSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The action uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the action"
          },
          "description": {
            "type": "string",
            "description": "Description of the action"
          },
          "docker": {
            "type": "string",
            "description": "The action's docker image"
          },
          "docker_parameters": {
            "type": "string",
            "description": "The parameters of the action's docker image"
          },
          "outputs": {
            "type": "object",
            "description": "Pending date of the action",
            "additionalProperties": {}
          },
          "module_uuid": {
            "type": "string",
            "description": "UUID of the module this action belongs to"
          },
          "arguments": {
            "type": "object",
            "description": "Type of the entity that started the the action",
            "additionalProperties": {}
          },
          "results": {
            "type": "object",
            "description": "Finished date of the action",
            "additionalProperties": {}
          },
          "template": {
            "type": "string",
            "description": "The template to display the result of an action execution"
          }
        },
        "required": [
          "docker",
          "module_uuid",
          "name",
          "uuid"
        ]
      },
      "NodeRunUUIDSchema": {
        "type": "object",
        "properties": {
          "node_run_uuid": {
            "type": "string",
            "description": "The node run uuid"
          }
        },
        "required": [
          "node_run_uuid"
        ]
      },
      "NodesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "description": "The node uuid"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the node"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the node"
                },
                "docker": {
                  "type": "string",
                  "description": "The node's docker image"
                },
                "docker_parameters": {
                  "type": "string",
                  "description": "The parameters of the node's docker image"
                },
                "module_uuid": {
                  "type": "string",
                  "description": "UUID of the node's module"
                },
                "organization_uuid": {
                  "type": "string",
                  "description": "UUID of the module's organization"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "TriggerSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The node uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the node"
          },
          "description": {
            "type": "string",
            "description": "Description of the node"
          },
          "docker": {
            "type": "string",
            "description": "The node's docker image"
          },
          "docker_parameters": {
            "type": "string",
            "description": "The parameters of the node's docker image"
          },
          "module_uuid": {
            "type": "string",
            "description": "UUID of the node's module"
          },
          "organization_uuid": {
            "type": "string",
            "description": "UUID of the module's organization"
          },
          "arguments": {
            "type": "object",
            "description": "The node's arguments",
            "additionalProperties": {}
          },
          "webhook": {
            "type": "boolean",
            "description": "The Trigger is a webhook (push)"
          },
          "outputs": {
            "type": "object",
            "description": "The trigger's outputs",
            "additionalProperties": {}
          },
          "results": {
            "type": "object",
            "description": "The trigger's results",
            "additionalProperties": {}
          }
        }
      },
      "modules_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/module_simple_d_t_o",
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "module_simple_d_t_o": {
        "required": [
          "created_at",
          "name",
          "release_status",
          "supports_validation",
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The module's uuid"
          },
          "organization_uuid": {
            "type": "string",
            "description": "The organization's uuid"
          },
          "name": {
            "type": "string",
            "description": "Module's name"
          },
          "docker": {
            "type": "string",
            "description": "Module's docker image"
          },
          "description": {
            "type": "string",
            "description": "Description of the module"
          },
          "image": {
            "type": "string",
            "description": "Module's logo (as a Data URI)"
          },
          "configuration": {
            "type": "string",
            "description": "Module's configuration"
          },
          "version": {
            "type": "string",
            "description": "The module's version"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The categories of the module"
            }
          },
          "release_status": {
            "type": "string",
            "description": "Release status of the module"
          },
          "popularity_score": {
            "type": "integer",
            "description": "Popularity score of the module",
            "default": 0
          },
          "nb_related_actions": {
            "type": "integer",
            "description": "Number of Actions linked to this Module",
            "default": 0
          },
          "nb_related_triggers": {
            "type": "integer",
            "description": "Number of Triggers linked to this Module",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the module"
          },
          "created_by": {
            "type": "string",
            "description": "Identity that created the module"
          },
          "created_by_type": {
            "type": "string",
            "description": "Identity type that created the module"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Update date of the module"
          },
          "updated_by": {
            "type": "string",
            "description": "Identity that updated the module"
          },
          "updated_by_type": {
            "type": "string",
            "description": "Identity type that updated the module"
          },
          "supports_validation": {
            "type": "boolean",
            "description": "Module supports account validation"
          }
        },
        "type": "object"
      },
      "module_categories_d_t_o": {
        "required": [
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ModuleConfigurationSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the Module Configuration"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the organization this Module Configuration belongs to"
          },
          "module_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Module"
          },
          "name": {
            "type": "string",
            "description": "The name of the Module Configuration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the Module Configuration"
          },
          "created_by": {
            "type": "string",
            "description": "The unique identifier of the creator of the Module Configuration"
          },
          "created_by_type": {
            "type": "string",
            "description": "The account type of the creator of the Module Configuration"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the Module Configuration"
          },
          "updated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to update the Module Configuration"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the last account to update the Module Configuration"
          },
          "deleted": {
            "type": "boolean",
            "description": "Determine if the Module Configuration is set at \"deleted\""
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activation date of the Module Configuration"
          },
          "deleted_by": {
            "type": "string",
            "description": "The unique identifier of the last account to activate the Module Configuration"
          },
          "deleted_by_type": {
            "type": "string",
            "description": "The type of the last account to activate the Module Configuration"
          },
          "value": {
            "type": "object",
            "description": "The Module Configuration value",
            "additionalProperties": {}
          }
        },
        "required": [
          "organization_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "module_uuid",
          "name",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid",
          "value"
        ]
      },
      "ModuleConfigurationListWithModuleSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the Module Configuration"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the organization this Module Configuration belongs to"
                },
                "module_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "UUID of the Module"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the Module Configuration"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the Module Configuration"
                },
                "created_by": {
                  "type": "string",
                  "description": "The unique identifier of the creator of the Module Configuration"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The account type of the creator of the Module Configuration"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last modification date of the Module Configuration"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to update the Module Configuration"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The type of the last account to update the Module Configuration"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "Determine if the Module Configuration is set at \"deleted\""
                },
                "deleted_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last activation date of the Module Configuration"
                },
                "deleted_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to activate the Module Configuration"
                },
                "deleted_by_type": {
                  "type": "string",
                  "description": "The type of the last account to activate the Module Configuration"
                },
                "module": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "The module's uuid"
                    },
                    "name": {
                      "type": "string",
                      "description": "Module's name"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the module"
                    },
                    "image": {
                      "type": "string",
                      "description": "Module's logo (as a Data URI)"
                    },
                    "configuration": {
                      "type": "object",
                      "description": "Module's configuration",
                      "additionalProperties": {}
                    },
                    "changelog": {
                      "type": "string",
                      "description": "The changelog of the module"
                    },
                    "categories": {
                      "type": "array",
                      "description": "The categories of the module",
                      "items": {
                        "type": "string"
                      }
                    },
                    "nb_related_actions": {
                      "type": "integer",
                      "description": "Number of Actions linked to this Module"
                    },
                    "nb_related_triggers": {
                      "type": "integer",
                      "description": "Number of Triggers linked to this Module"
                    },
                    "supports_validation": {
                      "type": "boolean",
                      "description": "Module supports validation"
                    }
                  }
                }
              },
              "required": [
                "organization_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "module_uuid",
                "name",
                "updated_at",
                "updated_by",
                "updated_by_type",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ModuleConfigurationUsageSchema": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "integer",
            "description": "Number of actions associated to the module configuration"
          },
          "triggers": {
            "type": "integer",
            "description": "Number of triggers associated to the module configuration"
          },
          "playbooks": {
            "type": "integer",
            "description": "Number of playbooks associated to the module configuration"
          },
          "connectors": {
            "type": "integer",
            "description": "Number of connectors associated to the module configuration"
          }
        }
      },
      "NodeRunSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the Node Run"
          },
          "node_type": {
            "type": "string",
            "description": "The node's type (trigger, action, operator)"
          },
          "node_id": {
            "type": "integer",
            "description": "The node ID in the playbook's context"
          },
          "parent_node_run_id": {
            "type": "integer",
            "description": "The ID of the parent node run"
          },
          "iteration": {
            "type": "integer",
            "description": "The iteration of the loop"
          },
          "status": {
            "type": "string",
            "description": "The status of the action run"
          },
          "error": {
            "type": "string",
            "description": "Error message raised by the action run"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the action run"
          },
          "pending_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the action run was queued"
          },
          "running_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the action run was launched"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the action run was finished"
          },
          "arguments": {
            "type": "object",
            "description": "Action Run Arguments",
            "additionalProperties": {}
          },
          "outputs": {
            "type": "object",
            "description": "Action Run Outputs",
            "additionalProperties": {}
          },
          "results": {
            "type": "object",
            "description": "Action Run Results",
            "additionalProperties": {}
          },
          "logs": {
            "type": "string",
            "description": "Action Run Logs"
          }
        },
        "required": [
          "iteration",
          "node_id",
          "node_type",
          "parent_node_run_id",
          "started_at",
          "status",
          "uuid"
        ]
      },
      "PlaybookRunsCountersPerPlaybookSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "description": "Statistics for each playbook",
            "additionalProperties": {}
          },
          "total": {
            "type": "integer",
            "description": "Number of counters that matched the criteria"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "NodeSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The node uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the node"
          },
          "description": {
            "type": "string",
            "description": "Description of the node"
          },
          "docker": {
            "type": "string",
            "description": "The node's docker image"
          },
          "docker_parameters": {
            "type": "string",
            "description": "The parameters of the node's docker image"
          },
          "module_uuid": {
            "type": "string",
            "description": "UUID of the node's module"
          },
          "organization_uuid": {
            "type": "string",
            "description": "UUID of the module's organization"
          },
          "arguments": {
            "type": "object",
            "description": "The node's arguments",
            "additionalProperties": {}
          }
        }
      },
      "ConnectorConfigurationSchema": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the Node Configuration"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the organization this Node Configuration belongs to"
          },
          "module_configuration_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Module Configuration"
          },
          "name": {
            "type": "string",
            "description": "The name of the Node Configuration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation date of the Node Configuration"
          },
          "created_by": {
            "type": "string",
            "description": "The unique identifier of the creator of the Node Configuration"
          },
          "created_by_type": {
            "type": "string",
            "description": "The account type of the creator of the Node Configuration"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last modification date of the Node Configuration"
          },
          "updated_by": {
            "type": "string",
            "description": "The unique identifier of the last account to update the Node Configuration"
          },
          "updated_by_type": {
            "type": "string",
            "description": "The type of the last account to update the Node Configuration"
          },
          "deleted": {
            "type": "boolean",
            "description": "Determine if the Node Configuration is set at \"deleted\""
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activation date of the Node Configuration"
          },
          "deleted_by": {
            "type": "string",
            "description": "The unique identifier of the last account to activate the Node Configuration"
          },
          "deleted_by_type": {
            "type": "string",
            "description": "The type of the last account to activate the Node Configuration"
          },
          "value": {
            "type": "object",
            "description": "The Node Configuration value",
            "additionalProperties": {}
          },
          "connector_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the Connector Configuration"
          },
          "display_status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "STOPPED",
              "ERROR",
              "CRITICAL_ERROR",
              "STARTING",
              "STOPPING"
            ],
            "description": "Current status of the Connector Configuration"
          }
        },
        "required": [
          "organization_uuid",
          "connector_uuid",
          "created_at",
          "created_by",
          "created_by_type",
          "module_configuration_uuid",
          "name",
          "updated_at",
          "updated_by",
          "updated_by_type",
          "uuid"
        ]
      },
      "ConnectorConfigurationListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the Node Configuration"
                },
                "organization_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The unique identifier of the organization this Node Configuration belongs to"
                },
                "module_configuration_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "UUID of the Module Configuration"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the Node Configuration"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The creation date of the Node Configuration"
                },
                "created_by": {
                  "type": "string",
                  "description": "The unique identifier of the creator of the Node Configuration"
                },
                "created_by_type": {
                  "type": "string",
                  "description": "The account type of the creator of the Node Configuration"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last modification date of the Node Configuration"
                },
                "updated_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to update the Node Configuration"
                },
                "updated_by_type": {
                  "type": "string",
                  "description": "The type of the last account to update the Node Configuration"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "Determine if the Node Configuration is set at \"deleted\""
                },
                "deleted_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The last activation date of the Node Configuration"
                },
                "deleted_by": {
                  "type": "string",
                  "description": "The unique identifier of the last account to activate the Node Configuration"
                },
                "deleted_by_type": {
                  "type": "string",
                  "description": "The type of the last account to activate the Node Configuration"
                },
                "value": {
                  "type": "object",
                  "description": "The Node Configuration value",
                  "additionalProperties": {}
                },
                "connector_uuid": {
                  "type": "string",
                  "format": "uuid",
                  "description": "UUID of the Connector Configuration"
                },
                "display_status": {
                  "type": "string",
                  "enum": [
                    "RUNNING",
                    "STOPPED",
                    "ERROR",
                    "CRITICAL_ERROR",
                    "STARTING",
                    "STOPPING"
                  ],
                  "description": "Current status of the Connector Configuration"
                }
              },
              "required": [
                "organization_uuid",
                "connector_uuid",
                "created_at",
                "created_by",
                "created_by_type",
                "module_configuration_uuid",
                "name",
                "updated_at",
                "updated_by",
                "updated_by_type",
                "uuid"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "s_s_h_public_key": {
        "required": [
          "id",
          "public_key"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetAddAtomRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "default": "manual"
          },
          "atom_type": {
            "type": "string",
            "title": "Atom Type"
          },
          "atom_name": {
            "type": "string",
            "title": "Atom Name"
          }
        },
        "type": "object",
        "required": [
          "atom_type",
          "atom_name"
        ],
        "title": "AssetAddAtomRecommendationDTO"
      },
      "AssetAddPropRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "source": {
            "type": "string",
            "title": "Source",
            "default": "manual"
          },
          "prop": {
            "type": "string",
            "title": "Prop"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "prop",
          "value"
        ],
        "title": "AssetAddPropRecommendationDTO"
      },
      "AssetAtomRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "applied",
              "dismissed"
            ],
            "title": "Status"
          },
          "atom_type": {
            "type": "string",
            "title": "Atom Type"
          },
          "atom_name": {
            "type": "string",
            "title": "Atom Name"
          },
          "atom_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Atom Uuid"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "uuid",
          "status",
          "atom_type",
          "atom_name",
          "atom_uuid"
        ],
        "title": "AssetAtomRecommendationDTO"
      },
      "AssetCreateDTO": {
        "properties": {
          "uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "organization Uuid"
          },
          "entity_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Uuid"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "host",
              "account",
              "network"
            ],
            "title": "Type"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "criticality": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Criticality",
            "default": 0
          },
          "props": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Props",
            "description": "Attach contextual properties"
          },
          "atoms": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atoms",
            "description": "Attach detection properties"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "reviewed": {
            "type": "boolean",
            "title": "Reviewed",
            "description": "Mark the asset as reviewed",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "manual",
              "automatic",
              "import"
            ],
            "title": "Source",
            "default": "manual"
          }
        },
        "type": "object",
        "required": [
          "organization_uuid",
          "name",
          "type"
        ],
        "title": "AssetCreateDTO"
      },
      "AssetDTO": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "entity_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "organization Uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_by_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Type"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "first_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Seen"
          },
          "last_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Seen"
          },
          "nb_events": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nb Events"
          },
          "nb_alerts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nb Alerts"
          },
          "nb_atoms": {
            "type": "integer",
            "title": "Nb Atoms",
            "default": 0
          },
          "atoms": {
            "type": "object",
            "title": "Atoms",
            "default": {}
          },
          "props": {
            "type": "object",
            "title": "Props",
            "default": {}
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "revoked": {
            "type": "boolean",
            "title": "Revoked",
            "default": false
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "revoked_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked By"
          },
          "reviewed": {
            "type": "boolean",
            "title": "Reviewed",
            "default": false
          },
          "reviewed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed At"
          },
          "reviewed_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed By"
          },
          "source": {
            "type": "string",
            "enum": [
              "manual",
              "automatic",
              "import"
            ],
            "title": "Source",
            "default": "automatic"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "criticity": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticity",
            "description": "Asset criticality (legacy compatibility with API v1.0)"
          },
          "asset_type": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Type",
            "description": "Asset type (legacy compatibility with API v1.0)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "pending_recommendations": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ShortAssetPropRecommendationDTO"
                    },
                    {
                      "$ref": "#/components/schemas/ShortAssetAtomRecommendationDTO"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pending Recommendations"
          },
          "locked_props": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Locked Props",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "uuid",
          "organization_uuid",
          "name",
          "type"
        ],
        "title": "AssetDTO"
      },
      "AssetHistoryDTO": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_by_type": {
            "type": "string",
            "title": "Created By Type",
            "default": "avatar"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          },
          "event_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Uuid",
            "description": "UUID of the event that generated the timeline entry"
          },
          "atom_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atom Name"
          },
          "atom_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atom Uuid"
          },
          "atom_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atom Type"
          },
          "action": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Action"
          },
          "fields": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fields"
          },
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid",
            "description": "UUID of the asset discovery rule that triggered the timeline entry"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version",
            "description": "Version of the asset discovery rule that triggered the timeline entry"
          },
          "rule_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Name"
          }
        },
        "type": "object",
        "required": [
          "created_at"
        ],
        "title": "AssetHistoryDTO"
      },
      "AssetPropRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "applied",
              "dismissed"
            ],
            "title": "Status"
          },
          "prop": {
            "type": "string",
            "title": "Prop"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "uuid",
          "status",
          "prop",
          "value"
        ],
        "title": "AssetPropRecommendationDTO"
      },
      "AssetShortDTO": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "entity_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Uuid"
          },
          "organization_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "organization Uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By"
          },
          "created_by_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Type"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "first_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Seen"
          },
          "last_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Seen"
          },
          "nb_events": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nb Events"
          },
          "nb_alerts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nb Alerts"
          },
          "nb_atoms": {
            "type": "integer",
            "title": "Nb Atoms",
            "default": 0
          },
          "atoms": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atoms"
          },
          "props": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Props"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "revoked": {
            "type": "boolean",
            "title": "Revoked",
            "default": false
          },
          "revoked_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked At"
          },
          "revoked_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked By"
          },
          "reviewed": {
            "type": "boolean",
            "title": "Reviewed",
            "default": false
          },
          "reviewed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed At"
          },
          "reviewed_by": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed By"
          },
          "source": {
            "type": "string",
            "enum": [
              "manual",
              "automatic",
              "import"
            ],
            "title": "Source",
            "default": "automatic"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "criticity": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticity",
            "description": "Asset criticality (legacy compatibility with API v1.0)"
          },
          "asset_type": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Type",
            "description": "Asset type (legacy compatibility with API v1.0)"
          }
        },
        "type": "object",
        "required": [
          "uuid",
          "organization_uuid",
          "name",
          "type"
        ],
        "title": "AssetShortDTO"
      },
      "AssetUpdateDTO": {
        "properties": {
          "entity_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Uuid"
          },
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "host",
                  "account",
                  "network"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality"
          },
          "props": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Props",
            "description": "Attach contextual properties"
          },
          "atoms": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Atoms",
            "description": "Attach detection properties"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "revoked": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revoked",
            "description": "Mark the asset as revoked"
          },
          "reviewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed",
            "description": "Mark the asset as reviewed"
          }
        },
        "type": "object",
        "title": "AssetUpdateDTO"
      },
      "AtomShortDTO": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "organization_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "organization Uuid"
          },
          "entity_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "first_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Seen"
          },
          "last_seen": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Seen"
          },
          "nb_events": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nb Events"
          },
          "asset_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Uuid"
          },
          "asset_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Name"
          },
          "asset_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Type"
          },
          "asset_criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Asset Criticality"
          }
        },
        "type": "object",
        "required": [
          "uuid",
          "name",
          "type"
        ],
        "title": "AtomShortDTO"
      },
      "Body_attach_detection_property_v2_asset_management_assets__uuid__attach_post": {
        "properties": {
          "atom_type": {
            "type": "string",
            "title": "Atom Type",
            "description": "Detection property type"
          },
          "atom": {
            "type": "string",
            "title": "Atom",
            "description": "Detection property value"
          }
        },
        "type": "object",
        "required": [
          "atom_type",
          "atom"
        ],
        "title": "Body_attach_detection_property_v2_asset_management_assets__uuid__attach_post"
      },
      "Body_detach_detection_property_v2_asset_management_assets__uuid__detach_post": {
        "properties": {
          "atom_type": {
            "type": "string",
            "title": "Atom Type",
            "description": "Detection property type"
          },
          "atom": {
            "type": "string",
            "title": "Atom",
            "description": "Detection property value"
          }
        },
        "type": "object",
        "required": [
          "atom_type",
          "atom"
        ],
        "title": "Body_detach_detection_property_v2_asset_management_assets__uuid__detach_post"
      },
      "Body_merge_assets_v2_asset_management_assets_merge_post": {
        "properties": {
          "destination": {
            "type": "string",
            "format": "uuid",
            "title": "Destination",
            "description": "UUID of the asset that will receive all source assets' properties"
          },
          "sources": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Sources",
            "description": "A list of asset UUIDs whose properties will be merged into the destination asset"
          }
        },
        "type": "object",
        "required": [
          "destination",
          "sources"
        ],
        "title": "Body_merge_assets_v2_asset_management_assets_merge_post"
      },
      "Body_update_asset_recommendation_v2_asset_management_assets__uuid__recommendation__recommendation_uuid__put": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "pending",
                  "applied",
                  "dismissed"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          }
        },
        "type": "object",
        "title": "Body_update_asset_recommendation_v2_asset_management_assets__uuid__recommendation__recommendation_uuid__put"
      },
      "BulkAddTagsParameters": {
        "properties": {
          "uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuids",
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          "organization_uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "organization Uuids",
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          "types": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Types",
            "description": "Filter by comma-separated list of asset types"
          },
          "sources": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Filter by comma-separated list of asset sources"
          },
          "reviewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed",
            "description": "Filter reviewed assets only"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality",
            "description": "Filter assets with higher criticality"
          },
          "tags": {
            "type": "string",
            "title": "Tags",
            "description": "Comma-separated list of tags to add to filtered assets"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tags"
        ],
        "title": "BulkAddTagsParameters"
      },
      "BulkCriticalityParameters": {
        "properties": {
          "uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuids",
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          "organization_uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "organization Uuids",
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          "types": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Types",
            "description": "Filter by comma-separated list of asset types"
          },
          "sources": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Filter by comma-separated list of asset sources"
          },
          "reviewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed",
            "description": "Filter reviewed assets only"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality",
            "description": "Filter assets with higher criticality"
          },
          "new_criticality": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "New Criticality",
            "description": "Criticality value to set to filtered assets"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "new_criticality"
        ],
        "title": "BulkCriticalityParameters"
      },
      "BulkReviewAssetsParameters": {
        "properties": {
          "uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuids",
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          "organization_uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "organization Uuids",
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          "types": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Types",
            "description": "Filter by comma-separated list of asset types"
          },
          "sources": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Filter by comma-separated list of asset sources"
          },
          "reviewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed",
            "description": "Filter reviewed assets only"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality",
            "description": "Filter assets with higher criticality"
          },
          "review": {
            "type": "boolean",
            "title": "Review",
            "description": "Wether to mark all assets as reviewed or not"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "review"
        ],
        "title": "BulkReviewAssetsParameters"
      },
      "BulkRevokeAssetsParameters": {
        "properties": {
          "uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uuids",
            "description": "Filter by comma-separated list of asset UUIDs"
          },
          "organization_uuids": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "organization Uuids",
            "description": "Filter by comma-separated list of organization UUIDs"
          },
          "types": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Types",
            "description": "Filter by comma-separated list of asset types"
          },
          "sources": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources",
            "description": "Filter by comma-separated list of asset sources"
          },
          "reviewed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reviewed",
            "description": "Filter reviewed assets only"
          },
          "criticality": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Criticality",
            "description": "Filter assets with higher criticality"
          },
          "revoke": {
            "type": "boolean",
            "title": "Revoke",
            "description": "Wether or not to revoke or restore all assets"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "revoke"
        ],
        "title": "BulkRevokeAssetsParameters"
      },
      "BACKEND_Asset management API_HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/BACKEND_Asset management API_ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Paginated_AssetShortDTO_": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AssetShortDTO",
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "total",
          "items"
        ],
        "title": "Paginated[AssetShortDTO]"
      },
      "Paginated_AtomShortDTO_": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/AtomShortDTO",
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "total",
          "items"
        ],
        "title": "Paginated[AtomShortDTO]"
      },
      "Paginated_dict_date__list_AssetHistoryDTO___": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "items": {
            "items": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/AssetHistoryDTO"
                },
                "type": "array"
              },
              "propertyNames": {
                "format": "date"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "total",
          "items"
        ],
        "title": "Paginated[dict[date, list[AssetHistoryDTO]]]"
      },
      "Paginated_str_": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "total",
          "items"
        ],
        "title": "Paginated[str]"
      },
      "ShortAssetAtomRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "atom_type": {
            "type": "string",
            "title": "Atom Type"
          },
          "atom_name": {
            "type": "string",
            "title": "Atom Name"
          },
          "atom_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Atom Uuid"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "uuid",
          "atom_type",
          "atom_name",
          "atom_uuid"
        ],
        "title": "ShortAssetAtomRecommendationDTO"
      },
      "ShortAssetPropRecommendationDTO": {
        "properties": {
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid"
          },
          "rule_uuid": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Uuid"
          },
          "rule_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Version"
          },
          "prop": {
            "type": "string",
            "title": "Prop"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "uuid",
          "prop",
          "value"
        ],
        "title": "ShortAssetPropRecommendationDTO"
      },
      "BACKEND_Asset management API_ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "EDLGatewayAPIHealthDTO": {
        "properties": {
          "hostname": {
            "type": "string",
            "title": "Hostname"
          },
          "release_id": {
            "type": "string",
            "title": "Release Id"
          },
          "time": {
            "type": "number",
            "title": "Time"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "results": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Results",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "hostname",
          "release_id",
          "time",
          "status"
        ],
        "title": "EDLGatewayAPIHealthDTO"
      },
      "IndicatorType": {
        "type": "string",
        "enum": [
          "ipv4",
          "ipv6",
          "domain-name"
        ],
        "title": "IndicatorType"
      },
      "CollectionListOfObservablesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "next_cursor": {
            "type": "string"
          }
        },
        "required": [
          "next_cursor"
        ]
      },
      "ListOfObjectsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "next_cursor": {
            "type": "string"
          }
        },
        "required": [
          "next_cursor"
        ]
      },
      "CollectionListOfRelationshipsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of STIX relationships",
            "items": {
              "type": "object",
              "properties": {
                "related_object": {
                  "description": "Related STIX object"
                },
                "relationship": {
                  "description": "Relationship in STIX format",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "created_by_ref": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "modified": {
                      "type": "string"
                    },
                    "revoked": {
                      "type": "boolean",
                      "default": false
                    },
                    "labels": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "external_references": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "source_name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "external_id": {
                            "type": "string",
                            "x-nullable": true
                          }
                        },
                        "required": [
                          "source_name"
                        ]
                      }
                    },
                    "object_marking_refs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "confidence": {
                      "type": "integer",
                      "x-nullable": true,
                      "minimum": 0,
                      "maximum": 100
                    },
                    "lang": {
                      "type": "string"
                    },
                    "spec_version": {
                      "type": "string"
                    },
                    "x_cti_sources_refs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_uploaded_files": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "x_cti_impacted_sectors": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_impacted_locations": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_deprecated": {
                      "type": "boolean",
                      "default": false
                    },
                    "relationship_type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "source_ref": {
                      "type": "string"
                    },
                    "target_ref": {
                      "type": "string"
                    },
                    "start_time": {
                      "type": "string"
                    },
                    "stop_time": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "created",
                    "id",
                    "modified",
                    "relationship_type",
                    "source_ref",
                    "target_ref",
                    "type"
                  ]
                }
              },
              "required": [
                "related_object",
                "relationship"
              ]
            }
          },
          "next_cursor": {
            "type": "string"
          }
        },
        "required": [
          "next_cursor"
        ]
      },
      "WrappedExportJobSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "object_id": {
                "type": "string"
              },
              "format": {
                "type": "string"
              },
              "relationship_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "type": "string"
              },
              "file": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "modified": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "object_id"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ListOfFeedsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "title": {
                  "type": "string",
                  "default": ""
                },
                "description": {
                  "type": "string",
                  "default": ""
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "intrusion-set",
                      "campaign",
                      "observed-data",
                      "grouping",
                      "marking-definition",
                      "identity",
                      "indicator",
                      "tool",
                      "relationship",
                      "location",
                      "infrastructure",
                      "threat-actor",
                      "malware",
                      "course-of-action",
                      "opinion",
                      "vulnerability",
                      "note",
                      "attack-pattern",
                      "sighting",
                      "report"
                    ]
                  }
                },
                "observable_types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "text",
                      "software",
                      "mac-addr",
                      "domain-name",
                      "ipv4-addr",
                      "directory",
                      "email-addr",
                      "x509-certificate",
                      "filename",
                      "address",
                      "process",
                      "autonomous-system",
                      "artifact",
                      "email-message",
                      "user-account",
                      "windows-registry-key",
                      "phone-number",
                      "mutex",
                      "file",
                      "ipv6-addr",
                      "observable-relationship",
                      "individual",
                      "organization",
                      "url"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "tlps": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "marking-definition--00000000-1111-2222-3333-444444444444",
                      "marking-definition--00000000-1111-2222-3333-444444444444",
                      "marking-definition--00000000-1111-2222-3333-444444444444",
                      "marking-definition--00000000-1111-2222-3333-444444444444"
                    ]
                  }
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "sectors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "locations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string",
                  "readOnly": true
                },
                "format": {
                  "type": "string",
                  "default": "json",
                  "enum": [
                    "json",
                    "csv",
                    "text",
                    "custom"
                  ]
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "confidence",
                      "observable_types",
                      "created",
                      "valid_until",
                      "last_seen",
                      "id",
                      "tlp",
                      "type",
                      "sources",
                      "observables",
                      "name",
                      "valid_from",
                      "pattern",
                      "kill_chain",
                      "first_seen",
                      "pattern_type",
                      "modified"
                    ]
                  }
                },
                "template": {
                  "type": "string"
                }
              }
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "WrappedFeedSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string",
                "default": ""
              },
              "description": {
                "type": "string",
                "default": ""
              },
              "types": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "intrusion-set",
                    "campaign",
                    "observed-data",
                    "grouping",
                    "marking-definition",
                    "identity",
                    "indicator",
                    "tool",
                    "relationship",
                    "location",
                    "infrastructure",
                    "threat-actor",
                    "malware",
                    "course-of-action",
                    "opinion",
                    "vulnerability",
                    "note",
                    "attack-pattern",
                    "sighting",
                    "report"
                  ]
                }
              },
              "observable_types": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "text",
                    "software",
                    "mac-addr",
                    "domain-name",
                    "ipv4-addr",
                    "directory",
                    "email-addr",
                    "x509-certificate",
                    "filename",
                    "address",
                    "process",
                    "autonomous-system",
                    "artifact",
                    "email-message",
                    "user-account",
                    "windows-registry-key",
                    "phone-number",
                    "mutex",
                    "file",
                    "ipv6-addr",
                    "observable-relationship",
                    "individual",
                    "organization",
                    "url"
                  ]
                }
              },
              "sources": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tlps": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "marking-definition--00000000-1111-2222-3333-444444444444",
                    "marking-definition--00000000-1111-2222-3333-444444444444",
                    "marking-definition--00000000-1111-2222-3333-444444444444",
                    "marking-definition--00000000-1111-2222-3333-444444444444"
                  ]
                }
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sectors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locations": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "created": {
                "type": "string"
              },
              "modified": {
                "type": "string"
              },
              "organization_uuid": {
                "type": "string",
                "readOnly": true
              },
              "format": {
                "type": "string",
                "default": "json",
                "enum": [
                  "json",
                  "csv",
                  "text",
                  "custom"
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "confidence",
                    "observable_types",
                    "created",
                    "valid_until",
                    "last_seen",
                    "id",
                    "tlp",
                    "type",
                    "sources",
                    "observables",
                    "name",
                    "valid_from",
                    "pattern",
                    "kill_chain",
                    "first_seen",
                    "pattern_type",
                    "modified"
                  ]
                }
              },
              "template": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "ListOfSTIXObjectsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "ContextsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of STIX bundles",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "spec_version": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "objects": {
                  "x-nullable": true
                }
              },
              "required": [
                "type"
              ]
            }
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "BundleSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "spec_version": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "objects": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "ListOfCollectionsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "default": ""
                },
                "created": {
                  "type": "string",
                  "readOnly": true
                },
                "modified": {
                  "type": "string",
                  "readOnly": true
                },
                "created_by": {
                  "type": "string"
                },
                "modified_by": {
                  "type": "string"
                },
                "organization_uuid": {
                  "type": "string"
                },
                "available_for_sub_organizations": {
                  "type": "boolean",
                  "default": false
                },
                "indicators_count": {
                  "type": "integer"
                }
              },
              "required": [
                "created_by",
                "modified_by"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "CollectionSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "created": {
            "type": "string",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "readOnly": true
          },
          "created_by": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "organization_uuid": {
            "type": "string"
          },
          "available_for_sub_organizations": {
            "type": "boolean",
            "default": false
          },
          "indicators_count": {
            "type": "integer"
          }
        },
        "required": [
          "created_by",
          "modified_by"
        ]
      },
      "IndicatorSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "created_by_ref": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "revoked": {
            "type": "boolean",
            "default": false
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "external_references": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source_name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "external_id": {
                  "type": "string",
                  "x-nullable": true
                }
              },
              "required": [
                "source_name"
              ]
            }
          },
          "object_marking_refs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "confidence": {
            "type": "integer",
            "x-nullable": true,
            "minimum": 0,
            "maximum": 100
          },
          "lang": {
            "type": "string"
          },
          "spec_version": {
            "type": "string"
          },
          "x_cti_sources_refs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x_cti_uploaded_files": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "x_cti_impacted_sectors": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "x_cti_impacted_locations": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "x_cti_deprecated": {
            "type": "boolean",
            "default": false
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "valid_from": {
            "type": "string"
          },
          "valid_until": {
            "type": "string"
          },
          "kill_chain_phases": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "kill_chain_name": {
                  "type": "string"
                },
                "phase_name": {
                  "type": "string"
                }
              },
              "required": [
                "kill_chain_name",
                "phase_name"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "created_by_ref": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "revoked": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "external_references": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "source_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "external_id": {
                        "type": "string",
                        "x-nullable": true
                      }
                    },
                    "required": [
                      "source_name"
                    ]
                  }
                },
                "object_marking_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "confidence": {
                  "type": "integer",
                  "x-nullable": true,
                  "minimum": 0,
                  "maximum": 100
                },
                "lang": {
                  "type": "string"
                },
                "spec_version": {
                  "type": "string"
                },
                "x_cti_sources_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_uploaded_files": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "x_cti_impacted_sectors": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_impacted_locations": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_deprecated": {
                  "type": "boolean",
                  "default": false
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "created",
                "id",
                "modified",
                "type"
              ]
            }
          },
          "pattern_type": {
            "type": "string",
            "default": "stix"
          },
          "indicator_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "benign",
                "compromised",
                "malicious-activity",
                "attribution",
                "anonymization",
                "anomalous-activity"
              ]
            }
          },
          "x_cti_observable_types": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "created",
          "id",
          "modified",
          "pattern",
          "type",
          "valid_from"
        ]
      },
      "ListOfSightedObjectsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          },
          "sightings": {
            "type": "integer"
          },
          "created": {
            "type": "string"
          },
          "organization_uuids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CountTotalIocsSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "max": {
            "type": "integer"
          }
        }
      },
      "BulkTaskIdSchema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          }
        },
        "required": [
          "task_id"
        ]
      },
      "ListOfKillChainsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "display_name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "phases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "display_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "WrappedKillChainItemSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "display_name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "phases": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "display_name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            },
            "required": [
              "id",
              "name"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ListOfLightSTIXObjectsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "type"
              ]
            }
          },
          "has_more": {
            "type": "boolean"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "WrappedSTIXObjectSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "_items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ListOfRelationshipsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "related_object": {
                  "description": "Related STIX object"
                },
                "relationship": {
                  "description": "Relationship in STIX format",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "created_by_ref": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "modified": {
                      "type": "string"
                    },
                    "revoked": {
                      "type": "boolean",
                      "default": false
                    },
                    "labels": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "external_references": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "source_name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "external_id": {
                            "type": "string",
                            "x-nullable": true
                          }
                        },
                        "required": [
                          "source_name"
                        ]
                      }
                    },
                    "object_marking_refs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "confidence": {
                      "type": "integer",
                      "x-nullable": true,
                      "minimum": 0,
                      "maximum": 100
                    },
                    "lang": {
                      "type": "string"
                    },
                    "spec_version": {
                      "type": "string"
                    },
                    "x_cti_sources_refs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_uploaded_files": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "x_cti_impacted_sectors": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_impacted_locations": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "type": "string"
                      }
                    },
                    "x_cti_deprecated": {
                      "type": "boolean",
                      "default": false
                    },
                    "relationship_type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "source_ref": {
                      "type": "string"
                    },
                    "target_ref": {
                      "type": "string"
                    },
                    "start_time": {
                      "type": "string"
                    },
                    "stop_time": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "created",
                    "id",
                    "modified",
                    "relationship_type",
                    "source_ref",
                    "target_ref",
                    "type"
                  ]
                }
              },
              "required": [
                "related_object",
                "relationship"
              ]
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "ListOfRelationshipTypesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "ApiNotesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "readOnly": true
                },
                "created_by_ref": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "object_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "authors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "author_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "content": {
                  "type": "string"
                },
                "opinion": {
                  "type": "string",
                  "enum": [
                    "strongly-agree",
                    "disagree",
                    "strongly-disagree",
                    "neutral",
                    "agree"
                  ]
                },
                "object_marking_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "object_refs",
                "type"
              ]
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "WrappedApiNoteSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "readOnly": true
              },
              "created_by_ref": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "modified": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "object_refs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "authors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "author_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "content": {
                "type": "string"
              },
              "opinion": {
                "type": "string",
                "enum": [
                  "strongly-agree",
                  "disagree",
                  "strongly-disagree",
                  "neutral",
                  "agree"
                ]
              },
              "object_marking_refs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "object_refs",
              "type"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "SearchSchema": {
        "type": "object",
        "properties": {}
      },
      "ListOfObservablesSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "required": [
          "total"
        ]
      },
      "RelationshipStatisticsSchema": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "object"
          },
          "relationship_types": {
            "type": "object"
          },
          "remote_types": {
            "type": "object"
          }
        }
      },
      "ListOfObservableRelationshipsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "observable-relationship"
                  ]
                },
                "source_ref": {
                  "type": "string"
                },
                "target_ref": {
                  "type": "string"
                },
                "relationship_type": {
                  "type": "string"
                },
                "x_cti_sources_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "history": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "first_seen": {
                        "type": "string"
                      },
                      "last_seen": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                },
                "modified": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "modified",
                "relationship_type",
                "source_ref",
                "target_ref",
                "type"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "total"
        ]
      },
      "WrappedObservableRelationshipSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "observable-relationship"
                ]
              },
              "source_ref": {
                "type": "string"
              },
              "target_ref": {
                "type": "string"
              },
              "relationship_type": {
                "type": "string"
              },
              "x_cti_sources_refs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "first_seen": {
                      "type": "string"
                    },
                    "last_seen": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              },
              "modified": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "modified",
              "relationship_type",
              "source_ref",
              "target_ref",
              "type"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ListOfObservablesTagsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "required": [
          "has_more"
        ]
      },
      "WrappedObservableSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          }
        }
      },
      "ListOfObservableIndicatorsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "created_by_ref": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "revoked": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "external_references": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "source_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "external_id": {
                        "type": "string",
                        "x-nullable": true
                      }
                    },
                    "required": [
                      "source_name"
                    ]
                  }
                },
                "object_marking_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "confidence": {
                  "type": "integer",
                  "x-nullable": true,
                  "minimum": 0,
                  "maximum": 100
                },
                "lang": {
                  "type": "string"
                },
                "spec_version": {
                  "type": "string"
                },
                "x_cti_sources_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_uploaded_files": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "x_cti_impacted_sectors": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_impacted_locations": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_deprecated": {
                  "type": "boolean",
                  "default": false
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "pattern": {
                  "type": "string"
                },
                "valid_from": {
                  "type": "string"
                },
                "valid_until": {
                  "type": "string"
                },
                "kill_chain_phases": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kill_chain_name": {
                        "type": "string"
                      },
                      "phase_name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "kill_chain_name",
                      "phase_name"
                    ]
                  }
                },
                "assertions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "created_by_ref": {
                        "type": "string"
                      },
                      "created": {
                        "type": "string"
                      },
                      "modified": {
                        "type": "string"
                      },
                      "revoked": {
                        "type": "boolean",
                        "default": false
                      },
                      "labels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "external_references": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "source_name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "external_id": {
                              "type": "string",
                              "x-nullable": true
                            }
                          },
                          "required": [
                            "source_name"
                          ]
                        }
                      },
                      "object_marking_refs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "confidence": {
                        "type": "integer",
                        "x-nullable": true,
                        "minimum": 0,
                        "maximum": 100
                      },
                      "lang": {
                        "type": "string"
                      },
                      "spec_version": {
                        "type": "string"
                      },
                      "x_cti_sources_refs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "x_cti_uploaded_files": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "x_cti_impacted_sectors": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                          "type": "string"
                        }
                      },
                      "x_cti_impacted_locations": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                          "type": "string"
                        }
                      },
                      "x_cti_deprecated": {
                        "type": "boolean",
                        "default": false
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "created",
                      "id",
                      "modified",
                      "type"
                    ]
                  }
                },
                "pattern_type": {
                  "type": "string",
                  "default": "stix"
                },
                "indicator_types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "benign",
                      "compromised",
                      "malicious-activity",
                      "attribution",
                      "anonymization",
                      "anomalous-activity"
                    ]
                  }
                },
                "x_cti_observable_types": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "created",
                "id",
                "modified",
                "pattern",
                "type",
                "valid_from"
              ]
            }
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "required": [
          "has_more"
        ]
      },
      "ListOfBulkSearchResultsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of matching observable results",
            "items": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "description": "Submitted search term"
                },
                "found": {
                  "type": "boolean",
                  "description": "Whether a matching observable was found"
                },
                "observable": {}
              },
              "required": [
                "found",
                "search"
              ]
            }
          }
        }
      },
      "ListOfObservablesAndRelationshipsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "related_object": {
                  "description": "Related STIX observable"
                },
                "relationship": {
                  "description": "Relationship in STIX format",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "observable-relationship"
                      ]
                    },
                    "source_ref": {
                      "type": "string"
                    },
                    "target_ref": {
                      "type": "string"
                    },
                    "relationship_type": {
                      "type": "string"
                    },
                    "x_cti_sources_refs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "first_seen": {
                            "type": "string"
                          },
                          "last_seen": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "modified": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "modified",
                    "relationship_type",
                    "source_ref",
                    "target_ref",
                    "type"
                  ]
                }
              },
              "required": [
                "related_object",
                "relationship"
              ]
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "CountObservablesSchema": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "count"
        ]
      },
      "ListOfSTIXRelationshipsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "created_by_ref": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "revoked": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "external_references": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "source_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "external_id": {
                        "type": "string",
                        "x-nullable": true
                      }
                    },
                    "required": [
                      "source_name"
                    ]
                  }
                },
                "object_marking_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "confidence": {
                  "type": "integer",
                  "x-nullable": true,
                  "minimum": 0,
                  "maximum": 100
                },
                "lang": {
                  "type": "string"
                },
                "spec_version": {
                  "type": "string"
                },
                "x_cti_sources_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_uploaded_files": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "x_cti_impacted_sectors": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_impacted_locations": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_deprecated": {
                  "type": "boolean",
                  "default": false
                },
                "relationship_type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "source_ref": {
                  "type": "string"
                },
                "target_ref": {
                  "type": "string"
                },
                "start_time": {
                  "type": "string"
                },
                "stop_time": {
                  "type": "string"
                }
              },
              "required": [
                "created",
                "id",
                "modified",
                "relationship_type",
                "source_ref",
                "target_ref",
                "type"
              ]
            }
          },
          "total": {
            "type": "integer"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "WrappedSTIXRelationshipSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "created_by_ref": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "modified": {
                "type": "string"
              },
              "revoked": {
                "type": "boolean",
                "default": false
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "external_references": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "source_name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "external_id": {
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": [
                    "source_name"
                  ]
                }
              },
              "object_marking_refs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "confidence": {
                "type": "integer",
                "x-nullable": true,
                "minimum": 0,
                "maximum": 100
              },
              "lang": {
                "type": "string"
              },
              "spec_version": {
                "type": "string"
              },
              "x_cti_sources_refs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "x_cti_uploaded_files": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "x_cti_impacted_sectors": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              },
              "x_cti_impacted_locations": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              },
              "x_cti_deprecated": {
                "type": "boolean",
                "default": false
              },
              "relationship_type": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "source_ref": {
                "type": "string"
              },
              "target_ref": {
                "type": "string"
              },
              "start_time": {
                "type": "string"
              },
              "stop_time": {
                "type": "string"
              }
            },
            "required": [
              "created",
              "id",
              "modified",
              "relationship_type",
              "source_ref",
              "target_ref",
              "type"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "created_by_ref": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "revoked": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "external_references": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "source_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "external_id": {
                        "type": "string",
                        "x-nullable": true
                      }
                    },
                    "required": [
                      "source_name"
                    ]
                  }
                },
                "object_marking_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "confidence": {
                  "type": "integer",
                  "x-nullable": true,
                  "minimum": 0,
                  "maximum": 100
                },
                "lang": {
                  "type": "string"
                },
                "spec_version": {
                  "type": "string"
                },
                "x_cti_sources_refs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_uploaded_files": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "x_cti_impacted_sectors": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_impacted_locations": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                },
                "x_cti_deprecated": {
                  "type": "boolean",
                  "default": false
                },
                "relationship_type": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "source_ref": {
                  "type": "string"
                },
                "target_ref": {
                  "type": "string"
                },
                "start_time": {
                  "type": "string"
                },
                "stop_time": {
                  "type": "string"
                }
              },
              "required": [
                "created",
                "id",
                "modified",
                "relationship_type",
                "source_ref",
                "target_ref",
                "type"
              ]
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "WrappedCountSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "previous_period_count": {
                "type": "integer"
              }
            },
            "required": [
              "count"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "TopListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "relationships": {
                  "type": "integer"
                },
                "previous_period_relationships": {
                  "type": "integer"
                }
              },
              "required": [
                "created",
                "id",
                "name",
                "relationships"
              ]
            }
          }
        }
      },
      "WeeklyTopListSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "created": {
                  "type": "string"
                },
                "last_week_count": {
                  "type": "integer"
                },
                "total_count": {
                  "type": "integer"
                }
              },
              "required": [
                "created",
                "id",
                "last_week_count",
                "name",
                "total_count",
                "type"
              ]
            }
          }
        }
      },
      "ListOfLabelsSchema": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "color": {
                        "type": "string"
                      },
                      "modified": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "color",
                      "id",
                      "name"
                    ]
                  }
                },
                "created": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "created",
                "id",
                "name",
                "status",
                "values"
              ]
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "LabelSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "modified": {
                  "type": "string"
                }
              },
              "required": [
                "color",
                "id",
                "name"
              ]
            }
          },
          "created": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "created",
          "id",
          "name",
          "status",
          "values"
        ]
      },
      "LastKnownExploitedVulnerabilities": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-nullable": true
                },
                "cve_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "cvss_score": {
                  "type": "number",
                  "x-nullable": true
                },
                "vendor": {
                  "type": "string"
                },
                "product": {
                  "type": "string"
                }
              },
              "required": [
                "cve_id",
                "date",
                "description",
                "name"
              ]
            }
          }
        },
        "required": [
          "items"
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "User",
      "tags": [
        "User Authentication",
        "User profile",
        "MFA",
        "permissions"
      ]
    },
    {
      "name": "Workspace",
      "tags": [
        "customers",
        "organizations",
        "api-keys",
        "licenses",
        "invitations",
        "plans",
        "sub-organizations",
        "avatars",
        "users",
        "roles",
        "counters"
      ]
    },
    {
      "name": "Configuration",
      "tags": [
        "Entities",
        "Enrichers",
        "Callbacks",
        "Services",
        "Connectors",
        "Assets",
        "Atoms",
        "Connectors by status",
        "Connectors errors and warnings",
        "Connectors lag and processing lag",
        "formats",
        "Connector Optimization Rules"
      ]
    },
    {
      "name": "Intelligence",
      "tags": [
        "Objects",
        "CTI Objects",
        "Indicators",
        "Observables",
        "Observable relationships",
        "Exports",
        "Kill Chains",
        "Outgoing Feeds",
        "Collections",
        "MISP",
        "TAXII",
        "Bundles",
        "Images",
        "Labels",
        "Graphs",
        "Relationships",
        "Reports",
        "Support",
        "Sources",
        "Vulnerabilities"
      ]
    },
    {
      "name": "Detection",
      "tags": [
        "Rules",
        "compilation-reports",
        "rules-catalog-multi-tenant",
        "rules-catalog",
        "Alerts",
        "datasources",
        "generation-modes",
        "Alert filters",
        "IOC Collections",
        "Alerts",
        "Alert",
        "Alert Entities",
        "Alert Rules",
        "Alert Sources and Targets",
        "Stats",
        "Alert Status",
        "Alert Type",
        "Countermeasures",
        "Cyber Kill Chain",
        "UEBA"
      ]
    },
    {
      "name": "Investigation",
      "tags": [
        "Cases",
        "Case",
        "Comments",
        "Notebooks",
        "Events",
        "Tasks"
      ]
    },
    {
      "name": "Automation",
      "tags": [
        "Playbooks",
        "Playbook actions telemetry",
        "modules",
        "Playbook runs",
        "Playbooks runs",
        "Node runs",
        "Action Runs",
        "Actions",
        "Connector Configurations",
        "Connectors",
        "Module Configurations",
        "Modules",
        "Runs",
        "Trigger Configurations",
        "Triggers",
        "SSH Keys"
      ]
    },
    {
      "name": "Reporting",
      "tags": [
        "dashboards",
        "Intelligence",
        "Intelligence statistics",
        "Events",
        "Rules",
        "Alert filters",
        "Assets",
        "Playbooks",
        "Automation statistics",
        "AI assistant",
        "Statistics"
      ]
    }
  ]
}